grammar de.darmstadt.tu.crossing.CryptSL with
                                      org.eclipse.xtext.xbase.Xbase

generate cryptSL "http://www.darmstadt.de/tu/crossing/CryptSL"

import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

 
Domainmodel:
    'SPEC' javaType = [jvmTypes::JvmType|QualifiedName]
	'USES_OBJECTS' (object+=ObjectDecl)+
	('FORBIDDEN_EVENTS' (method+=ForbMethod)+)?
	'REQUIRED_EVENTS' (event+=Event)+
	'ENFORCE_ORDER' (order+=Order)+
	'ENFORCES_CONSTRAINTS' (req+=ObjectDecl)*
	'ENSURES' (req+=ObjectDecl);

Event:
	method+=Method | agg+=Label ':=' (lab+=[Label] (',' lab+=[Label])*) ";"
;

Order returns Expression:
  SimpleOrder ({Order.left=current} ',' right=SimpleOrder)*;

SimpleOrder returns Expression:
  Primary ({SimpleOrder.left=current} '|' right=Primary)*;

Primary returns Expression:
  OrderEv ('+' | '?' | '*')? | '(' Order ')' ('+' | '?' | '*')?
;

OrderEv:
	methx=[Label] 
;

Method returns Method: 
	 label+=Label ":" (leftSide=[Object] "=")? ID "(" (parameters+=[Object] (',' parameters+=[Object])*)?");"
;

ForbMethod:
	ID "(" (parameters+=[Object] (',' parameters+=[Object])*)")" ("=>" rep=[Label])?
;

ObjectDecl:
	objectType=[jvmTypes::JvmType|QualifiedName]  objectName=Object ";"	
;

Label:
	{Label}name=ID
;

Object:
	{Object}name=ID
;

	