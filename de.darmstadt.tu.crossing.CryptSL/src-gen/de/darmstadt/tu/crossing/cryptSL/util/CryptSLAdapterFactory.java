/**
 * generated by Xtext 2.13.0
 */
package de.darmstadt.tu.crossing.cryptSL.util;

import de.darmstadt.tu.crossing.cryptSL.Aggregate;
import de.darmstadt.tu.crossing.cryptSL.ArithmeticExpression;
import de.darmstadt.tu.crossing.cryptSL.ArithmeticOperator;
import de.darmstadt.tu.crossing.cryptSL.ArrayElements;
import de.darmstadt.tu.crossing.cryptSL.ComparingOperator;
import de.darmstadt.tu.crossing.cryptSL.ComparisonExpression;
import de.darmstadt.tu.crossing.cryptSL.Constraint;
import de.darmstadt.tu.crossing.cryptSL.CryptSLPackage;
import de.darmstadt.tu.crossing.cryptSL.DestroysBlock;
import de.darmstadt.tu.crossing.cryptSL.Domainmodel;
import de.darmstadt.tu.crossing.cryptSL.EnforceConsBlock;
import de.darmstadt.tu.crossing.cryptSL.EnsuresBlock;
import de.darmstadt.tu.crossing.cryptSL.Event;
import de.darmstadt.tu.crossing.cryptSL.Expression;
import de.darmstadt.tu.crossing.cryptSL.ForbMethod;
import de.darmstadt.tu.crossing.cryptSL.ForbiddenBlock;
import de.darmstadt.tu.crossing.cryptSL.LitList;
import de.darmstadt.tu.crossing.cryptSL.Literal;
import de.darmstadt.tu.crossing.cryptSL.LiteralExpression;
import de.darmstadt.tu.crossing.cryptSL.LogicalImply;
import de.darmstadt.tu.crossing.cryptSL.LogicalOperator;
import de.darmstadt.tu.crossing.cryptSL.Method;
import de.darmstadt.tu.crossing.cryptSL.ObjectDecl;
import de.darmstadt.tu.crossing.cryptSL.Order;
import de.darmstadt.tu.crossing.cryptSL.Par;
import de.darmstadt.tu.crossing.cryptSL.ParList;
import de.darmstadt.tu.crossing.cryptSL.PreDefinedPredicates;
import de.darmstadt.tu.crossing.cryptSL.Pred;
import de.darmstadt.tu.crossing.cryptSL.ReqPred;
import de.darmstadt.tu.crossing.cryptSL.RequiredBlock;
import de.darmstadt.tu.crossing.cryptSL.RequiresBlock;
import de.darmstadt.tu.crossing.cryptSL.SimpleOrder;
import de.darmstadt.tu.crossing.cryptSL.SuPar;
import de.darmstadt.tu.crossing.cryptSL.SuParList;
import de.darmstadt.tu.crossing.cryptSL.SuperType;
import de.darmstadt.tu.crossing.cryptSL.UnaryOperator;
import de.darmstadt.tu.crossing.cryptSL.UnaryPreExpression;
import de.darmstadt.tu.crossing.cryptSL.UseBlock;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see de.darmstadt.tu.crossing.cryptSL.CryptSLPackage
 * @generated
 */
public class CryptSLAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static CryptSLPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CryptSLAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = CryptSLPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CryptSLSwitch<Adapter> modelSwitch =
    new CryptSLSwitch<Adapter>()
    {
      @Override
      public Adapter caseDomainmodel(Domainmodel object)
      {
        return createDomainmodelAdapter();
      }
      @Override
      public Adapter caseUseBlock(UseBlock object)
      {
        return createUseBlockAdapter();
      }
      @Override
      public Adapter caseForbiddenBlock(ForbiddenBlock object)
      {
        return createForbiddenBlockAdapter();
      }
      @Override
      public Adapter caseRequiredBlock(RequiredBlock object)
      {
        return createRequiredBlockAdapter();
      }
      @Override
      public Adapter caseEnforceConsBlock(EnforceConsBlock object)
      {
        return createEnforceConsBlockAdapter();
      }
      @Override
      public Adapter caseRequiresBlock(RequiresBlock object)
      {
        return createRequiresBlockAdapter();
      }
      @Override
      public Adapter caseEnsuresBlock(EnsuresBlock object)
      {
        return createEnsuresBlockAdapter();
      }
      @Override
      public Adapter caseDestroysBlock(DestroysBlock object)
      {
        return createDestroysBlockAdapter();
      }
      @Override
      public Adapter caseObjectDecl(ObjectDecl object)
      {
        return createObjectDeclAdapter();
      }
      @Override
      public Adapter caseForbMethod(ForbMethod object)
      {
        return createForbMethodAdapter();
      }
      @Override
      public Adapter caseEvent(Event object)
      {
        return createEventAdapter();
      }
      @Override
      public Adapter caseSuperType(SuperType object)
      {
        return createSuperTypeAdapter();
      }
      @Override
      public Adapter caseMethod(Method object)
      {
        return createMethodAdapter();
      }
      @Override
      public Adapter caseParList(ParList object)
      {
        return createParListAdapter();
      }
      @Override
      public Adapter casePar(Par object)
      {
        return createParAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseConstraint(Constraint object)
      {
        return createConstraintAdapter();
      }
      @Override
      public Adapter caseLogicalImply(LogicalImply object)
      {
        return createLogicalImplyAdapter();
      }
      @Override
      public Adapter caseLogicalOperator(LogicalOperator object)
      {
        return createLogicalOperatorAdapter();
      }
      @Override
      public Adapter caseComparingOperator(ComparingOperator object)
      {
        return createComparingOperatorAdapter();
      }
      @Override
      public Adapter caseArithmeticOperator(ArithmeticOperator object)
      {
        return createArithmeticOperatorAdapter();
      }
      @Override
      public Adapter caseLiteralExpression(LiteralExpression object)
      {
        return createLiteralExpressionAdapter();
      }
      @Override
      public Adapter casePreDefinedPredicates(PreDefinedPredicates object)
      {
        return createPreDefinedPredicatesAdapter();
      }
      @Override
      public Adapter caseLiteral(Literal object)
      {
        return createLiteralAdapter();
      }
      @Override
      public Adapter caseUnaryOperator(UnaryOperator object)
      {
        return createUnaryOperatorAdapter();
      }
      @Override
      public Adapter caseArrayElements(ArrayElements object)
      {
        return createArrayElementsAdapter();
      }
      @Override
      public Adapter caseLitList(LitList object)
      {
        return createLitListAdapter();
      }
      @Override
      public Adapter casePred(Pred object)
      {
        return createPredAdapter();
      }
      @Override
      public Adapter caseReqPred(ReqPred object)
      {
        return createReqPredAdapter();
      }
      @Override
      public Adapter caseSuParList(SuParList object)
      {
        return createSuParListAdapter();
      }
      @Override
      public Adapter caseSuPar(SuPar object)
      {
        return createSuParAdapter();
      }
      @Override
      public Adapter caseAggregate(Aggregate object)
      {
        return createAggregateAdapter();
      }
      @Override
      public Adapter caseOrder(Order object)
      {
        return createOrderAdapter();
      }
      @Override
      public Adapter caseSimpleOrder(SimpleOrder object)
      {
        return createSimpleOrderAdapter();
      }
      @Override
      public Adapter caseComparisonExpression(ComparisonExpression object)
      {
        return createComparisonExpressionAdapter();
      }
      @Override
      public Adapter caseArithmeticExpression(ArithmeticExpression object)
      {
        return createArithmeticExpressionAdapter();
      }
      @Override
      public Adapter caseUnaryPreExpression(UnaryPreExpression object)
      {
        return createUnaryPreExpressionAdapter();
      }
      @Override
      public Adapter caseObject(de.darmstadt.tu.crossing.cryptSL.Object object)
      {
        return createObjectAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.Domainmodel <em>Domainmodel</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.Domainmodel
   * @generated
   */
  public Adapter createDomainmodelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.UseBlock <em>Use Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.UseBlock
   * @generated
   */
  public Adapter createUseBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.ForbiddenBlock <em>Forbidden Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.ForbiddenBlock
   * @generated
   */
  public Adapter createForbiddenBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.RequiredBlock <em>Required Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.RequiredBlock
   * @generated
   */
  public Adapter createRequiredBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.EnforceConsBlock <em>Enforce Cons Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.EnforceConsBlock
   * @generated
   */
  public Adapter createEnforceConsBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.RequiresBlock <em>Requires Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.RequiresBlock
   * @generated
   */
  public Adapter createRequiresBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.EnsuresBlock <em>Ensures Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.EnsuresBlock
   * @generated
   */
  public Adapter createEnsuresBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.DestroysBlock <em>Destroys Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.DestroysBlock
   * @generated
   */
  public Adapter createDestroysBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.ObjectDecl <em>Object Decl</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.ObjectDecl
   * @generated
   */
  public Adapter createObjectDeclAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.ForbMethod <em>Forb Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.ForbMethod
   * @generated
   */
  public Adapter createForbMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.Event <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.Event
   * @generated
   */
  public Adapter createEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.SuperType <em>Super Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.SuperType
   * @generated
   */
  public Adapter createSuperTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.Method <em>Method</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.Method
   * @generated
   */
  public Adapter createMethodAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.ParList <em>Par List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.ParList
   * @generated
   */
  public Adapter createParListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.Par <em>Par</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.Par
   * @generated
   */
  public Adapter createParAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.Constraint <em>Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.Constraint
   * @generated
   */
  public Adapter createConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.LogicalImply <em>Logical Imply</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.LogicalImply
   * @generated
   */
  public Adapter createLogicalImplyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.LogicalOperator <em>Logical Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.LogicalOperator
   * @generated
   */
  public Adapter createLogicalOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.ComparingOperator <em>Comparing Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.ComparingOperator
   * @generated
   */
  public Adapter createComparingOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.ArithmeticOperator <em>Arithmetic Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.ArithmeticOperator
   * @generated
   */
  public Adapter createArithmeticOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.LiteralExpression <em>Literal Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.LiteralExpression
   * @generated
   */
  public Adapter createLiteralExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.PreDefinedPredicates <em>Pre Defined Predicates</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.PreDefinedPredicates
   * @generated
   */
  public Adapter createPreDefinedPredicatesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.Literal <em>Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.Literal
   * @generated
   */
  public Adapter createLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.UnaryOperator <em>Unary Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.UnaryOperator
   * @generated
   */
  public Adapter createUnaryOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.ArrayElements <em>Array Elements</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.ArrayElements
   * @generated
   */
  public Adapter createArrayElementsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.LitList <em>Lit List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.LitList
   * @generated
   */
  public Adapter createLitListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.Pred <em>Pred</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.Pred
   * @generated
   */
  public Adapter createPredAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.ReqPred <em>Req Pred</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.ReqPred
   * @generated
   */
  public Adapter createReqPredAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.SuParList <em>Su Par List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.SuParList
   * @generated
   */
  public Adapter createSuParListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.SuPar <em>Su Par</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.SuPar
   * @generated
   */
  public Adapter createSuParAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.Aggregate <em>Aggregate</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.Aggregate
   * @generated
   */
  public Adapter createAggregateAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.Order <em>Order</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.Order
   * @generated
   */
  public Adapter createOrderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.SimpleOrder <em>Simple Order</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.SimpleOrder
   * @generated
   */
  public Adapter createSimpleOrderAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.ComparisonExpression <em>Comparison Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.ComparisonExpression
   * @generated
   */
  public Adapter createComparisonExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.ArithmeticExpression <em>Arithmetic Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.ArithmeticExpression
   * @generated
   */
  public Adapter createArithmeticExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.UnaryPreExpression <em>Unary Pre Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.UnaryPreExpression
   * @generated
   */
  public Adapter createUnaryPreExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link de.darmstadt.tu.crossing.cryptSL.Object <em>Object</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see de.darmstadt.tu.crossing.cryptSL.Object
   * @generated
   */
  public Adapter createObjectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //CryptSLAdapterFactory
