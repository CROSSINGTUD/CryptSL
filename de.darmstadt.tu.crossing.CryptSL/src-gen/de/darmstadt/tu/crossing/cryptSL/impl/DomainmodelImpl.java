/**
 * generated by Xtext 2.10.0
 */
package de.darmstadt.tu.crossing.cryptSL.impl;

import de.darmstadt.tu.crossing.cryptSL.Constraint;
import de.darmstadt.tu.crossing.cryptSL.CryptSLPackage;
import de.darmstadt.tu.crossing.cryptSL.Domainmodel;
import de.darmstadt.tu.crossing.cryptSL.Event;
import de.darmstadt.tu.crossing.cryptSL.Expression;
import de.darmstadt.tu.crossing.cryptSL.ForbMethod;
import de.darmstadt.tu.crossing.cryptSL.ObjectDecl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.xtext.common.types.JvmType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Domainmodel</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.darmstadt.tu.crossing.cryptSL.impl.DomainmodelImpl#getJavaType <em>Java Type</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.cryptSL.impl.DomainmodelImpl#getObject <em>Object</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.cryptSL.impl.DomainmodelImpl#getMethod <em>Method</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.cryptSL.impl.DomainmodelImpl#getEvent <em>Event</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.cryptSL.impl.DomainmodelImpl#getOrder <em>Order</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.cryptSL.impl.DomainmodelImpl#getReq <em>Req</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.cryptSL.impl.DomainmodelImpl#getEns <em>Ens</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DomainmodelImpl extends MinimalEObjectImpl.Container implements Domainmodel
{
  /**
   * The cached value of the '{@link #getJavaType() <em>Java Type</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getJavaType()
   * @generated
   * @ordered
   */
  protected JvmType javaType;

  /**
   * The cached value of the '{@link #getObject() <em>Object</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObject()
   * @generated
   * @ordered
   */
  protected EList<ObjectDecl> object;

  /**
   * The cached value of the '{@link #getMethod() <em>Method</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethod()
   * @generated
   * @ordered
   */
  protected EList<ForbMethod> method;

  /**
   * The cached value of the '{@link #getEvent() <em>Event</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvent()
   * @generated
   * @ordered
   */
  protected EList<Event> event;

  /**
   * The cached value of the '{@link #getOrder() <em>Order</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrder()
   * @generated
   * @ordered
   */
  protected Expression order;

  /**
   * The cached value of the '{@link #getReq() <em>Req</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReq()
   * @generated
   * @ordered
   */
  protected EList<Constraint> req;

  /**
   * The cached value of the '{@link #getEns() <em>Ens</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEns()
   * @generated
   * @ordered
   */
  protected EList<Constraint> ens;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DomainmodelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CryptSLPackage.Literals.DOMAINMODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JvmType getJavaType()
  {
    if (javaType != null && javaType.eIsProxy())
    {
      InternalEObject oldJavaType = (InternalEObject)javaType;
      javaType = (JvmType)eResolveProxy(oldJavaType);
      if (javaType != oldJavaType)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CryptSLPackage.DOMAINMODEL__JAVA_TYPE, oldJavaType, javaType));
      }
    }
    return javaType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JvmType basicGetJavaType()
  {
    return javaType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setJavaType(JvmType newJavaType)
  {
    JvmType oldJavaType = javaType;
    javaType = newJavaType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CryptSLPackage.DOMAINMODEL__JAVA_TYPE, oldJavaType, javaType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ObjectDecl> getObject()
  {
    if (object == null)
    {
      object = new EObjectContainmentEList<ObjectDecl>(ObjectDecl.class, this, CryptSLPackage.DOMAINMODEL__OBJECT);
    }
    return object;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ForbMethod> getMethod()
  {
    if (method == null)
    {
      method = new EObjectContainmentEList<ForbMethod>(ForbMethod.class, this, CryptSLPackage.DOMAINMODEL__METHOD);
    }
    return method;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Event> getEvent()
  {
    if (event == null)
    {
      event = new EObjectContainmentEList<Event>(Event.class, this, CryptSLPackage.DOMAINMODEL__EVENT);
    }
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getOrder()
  {
    return order;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOrder(Expression newOrder, NotificationChain msgs)
  {
    Expression oldOrder = order;
    order = newOrder;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CryptSLPackage.DOMAINMODEL__ORDER, oldOrder, newOrder);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOrder(Expression newOrder)
  {
    if (newOrder != order)
    {
      NotificationChain msgs = null;
      if (order != null)
        msgs = ((InternalEObject)order).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CryptSLPackage.DOMAINMODEL__ORDER, null, msgs);
      if (newOrder != null)
        msgs = ((InternalEObject)newOrder).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CryptSLPackage.DOMAINMODEL__ORDER, null, msgs);
      msgs = basicSetOrder(newOrder, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CryptSLPackage.DOMAINMODEL__ORDER, newOrder, newOrder));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Constraint> getReq()
  {
    if (req == null)
    {
      req = new EObjectContainmentEList<Constraint>(Constraint.class, this, CryptSLPackage.DOMAINMODEL__REQ);
    }
    return req;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Constraint> getEns()
  {
    if (ens == null)
    {
      ens = new EObjectContainmentEList<Constraint>(Constraint.class, this, CryptSLPackage.DOMAINMODEL__ENS);
    }
    return ens;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CryptSLPackage.DOMAINMODEL__OBJECT:
        return ((InternalEList<?>)getObject()).basicRemove(otherEnd, msgs);
      case CryptSLPackage.DOMAINMODEL__METHOD:
        return ((InternalEList<?>)getMethod()).basicRemove(otherEnd, msgs);
      case CryptSLPackage.DOMAINMODEL__EVENT:
        return ((InternalEList<?>)getEvent()).basicRemove(otherEnd, msgs);
      case CryptSLPackage.DOMAINMODEL__ORDER:
        return basicSetOrder(null, msgs);
      case CryptSLPackage.DOMAINMODEL__REQ:
        return ((InternalEList<?>)getReq()).basicRemove(otherEnd, msgs);
      case CryptSLPackage.DOMAINMODEL__ENS:
        return ((InternalEList<?>)getEns()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CryptSLPackage.DOMAINMODEL__JAVA_TYPE:
        if (resolve) return getJavaType();
        return basicGetJavaType();
      case CryptSLPackage.DOMAINMODEL__OBJECT:
        return getObject();
      case CryptSLPackage.DOMAINMODEL__METHOD:
        return getMethod();
      case CryptSLPackage.DOMAINMODEL__EVENT:
        return getEvent();
      case CryptSLPackage.DOMAINMODEL__ORDER:
        return getOrder();
      case CryptSLPackage.DOMAINMODEL__REQ:
        return getReq();
      case CryptSLPackage.DOMAINMODEL__ENS:
        return getEns();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CryptSLPackage.DOMAINMODEL__JAVA_TYPE:
        setJavaType((JvmType)newValue);
        return;
      case CryptSLPackage.DOMAINMODEL__OBJECT:
        getObject().clear();
        getObject().addAll((Collection<? extends ObjectDecl>)newValue);
        return;
      case CryptSLPackage.DOMAINMODEL__METHOD:
        getMethod().clear();
        getMethod().addAll((Collection<? extends ForbMethod>)newValue);
        return;
      case CryptSLPackage.DOMAINMODEL__EVENT:
        getEvent().clear();
        getEvent().addAll((Collection<? extends Event>)newValue);
        return;
      case CryptSLPackage.DOMAINMODEL__ORDER:
        setOrder((Expression)newValue);
        return;
      case CryptSLPackage.DOMAINMODEL__REQ:
        getReq().clear();
        getReq().addAll((Collection<? extends Constraint>)newValue);
        return;
      case CryptSLPackage.DOMAINMODEL__ENS:
        getEns().clear();
        getEns().addAll((Collection<? extends Constraint>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CryptSLPackage.DOMAINMODEL__JAVA_TYPE:
        setJavaType((JvmType)null);
        return;
      case CryptSLPackage.DOMAINMODEL__OBJECT:
        getObject().clear();
        return;
      case CryptSLPackage.DOMAINMODEL__METHOD:
        getMethod().clear();
        return;
      case CryptSLPackage.DOMAINMODEL__EVENT:
        getEvent().clear();
        return;
      case CryptSLPackage.DOMAINMODEL__ORDER:
        setOrder((Expression)null);
        return;
      case CryptSLPackage.DOMAINMODEL__REQ:
        getReq().clear();
        return;
      case CryptSLPackage.DOMAINMODEL__ENS:
        getEns().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CryptSLPackage.DOMAINMODEL__JAVA_TYPE:
        return javaType != null;
      case CryptSLPackage.DOMAINMODEL__OBJECT:
        return object != null && !object.isEmpty();
      case CryptSLPackage.DOMAINMODEL__METHOD:
        return method != null && !method.isEmpty();
      case CryptSLPackage.DOMAINMODEL__EVENT:
        return event != null && !event.isEmpty();
      case CryptSLPackage.DOMAINMODEL__ORDER:
        return order != null;
      case CryptSLPackage.DOMAINMODEL__REQ:
        return req != null && !req.isEmpty();
      case CryptSLPackage.DOMAINMODEL__ENS:
        return ens != null && !ens.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //DomainmodelImpl
