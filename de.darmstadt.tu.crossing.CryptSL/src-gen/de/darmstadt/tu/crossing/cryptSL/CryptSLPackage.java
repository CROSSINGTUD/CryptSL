/**
 * generated by Xtext 2.11.0
 */
package de.darmstadt.tu.crossing.cryptSL;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

/**
 * <!-- begin-user-doc -->
 * The <b>Package</b> for the model.
 * It contains accessors for the meta objects to represent
 * <ul>
 *   <li>each class,</li>
 *   <li>each feature of each class,</li>
 *   <li>each enum,</li>
 *   <li>and each data type</li>
 * </ul>
 * <!-- end-user-doc -->
 * @see de.darmstadt.tu.crossing.cryptSL.CryptSLFactory
 * @model kind="package"
 * @generated
 */
public interface CryptSLPackage extends EPackage
{
  /**
   * The package name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNAME = "cryptSL";

  /**
   * The package namespace URI.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_URI = "http://www.darmstadt.de/tu/crossing/CryptSL";

  /**
   * The package namespace name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  String eNS_PREFIX = "cryptSL";

  /**
   * The singleton instance of the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  CryptSLPackage eINSTANCE = de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl.init();

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.DomainmodelImpl <em>Domainmodel</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.DomainmodelImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getDomainmodel()
   * @generated
   */
  int DOMAINMODEL = 0;

  /**
   * The feature id for the '<em><b>Java Type</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DOMAINMODEL__JAVA_TYPE = 0;

  /**
   * The feature id for the '<em><b>Object</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DOMAINMODEL__OBJECT = 1;

  /**
   * The feature id for the '<em><b>Method</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DOMAINMODEL__METHOD = 2;

  /**
   * The feature id for the '<em><b>Event</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DOMAINMODEL__EVENT = 3;

  /**
   * The feature id for the '<em><b>Order</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DOMAINMODEL__ORDER = 4;

  /**
   * The feature id for the '<em><b>Req</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DOMAINMODEL__REQ = 5;

  /**
   * The feature id for the '<em><b>Ens</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DOMAINMODEL__ENS = 6;

  /**
   * The number of structural features of the '<em>Domainmodel</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int DOMAINMODEL_FEATURE_COUNT = 7;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ObjectDeclImpl <em>Object Decl</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.ObjectDeclImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getObjectDecl()
   * @generated
   */
  int OBJECT_DECL = 1;

  /**
   * The feature id for the '<em><b>Object Type</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OBJECT_DECL__OBJECT_TYPE = 0;

  /**
   * The feature id for the '<em><b>Object Name</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OBJECT_DECL__OBJECT_NAME = 1;

  /**
   * The number of structural features of the '<em>Object Decl</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OBJECT_DECL_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ForbMethodImpl <em>Forb Method</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.ForbMethodImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getForbMethod()
   * @generated
   */
  int FORB_METHOD = 2;

  /**
   * The feature id for the '<em><b>Java Meth</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FORB_METHOD__JAVA_METH = 0;

  /**
   * The feature id for the '<em><b>Rep</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FORB_METHOD__REP = 1;

  /**
   * The number of structural features of the '<em>Forb Method</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int FORB_METHOD_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.EventImpl <em>Event</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.EventImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getEvent()
   * @generated
   */
  int EVENT = 3;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EVENT__NAME = 0;

  /**
   * The number of structural features of the '<em>Event</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EVENT_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.LabelMethodCallImpl <em>Label Method Call</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.LabelMethodCallImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getLabelMethodCall()
   * @generated
   */
  int LABEL_METHOD_CALL = 4;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LABEL_METHOD_CALL__NAME = EVENT__NAME;

  /**
   * The feature id for the '<em><b>Meth</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LABEL_METHOD_CALL__METH = EVENT_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Label Method Call</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LABEL_METHOD_CALL_FEATURE_COUNT = EVENT_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.MethodImpl <em>Method</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.MethodImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getMethod()
   * @generated
   */
  int METHOD = 5;

  /**
   * The feature id for the '<em><b>Left Side</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int METHOD__LEFT_SIDE = 0;

  /**
   * The feature id for the '<em><b>Meth Name</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int METHOD__METH_NAME = 1;

  /**
   * The feature id for the '<em><b>Par List</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int METHOD__PAR_LIST = 2;

  /**
   * The number of structural features of the '<em>Method</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int METHOD_FEATURE_COUNT = 3;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ParListImpl <em>Par List</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.ParListImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getParList()
   * @generated
   */
  int PAR_LIST = 6;

  /**
   * The feature id for the '<em><b>Parameters</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PAR_LIST__PARAMETERS = 0;

  /**
   * The number of structural features of the '<em>Par List</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PAR_LIST_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ParImpl <em>Par</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.ParImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getPar()
   * @generated
   */
  int PAR = 7;

  /**
   * The feature id for the '<em><b>Val</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PAR__VAL = 0;

  /**
   * The number of structural features of the '<em>Par</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int PAR_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.SuperTypeImpl <em>Super Type</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.SuperTypeImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getSuperType()
   * @generated
   */
  int SUPER_TYPE = 8;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SUPER_TYPE__NAME = EVENT__NAME;

  /**
   * The number of structural features of the '<em>Super Type</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SUPER_TYPE_FEATURE_COUNT = EVENT_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ExpressionImpl <em>Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.ExpressionImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getExpression()
   * @generated
   */
  int EXPRESSION = 9;

  /**
   * The feature id for the '<em><b>Order Ev</b></em>' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__ORDER_EV = 0;

  /**
   * The feature id for the '<em><b>Elementop</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__ELEMENTOP = 1;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__LEFT = 2;

  /**
   * The feature id for the '<em><b>Orderop</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__ORDEROP = 3;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION__RIGHT = 4;

  /**
   * The number of structural features of the '<em>Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int EXPRESSION_FEATURE_COUNT = 5;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ConstraintImpl <em>Constraint</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.ConstraintImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getConstraint()
   * @generated
   */
  int CONSTRAINT = 10;

  /**
   * The feature id for the '<em><b>Left Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTRAINT__LEFT_EXPRESSION = 0;

  /**
   * The feature id for the '<em><b>Operator</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTRAINT__OPERATOR = 1;

  /**
   * The feature id for the '<em><b>Right Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTRAINT__RIGHT_EXPRESSION = 2;

  /**
   * The feature id for the '<em><b>Pred Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTRAINT__PRED_NAME = 3;

  /**
   * The feature id for the '<em><b>Par List</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTRAINT__PAR_LIST = 4;

  /**
   * The number of structural features of the '<em>Constraint</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int CONSTRAINT_FEATURE_COUNT = 5;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.LogicalImplyImpl <em>Logical Imply</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.LogicalImplyImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getLogicalImply()
   * @generated
   */
  int LOGICAL_IMPLY = 11;

  /**
   * The feature id for the '<em><b>IMPLIES</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LOGICAL_IMPLY__IMPLIES = 0;

  /**
   * The number of structural features of the '<em>Logical Imply</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LOGICAL_IMPLY_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.LogicalOperatorImpl <em>Logical Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.LogicalOperatorImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getLogicalOperator()
   * @generated
   */
  int LOGICAL_OPERATOR = 12;

  /**
   * The feature id for the '<em><b>OR</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LOGICAL_OPERATOR__OR = 0;

  /**
   * The feature id for the '<em><b>AND</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LOGICAL_OPERATOR__AND = 1;

  /**
   * The number of structural features of the '<em>Logical Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LOGICAL_OPERATOR_FEATURE_COUNT = 2;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ComparingOperatorImpl <em>Comparing Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.ComparingOperatorImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getComparingOperator()
   * @generated
   */
  int COMPARING_OPERATOR = 13;

  /**
   * The feature id for the '<em><b>LESS</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPARING_OPERATOR__LESS = 0;

  /**
   * The feature id for the '<em><b>LESS OR EQUAL</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPARING_OPERATOR__LESS_OR_EQUAL = 1;

  /**
   * The feature id for the '<em><b>GREATER OR EQUAL</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPARING_OPERATOR__GREATER_OR_EQUAL = 2;

  /**
   * The feature id for the '<em><b>GREATER</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPARING_OPERATOR__GREATER = 3;

  /**
   * The feature id for the '<em><b>EQUAL</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPARING_OPERATOR__EQUAL = 4;

  /**
   * The feature id for the '<em><b>UNEQUAL</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPARING_OPERATOR__UNEQUAL = 5;

  /**
   * The number of structural features of the '<em>Comparing Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPARING_OPERATOR_FEATURE_COUNT = 6;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ArithmeticOperatorImpl <em>Arithmetic Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.ArithmeticOperatorImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getArithmeticOperator()
   * @generated
   */
  int ARITHMETIC_OPERATOR = 14;

  /**
   * The feature id for the '<em><b>PLUS</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ARITHMETIC_OPERATOR__PLUS = 0;

  /**
   * The feature id for the '<em><b>MINUS</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ARITHMETIC_OPERATOR__MINUS = 1;

  /**
   * The feature id for the '<em><b>TIMES</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ARITHMETIC_OPERATOR__TIMES = 2;

  /**
   * The feature id for the '<em><b>DIVIDE</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ARITHMETIC_OPERATOR__DIVIDE = 3;

  /**
   * The number of structural features of the '<em>Arithmetic Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ARITHMETIC_OPERATOR_FEATURE_COUNT = 4;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.LiteralExpressionImpl <em>Literal Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.LiteralExpressionImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getLiteralExpression()
   * @generated
   */
  int LITERAL_EXPRESSION = 15;

  /**
   * The feature id for the '<em><b>Left Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LITERAL_EXPRESSION__LEFT_EXPRESSION = CONSTRAINT__LEFT_EXPRESSION;

  /**
   * The feature id for the '<em><b>Operator</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LITERAL_EXPRESSION__OPERATOR = CONSTRAINT__OPERATOR;

  /**
   * The feature id for the '<em><b>Right Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LITERAL_EXPRESSION__RIGHT_EXPRESSION = CONSTRAINT__RIGHT_EXPRESSION;

  /**
   * The feature id for the '<em><b>Pred Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LITERAL_EXPRESSION__PRED_NAME = CONSTRAINT__PRED_NAME;

  /**
   * The feature id for the '<em><b>Par List</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LITERAL_EXPRESSION__PAR_LIST = CONSTRAINT__PAR_LIST;

  /**
   * The feature id for the '<em><b>Name</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LITERAL_EXPRESSION__NAME = CONSTRAINT_FEATURE_COUNT + 0;

  /**
   * The feature id for the '<em><b>Obj</b></em>' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LITERAL_EXPRESSION__OBJ = CONSTRAINT_FEATURE_COUNT + 1;

  /**
   * The feature id for the '<em><b>Type</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LITERAL_EXPRESSION__TYPE = CONSTRAINT_FEATURE_COUNT + 2;

  /**
   * The feature id for the '<em><b>Value</b></em>' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LITERAL_EXPRESSION__VALUE = CONSTRAINT_FEATURE_COUNT + 3;

  /**
   * The feature id for the '<em><b>Cons</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LITERAL_EXPRESSION__CONS = CONSTRAINT_FEATURE_COUNT + 4;

  /**
   * The feature id for the '<em><b>Litsleft</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LITERAL_EXPRESSION__LITSLEFT = CONSTRAINT_FEATURE_COUNT + 5;

  /**
   * The number of structural features of the '<em>Literal Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LITERAL_EXPRESSION_FEATURE_COUNT = CONSTRAINT_FEATURE_COUNT + 6;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.LiteralImpl <em>Literal</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.LiteralImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getLiteral()
   * @generated
   */
  int LITERAL = 16;

  /**
   * The number of structural features of the '<em>Literal</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LITERAL_FEATURE_COUNT = 0;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.UnaryOperatorImpl <em>Unary Operator</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.UnaryOperatorImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getUnaryOperator()
   * @generated
   */
  int UNARY_OPERATOR = 17;

  /**
   * The feature id for the '<em><b>NOT</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNARY_OPERATOR__NOT = 0;

  /**
   * The number of structural features of the '<em>Unary Operator</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNARY_OPERATOR_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.LitListImpl <em>Lit List</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.LitListImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getLitList()
   * @generated
   */
  int LIT_LIST = 18;

  /**
   * The feature id for the '<em><b>Parameters</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LIT_LIST__PARAMETERS = 0;

  /**
   * The number of structural features of the '<em>Lit List</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int LIT_LIST_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.SuParListImpl <em>Su Par List</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.SuParListImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getSuParList()
   * @generated
   */
  int SU_PAR_LIST = 19;

  /**
   * The feature id for the '<em><b>Parameters</b></em>' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SU_PAR_LIST__PARAMETERS = 0;

  /**
   * The number of structural features of the '<em>Su Par List</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SU_PAR_LIST_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.SuParImpl <em>Su Par</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.SuParImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getSuPar()
   * @generated
   */
  int SU_PAR = 20;

  /**
   * The feature id for the '<em><b>Val</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SU_PAR__VAL = 0;

  /**
   * The number of structural features of the '<em>Su Par</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SU_PAR_FEATURE_COUNT = 1;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.AggegateImpl <em>Aggegate</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.AggegateImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getAggegate()
   * @generated
   */
  int AGGEGATE = 21;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int AGGEGATE__NAME = SUPER_TYPE__NAME;

  /**
   * The feature id for the '<em><b>Lab</b></em>' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int AGGEGATE__LAB = SUPER_TYPE_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Aggegate</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int AGGEGATE_FEATURE_COUNT = SUPER_TYPE_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.OrderImpl <em>Order</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.OrderImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getOrder()
   * @generated
   */
  int ORDER = 22;

  /**
   * The feature id for the '<em><b>Order Ev</b></em>' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ORDER__ORDER_EV = EXPRESSION__ORDER_EV;

  /**
   * The feature id for the '<em><b>Elementop</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ORDER__ELEMENTOP = EXPRESSION__ELEMENTOP;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ORDER__LEFT = EXPRESSION__LEFT;

  /**
   * The feature id for the '<em><b>Orderop</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ORDER__ORDEROP = EXPRESSION__ORDEROP;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ORDER__RIGHT = EXPRESSION__RIGHT;

  /**
   * The number of structural features of the '<em>Order</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ORDER_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.SimpleOrderImpl <em>Simple Order</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.SimpleOrderImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getSimpleOrder()
   * @generated
   */
  int SIMPLE_ORDER = 23;

  /**
   * The feature id for the '<em><b>Order Ev</b></em>' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_ORDER__ORDER_EV = EXPRESSION__ORDER_EV;

  /**
   * The feature id for the '<em><b>Elementop</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_ORDER__ELEMENTOP = EXPRESSION__ELEMENTOP;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_ORDER__LEFT = EXPRESSION__LEFT;

  /**
   * The feature id for the '<em><b>Orderop</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_ORDER__ORDEROP = EXPRESSION__ORDEROP;

  /**
   * The feature id for the '<em><b>Right</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_ORDER__RIGHT = EXPRESSION__RIGHT;

  /**
   * The number of structural features of the '<em>Simple Order</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int SIMPLE_ORDER_FEATURE_COUNT = EXPRESSION_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ComparisonExpressionImpl <em>Comparison Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.ComparisonExpressionImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getComparisonExpression()
   * @generated
   */
  int COMPARISON_EXPRESSION = 24;

  /**
   * The feature id for the '<em><b>Left Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPARISON_EXPRESSION__LEFT_EXPRESSION = CONSTRAINT__LEFT_EXPRESSION;

  /**
   * The feature id for the '<em><b>Operator</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPARISON_EXPRESSION__OPERATOR = CONSTRAINT__OPERATOR;

  /**
   * The feature id for the '<em><b>Right Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPARISON_EXPRESSION__RIGHT_EXPRESSION = CONSTRAINT__RIGHT_EXPRESSION;

  /**
   * The feature id for the '<em><b>Pred Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPARISON_EXPRESSION__PRED_NAME = CONSTRAINT__PRED_NAME;

  /**
   * The feature id for the '<em><b>Par List</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPARISON_EXPRESSION__PAR_LIST = CONSTRAINT__PAR_LIST;

  /**
   * The feature id for the '<em><b>Left</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPARISON_EXPRESSION__LEFT = CONSTRAINT_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Comparison Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int COMPARISON_EXPRESSION_FEATURE_COUNT = CONSTRAINT_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ArithmeticExpressionImpl <em>Arithmetic Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.ArithmeticExpressionImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getArithmeticExpression()
   * @generated
   */
  int ARITHMETIC_EXPRESSION = 25;

  /**
   * The feature id for the '<em><b>Left Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ARITHMETIC_EXPRESSION__LEFT_EXPRESSION = CONSTRAINT__LEFT_EXPRESSION;

  /**
   * The feature id for the '<em><b>Operator</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ARITHMETIC_EXPRESSION__OPERATOR = CONSTRAINT__OPERATOR;

  /**
   * The feature id for the '<em><b>Right Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ARITHMETIC_EXPRESSION__RIGHT_EXPRESSION = CONSTRAINT__RIGHT_EXPRESSION;

  /**
   * The feature id for the '<em><b>Pred Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ARITHMETIC_EXPRESSION__PRED_NAME = CONSTRAINT__PRED_NAME;

  /**
   * The feature id for the '<em><b>Par List</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ARITHMETIC_EXPRESSION__PAR_LIST = CONSTRAINT__PAR_LIST;

  /**
   * The number of structural features of the '<em>Arithmetic Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int ARITHMETIC_EXPRESSION_FEATURE_COUNT = CONSTRAINT_FEATURE_COUNT + 0;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.UnaryPreExpressionImpl <em>Unary Pre Expression</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.UnaryPreExpressionImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getUnaryPreExpression()
   * @generated
   */
  int UNARY_PRE_EXPRESSION = 26;

  /**
   * The feature id for the '<em><b>Left Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNARY_PRE_EXPRESSION__LEFT_EXPRESSION = CONSTRAINT__LEFT_EXPRESSION;

  /**
   * The feature id for the '<em><b>Operator</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNARY_PRE_EXPRESSION__OPERATOR = CONSTRAINT__OPERATOR;

  /**
   * The feature id for the '<em><b>Right Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNARY_PRE_EXPRESSION__RIGHT_EXPRESSION = CONSTRAINT__RIGHT_EXPRESSION;

  /**
   * The feature id for the '<em><b>Pred Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNARY_PRE_EXPRESSION__PRED_NAME = CONSTRAINT__PRED_NAME;

  /**
   * The feature id for the '<em><b>Par List</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNARY_PRE_EXPRESSION__PAR_LIST = CONSTRAINT__PAR_LIST;

  /**
   * The feature id for the '<em><b>Enclosed Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNARY_PRE_EXPRESSION__ENCLOSED_EXPRESSION = CONSTRAINT_FEATURE_COUNT + 0;

  /**
   * The number of structural features of the '<em>Unary Pre Expression</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int UNARY_PRE_EXPRESSION_FEATURE_COUNT = CONSTRAINT_FEATURE_COUNT + 1;

  /**
   * The meta object id for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ObjectImpl <em>Object</em>}' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see de.darmstadt.tu.crossing.cryptSL.impl.ObjectImpl
   * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getObject()
   * @generated
   */
  int OBJECT = 27;

  /**
   * The feature id for the '<em><b>Name</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OBJECT__NAME = SUPER_TYPE__NAME;

  /**
   * The number of structural features of the '<em>Object</em>' class.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   * @ordered
   */
  int OBJECT_FEATURE_COUNT = SUPER_TYPE_FEATURE_COUNT + 0;


  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.Domainmodel <em>Domainmodel</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Domainmodel</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Domainmodel
   * @generated
   */
  EClass getDomainmodel();

  /**
   * Returns the meta object for the reference '{@link de.darmstadt.tu.crossing.cryptSL.Domainmodel#getJavaType <em>Java Type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Java Type</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Domainmodel#getJavaType()
   * @see #getDomainmodel()
   * @generated
   */
  EReference getDomainmodel_JavaType();

  /**
   * Returns the meta object for the containment reference list '{@link de.darmstadt.tu.crossing.cryptSL.Domainmodel#getObject <em>Object</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Object</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Domainmodel#getObject()
   * @see #getDomainmodel()
   * @generated
   */
  EReference getDomainmodel_Object();

  /**
   * Returns the meta object for the containment reference list '{@link de.darmstadt.tu.crossing.cryptSL.Domainmodel#getMethod <em>Method</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Method</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Domainmodel#getMethod()
   * @see #getDomainmodel()
   * @generated
   */
  EReference getDomainmodel_Method();

  /**
   * Returns the meta object for the containment reference list '{@link de.darmstadt.tu.crossing.cryptSL.Domainmodel#getEvent <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Event</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Domainmodel#getEvent()
   * @see #getDomainmodel()
   * @generated
   */
  EReference getDomainmodel_Event();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.Domainmodel#getOrder <em>Order</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Order</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Domainmodel#getOrder()
   * @see #getDomainmodel()
   * @generated
   */
  EReference getDomainmodel_Order();

  /**
   * Returns the meta object for the containment reference list '{@link de.darmstadt.tu.crossing.cryptSL.Domainmodel#getReq <em>Req</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Req</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Domainmodel#getReq()
   * @see #getDomainmodel()
   * @generated
   */
  EReference getDomainmodel_Req();

  /**
   * Returns the meta object for the containment reference list '{@link de.darmstadt.tu.crossing.cryptSL.Domainmodel#getEns <em>Ens</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Ens</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Domainmodel#getEns()
   * @see #getDomainmodel()
   * @generated
   */
  EReference getDomainmodel_Ens();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.ObjectDecl <em>Object Decl</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Object Decl</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ObjectDecl
   * @generated
   */
  EClass getObjectDecl();

  /**
   * Returns the meta object for the reference '{@link de.darmstadt.tu.crossing.cryptSL.ObjectDecl#getObjectType <em>Object Type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Object Type</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ObjectDecl#getObjectType()
   * @see #getObjectDecl()
   * @generated
   */
  EReference getObjectDecl_ObjectType();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.ObjectDecl#getObjectName <em>Object Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Object Name</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ObjectDecl#getObjectName()
   * @see #getObjectDecl()
   * @generated
   */
  EReference getObjectDecl_ObjectName();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.ForbMethod <em>Forb Method</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Forb Method</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ForbMethod
   * @generated
   */
  EClass getForbMethod();

  /**
   * Returns the meta object for the reference '{@link de.darmstadt.tu.crossing.cryptSL.ForbMethod#getJavaMeth <em>Java Meth</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Java Meth</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ForbMethod#getJavaMeth()
   * @see #getForbMethod()
   * @generated
   */
  EReference getForbMethod_JavaMeth();

  /**
   * Returns the meta object for the reference '{@link de.darmstadt.tu.crossing.cryptSL.ForbMethod#getRep <em>Rep</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Rep</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ForbMethod#getRep()
   * @see #getForbMethod()
   * @generated
   */
  EReference getForbMethod_Rep();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.Event <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Event</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Event
   * @generated
   */
  EClass getEvent();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.Event#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Name</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Event#getName()
   * @see #getEvent()
   * @generated
   */
  EAttribute getEvent_Name();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.LabelMethodCall <em>Label Method Call</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Label Method Call</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LabelMethodCall
   * @generated
   */
  EClass getLabelMethodCall();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.LabelMethodCall#getMeth <em>Meth</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Meth</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LabelMethodCall#getMeth()
   * @see #getLabelMethodCall()
   * @generated
   */
  EReference getLabelMethodCall_Meth();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.Method <em>Method</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Method</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Method
   * @generated
   */
  EClass getMethod();

  /**
   * Returns the meta object for the reference '{@link de.darmstadt.tu.crossing.cryptSL.Method#getLeftSide <em>Left Side</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Left Side</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Method#getLeftSide()
   * @see #getMethod()
   * @generated
   */
  EReference getMethod_LeftSide();

  /**
   * Returns the meta object for the reference '{@link de.darmstadt.tu.crossing.cryptSL.Method#getMethName <em>Meth Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Meth Name</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Method#getMethName()
   * @see #getMethod()
   * @generated
   */
  EReference getMethod_MethName();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.Method#getParList <em>Par List</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Par List</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Method#getParList()
   * @see #getMethod()
   * @generated
   */
  EReference getMethod_ParList();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.ParList <em>Par List</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Par List</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ParList
   * @generated
   */
  EClass getParList();

  /**
   * Returns the meta object for the containment reference list '{@link de.darmstadt.tu.crossing.cryptSL.ParList#getParameters <em>Parameters</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Parameters</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ParList#getParameters()
   * @see #getParList()
   * @generated
   */
  EReference getParList_Parameters();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.Par <em>Par</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Par</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Par
   * @generated
   */
  EClass getPar();

  /**
   * Returns the meta object for the reference '{@link de.darmstadt.tu.crossing.cryptSL.Par#getVal <em>Val</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Val</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Par#getVal()
   * @see #getPar()
   * @generated
   */
  EReference getPar_Val();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.SuperType <em>Super Type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Super Type</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.SuperType
   * @generated
   */
  EClass getSuperType();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Expression</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Expression
   * @generated
   */
  EClass getExpression();

  /**
   * Returns the meta object for the reference list '{@link de.darmstadt.tu.crossing.cryptSL.Expression#getOrderEv <em>Order Ev</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference list '<em>Order Ev</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Expression#getOrderEv()
   * @see #getExpression()
   * @generated
   */
  EReference getExpression_OrderEv();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.Expression#getElementop <em>Elementop</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Elementop</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Expression#getElementop()
   * @see #getExpression()
   * @generated
   */
  EAttribute getExpression_Elementop();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.Expression#getLeft <em>Left</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Left</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Expression#getLeft()
   * @see #getExpression()
   * @generated
   */
  EReference getExpression_Left();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.Expression#getOrderop <em>Orderop</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Orderop</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Expression#getOrderop()
   * @see #getExpression()
   * @generated
   */
  EAttribute getExpression_Orderop();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.Expression#getRight <em>Right</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Right</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Expression#getRight()
   * @see #getExpression()
   * @generated
   */
  EReference getExpression_Right();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.Constraint <em>Constraint</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Constraint</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Constraint
   * @generated
   */
  EClass getConstraint();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.Constraint#getLeftExpression <em>Left Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Left Expression</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Constraint#getLeftExpression()
   * @see #getConstraint()
   * @generated
   */
  EReference getConstraint_LeftExpression();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.Constraint#getOperator <em>Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Operator</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Constraint#getOperator()
   * @see #getConstraint()
   * @generated
   */
  EReference getConstraint_Operator();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.Constraint#getRightExpression <em>Right Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Right Expression</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Constraint#getRightExpression()
   * @see #getConstraint()
   * @generated
   */
  EReference getConstraint_RightExpression();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.Constraint#getPredName <em>Pred Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>Pred Name</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Constraint#getPredName()
   * @see #getConstraint()
   * @generated
   */
  EAttribute getConstraint_PredName();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.Constraint#getParList <em>Par List</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Par List</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Constraint#getParList()
   * @see #getConstraint()
   * @generated
   */
  EReference getConstraint_ParList();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.LogicalImply <em>Logical Imply</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Logical Imply</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LogicalImply
   * @generated
   */
  EClass getLogicalImply();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.LogicalImply#getIMPLIES <em>IMPLIES</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>IMPLIES</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LogicalImply#getIMPLIES()
   * @see #getLogicalImply()
   * @generated
   */
  EAttribute getLogicalImply_IMPLIES();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.LogicalOperator <em>Logical Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Logical Operator</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LogicalOperator
   * @generated
   */
  EClass getLogicalOperator();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.LogicalOperator#getOR <em>OR</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>OR</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LogicalOperator#getOR()
   * @see #getLogicalOperator()
   * @generated
   */
  EAttribute getLogicalOperator_OR();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.LogicalOperator#getAND <em>AND</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>AND</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LogicalOperator#getAND()
   * @see #getLogicalOperator()
   * @generated
   */
  EAttribute getLogicalOperator_AND();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.ComparingOperator <em>Comparing Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Comparing Operator</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ComparingOperator
   * @generated
   */
  EClass getComparingOperator();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.ComparingOperator#getLESS <em>LESS</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>LESS</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ComparingOperator#getLESS()
   * @see #getComparingOperator()
   * @generated
   */
  EAttribute getComparingOperator_LESS();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.ComparingOperator#getLESS_OR_EQUAL <em>LESS OR EQUAL</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>LESS OR EQUAL</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ComparingOperator#getLESS_OR_EQUAL()
   * @see #getComparingOperator()
   * @generated
   */
  EAttribute getComparingOperator_LESS_OR_EQUAL();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.ComparingOperator#getGREATER_OR_EQUAL <em>GREATER OR EQUAL</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>GREATER OR EQUAL</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ComparingOperator#getGREATER_OR_EQUAL()
   * @see #getComparingOperator()
   * @generated
   */
  EAttribute getComparingOperator_GREATER_OR_EQUAL();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.ComparingOperator#getGREATER <em>GREATER</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>GREATER</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ComparingOperator#getGREATER()
   * @see #getComparingOperator()
   * @generated
   */
  EAttribute getComparingOperator_GREATER();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.ComparingOperator#getEQUAL <em>EQUAL</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>EQUAL</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ComparingOperator#getEQUAL()
   * @see #getComparingOperator()
   * @generated
   */
  EAttribute getComparingOperator_EQUAL();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.ComparingOperator#getUNEQUAL <em>UNEQUAL</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>UNEQUAL</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ComparingOperator#getUNEQUAL()
   * @see #getComparingOperator()
   * @generated
   */
  EAttribute getComparingOperator_UNEQUAL();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.ArithmeticOperator <em>Arithmetic Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Arithmetic Operator</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ArithmeticOperator
   * @generated
   */
  EClass getArithmeticOperator();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.ArithmeticOperator#getPLUS <em>PLUS</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>PLUS</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ArithmeticOperator#getPLUS()
   * @see #getArithmeticOperator()
   * @generated
   */
  EAttribute getArithmeticOperator_PLUS();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.ArithmeticOperator#getMINUS <em>MINUS</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>MINUS</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ArithmeticOperator#getMINUS()
   * @see #getArithmeticOperator()
   * @generated
   */
  EAttribute getArithmeticOperator_MINUS();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.ArithmeticOperator#getTIMES <em>TIMES</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>TIMES</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ArithmeticOperator#getTIMES()
   * @see #getArithmeticOperator()
   * @generated
   */
  EAttribute getArithmeticOperator_TIMES();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.ArithmeticOperator#getDIVIDE <em>DIVIDE</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>DIVIDE</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ArithmeticOperator#getDIVIDE()
   * @see #getArithmeticOperator()
   * @generated
   */
  EAttribute getArithmeticOperator_DIVIDE();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.LiteralExpression <em>Literal Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Literal Expression</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LiteralExpression
   * @generated
   */
  EClass getLiteralExpression();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.LiteralExpression#getName <em>Name</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Name</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LiteralExpression#getName()
   * @see #getLiteralExpression()
   * @generated
   */
  EReference getLiteralExpression_Name();

  /**
   * Returns the meta object for the reference list '{@link de.darmstadt.tu.crossing.cryptSL.LiteralExpression#getObj <em>Obj</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference list '<em>Obj</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LiteralExpression#getObj()
   * @see #getLiteralExpression()
   * @generated
   */
  EReference getLiteralExpression_Obj();

  /**
   * Returns the meta object for the reference '{@link de.darmstadt.tu.crossing.cryptSL.LiteralExpression#getType <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Type</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LiteralExpression#getType()
   * @see #getLiteralExpression()
   * @generated
   */
  EReference getLiteralExpression_Type();

  /**
   * Returns the meta object for the reference '{@link de.darmstadt.tu.crossing.cryptSL.LiteralExpression#getValue <em>Value</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference '<em>Value</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LiteralExpression#getValue()
   * @see #getLiteralExpression()
   * @generated
   */
  EReference getLiteralExpression_Value();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.LiteralExpression#getCons <em>Cons</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Cons</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LiteralExpression#getCons()
   * @see #getLiteralExpression()
   * @generated
   */
  EReference getLiteralExpression_Cons();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.LiteralExpression#getLitsleft <em>Litsleft</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Litsleft</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LiteralExpression#getLitsleft()
   * @see #getLiteralExpression()
   * @generated
   */
  EReference getLiteralExpression_Litsleft();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.Literal <em>Literal</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Literal</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Literal
   * @generated
   */
  EClass getLiteral();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.UnaryOperator <em>Unary Operator</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Unary Operator</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.UnaryOperator
   * @generated
   */
  EClass getUnaryOperator();

  /**
   * Returns the meta object for the attribute '{@link de.darmstadt.tu.crossing.cryptSL.UnaryOperator#getNOT <em>NOT</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the attribute '<em>NOT</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.UnaryOperator#getNOT()
   * @see #getUnaryOperator()
   * @generated
   */
  EAttribute getUnaryOperator_NOT();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.LitList <em>Lit List</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Lit List</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LitList
   * @generated
   */
  EClass getLitList();

  /**
   * Returns the meta object for the containment reference list '{@link de.darmstadt.tu.crossing.cryptSL.LitList#getParameters <em>Parameters</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Parameters</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.LitList#getParameters()
   * @see #getLitList()
   * @generated
   */
  EReference getLitList_Parameters();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.SuParList <em>Su Par List</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Su Par List</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.SuParList
   * @generated
   */
  EClass getSuParList();

  /**
   * Returns the meta object for the containment reference list '{@link de.darmstadt.tu.crossing.cryptSL.SuParList#getParameters <em>Parameters</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference list '<em>Parameters</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.SuParList#getParameters()
   * @see #getSuParList()
   * @generated
   */
  EReference getSuParList_Parameters();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.SuPar <em>Su Par</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Su Par</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.SuPar
   * @generated
   */
  EClass getSuPar();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.SuPar#getVal <em>Val</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Val</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.SuPar#getVal()
   * @see #getSuPar()
   * @generated
   */
  EReference getSuPar_Val();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.Aggegate <em>Aggegate</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Aggegate</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Aggegate
   * @generated
   */
  EClass getAggegate();

  /**
   * Returns the meta object for the reference list '{@link de.darmstadt.tu.crossing.cryptSL.Aggegate#getLab <em>Lab</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the reference list '<em>Lab</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Aggegate#getLab()
   * @see #getAggegate()
   * @generated
   */
  EReference getAggegate_Lab();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.Order <em>Order</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Order</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Order
   * @generated
   */
  EClass getOrder();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.SimpleOrder <em>Simple Order</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Simple Order</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.SimpleOrder
   * @generated
   */
  EClass getSimpleOrder();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.ComparisonExpression <em>Comparison Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Comparison Expression</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ComparisonExpression
   * @generated
   */
  EClass getComparisonExpression();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.ComparisonExpression#getLeft <em>Left</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Left</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ComparisonExpression#getLeft()
   * @see #getComparisonExpression()
   * @generated
   */
  EReference getComparisonExpression_Left();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.ArithmeticExpression <em>Arithmetic Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Arithmetic Expression</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.ArithmeticExpression
   * @generated
   */
  EClass getArithmeticExpression();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.UnaryPreExpression <em>Unary Pre Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Unary Pre Expression</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.UnaryPreExpression
   * @generated
   */
  EClass getUnaryPreExpression();

  /**
   * Returns the meta object for the containment reference '{@link de.darmstadt.tu.crossing.cryptSL.UnaryPreExpression#getEnclosedExpression <em>Enclosed Expression</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for the containment reference '<em>Enclosed Expression</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.UnaryPreExpression#getEnclosedExpression()
   * @see #getUnaryPreExpression()
   * @generated
   */
  EReference getUnaryPreExpression_EnclosedExpression();

  /**
   * Returns the meta object for class '{@link de.darmstadt.tu.crossing.cryptSL.Object <em>Object</em>}'.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the meta object for class '<em>Object</em>'.
   * @see de.darmstadt.tu.crossing.cryptSL.Object
   * @generated
   */
  EClass getObject();

  /**
   * Returns the factory that creates the instances of the model.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the factory that creates the instances of the model.
   * @generated
   */
  CryptSLFactory getCryptSLFactory();

  /**
   * <!-- begin-user-doc -->
   * Defines literals for the meta objects that represent
   * <ul>
   *   <li>each class,</li>
   *   <li>each feature of each class,</li>
   *   <li>each enum,</li>
   *   <li>and each data type</li>
   * </ul>
   * <!-- end-user-doc -->
   * @generated
   */
  interface Literals
  {
    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.DomainmodelImpl <em>Domainmodel</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.DomainmodelImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getDomainmodel()
     * @generated
     */
    EClass DOMAINMODEL = eINSTANCE.getDomainmodel();

    /**
     * The meta object literal for the '<em><b>Java Type</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference DOMAINMODEL__JAVA_TYPE = eINSTANCE.getDomainmodel_JavaType();

    /**
     * The meta object literal for the '<em><b>Object</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference DOMAINMODEL__OBJECT = eINSTANCE.getDomainmodel_Object();

    /**
     * The meta object literal for the '<em><b>Method</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference DOMAINMODEL__METHOD = eINSTANCE.getDomainmodel_Method();

    /**
     * The meta object literal for the '<em><b>Event</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference DOMAINMODEL__EVENT = eINSTANCE.getDomainmodel_Event();

    /**
     * The meta object literal for the '<em><b>Order</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference DOMAINMODEL__ORDER = eINSTANCE.getDomainmodel_Order();

    /**
     * The meta object literal for the '<em><b>Req</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference DOMAINMODEL__REQ = eINSTANCE.getDomainmodel_Req();

    /**
     * The meta object literal for the '<em><b>Ens</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference DOMAINMODEL__ENS = eINSTANCE.getDomainmodel_Ens();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ObjectDeclImpl <em>Object Decl</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.ObjectDeclImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getObjectDecl()
     * @generated
     */
    EClass OBJECT_DECL = eINSTANCE.getObjectDecl();

    /**
     * The meta object literal for the '<em><b>Object Type</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference OBJECT_DECL__OBJECT_TYPE = eINSTANCE.getObjectDecl_ObjectType();

    /**
     * The meta object literal for the '<em><b>Object Name</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference OBJECT_DECL__OBJECT_NAME = eINSTANCE.getObjectDecl_ObjectName();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ForbMethodImpl <em>Forb Method</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.ForbMethodImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getForbMethod()
     * @generated
     */
    EClass FORB_METHOD = eINSTANCE.getForbMethod();

    /**
     * The meta object literal for the '<em><b>Java Meth</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FORB_METHOD__JAVA_METH = eINSTANCE.getForbMethod_JavaMeth();

    /**
     * The meta object literal for the '<em><b>Rep</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference FORB_METHOD__REP = eINSTANCE.getForbMethod_Rep();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.EventImpl <em>Event</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.EventImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getEvent()
     * @generated
     */
    EClass EVENT = eINSTANCE.getEvent();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute EVENT__NAME = eINSTANCE.getEvent_Name();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.LabelMethodCallImpl <em>Label Method Call</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.LabelMethodCallImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getLabelMethodCall()
     * @generated
     */
    EClass LABEL_METHOD_CALL = eINSTANCE.getLabelMethodCall();

    /**
     * The meta object literal for the '<em><b>Meth</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference LABEL_METHOD_CALL__METH = eINSTANCE.getLabelMethodCall_Meth();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.MethodImpl <em>Method</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.MethodImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getMethod()
     * @generated
     */
    EClass METHOD = eINSTANCE.getMethod();

    /**
     * The meta object literal for the '<em><b>Left Side</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference METHOD__LEFT_SIDE = eINSTANCE.getMethod_LeftSide();

    /**
     * The meta object literal for the '<em><b>Meth Name</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference METHOD__METH_NAME = eINSTANCE.getMethod_MethName();

    /**
     * The meta object literal for the '<em><b>Par List</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference METHOD__PAR_LIST = eINSTANCE.getMethod_ParList();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ParListImpl <em>Par List</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.ParListImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getParList()
     * @generated
     */
    EClass PAR_LIST = eINSTANCE.getParList();

    /**
     * The meta object literal for the '<em><b>Parameters</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PAR_LIST__PARAMETERS = eINSTANCE.getParList_Parameters();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ParImpl <em>Par</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.ParImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getPar()
     * @generated
     */
    EClass PAR = eINSTANCE.getPar();

    /**
     * The meta object literal for the '<em><b>Val</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference PAR__VAL = eINSTANCE.getPar_Val();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.SuperTypeImpl <em>Super Type</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.SuperTypeImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getSuperType()
     * @generated
     */
    EClass SUPER_TYPE = eINSTANCE.getSuperType();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ExpressionImpl <em>Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.ExpressionImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getExpression()
     * @generated
     */
    EClass EXPRESSION = eINSTANCE.getExpression();

    /**
     * The meta object literal for the '<em><b>Order Ev</b></em>' reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPRESSION__ORDER_EV = eINSTANCE.getExpression_OrderEv();

    /**
     * The meta object literal for the '<em><b>Elementop</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute EXPRESSION__ELEMENTOP = eINSTANCE.getExpression_Elementop();

    /**
     * The meta object literal for the '<em><b>Left</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPRESSION__LEFT = eINSTANCE.getExpression_Left();

    /**
     * The meta object literal for the '<em><b>Orderop</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute EXPRESSION__ORDEROP = eINSTANCE.getExpression_Orderop();

    /**
     * The meta object literal for the '<em><b>Right</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference EXPRESSION__RIGHT = eINSTANCE.getExpression_Right();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ConstraintImpl <em>Constraint</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.ConstraintImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getConstraint()
     * @generated
     */
    EClass CONSTRAINT = eINSTANCE.getConstraint();

    /**
     * The meta object literal for the '<em><b>Left Expression</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CONSTRAINT__LEFT_EXPRESSION = eINSTANCE.getConstraint_LeftExpression();

    /**
     * The meta object literal for the '<em><b>Operator</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CONSTRAINT__OPERATOR = eINSTANCE.getConstraint_Operator();

    /**
     * The meta object literal for the '<em><b>Right Expression</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CONSTRAINT__RIGHT_EXPRESSION = eINSTANCE.getConstraint_RightExpression();

    /**
     * The meta object literal for the '<em><b>Pred Name</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute CONSTRAINT__PRED_NAME = eINSTANCE.getConstraint_PredName();

    /**
     * The meta object literal for the '<em><b>Par List</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference CONSTRAINT__PAR_LIST = eINSTANCE.getConstraint_ParList();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.LogicalImplyImpl <em>Logical Imply</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.LogicalImplyImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getLogicalImply()
     * @generated
     */
    EClass LOGICAL_IMPLY = eINSTANCE.getLogicalImply();

    /**
     * The meta object literal for the '<em><b>IMPLIES</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute LOGICAL_IMPLY__IMPLIES = eINSTANCE.getLogicalImply_IMPLIES();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.LogicalOperatorImpl <em>Logical Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.LogicalOperatorImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getLogicalOperator()
     * @generated
     */
    EClass LOGICAL_OPERATOR = eINSTANCE.getLogicalOperator();

    /**
     * The meta object literal for the '<em><b>OR</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute LOGICAL_OPERATOR__OR = eINSTANCE.getLogicalOperator_OR();

    /**
     * The meta object literal for the '<em><b>AND</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute LOGICAL_OPERATOR__AND = eINSTANCE.getLogicalOperator_AND();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ComparingOperatorImpl <em>Comparing Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.ComparingOperatorImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getComparingOperator()
     * @generated
     */
    EClass COMPARING_OPERATOR = eINSTANCE.getComparingOperator();

    /**
     * The meta object literal for the '<em><b>LESS</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute COMPARING_OPERATOR__LESS = eINSTANCE.getComparingOperator_LESS();

    /**
     * The meta object literal for the '<em><b>LESS OR EQUAL</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute COMPARING_OPERATOR__LESS_OR_EQUAL = eINSTANCE.getComparingOperator_LESS_OR_EQUAL();

    /**
     * The meta object literal for the '<em><b>GREATER OR EQUAL</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute COMPARING_OPERATOR__GREATER_OR_EQUAL = eINSTANCE.getComparingOperator_GREATER_OR_EQUAL();

    /**
     * The meta object literal for the '<em><b>GREATER</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute COMPARING_OPERATOR__GREATER = eINSTANCE.getComparingOperator_GREATER();

    /**
     * The meta object literal for the '<em><b>EQUAL</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute COMPARING_OPERATOR__EQUAL = eINSTANCE.getComparingOperator_EQUAL();

    /**
     * The meta object literal for the '<em><b>UNEQUAL</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute COMPARING_OPERATOR__UNEQUAL = eINSTANCE.getComparingOperator_UNEQUAL();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ArithmeticOperatorImpl <em>Arithmetic Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.ArithmeticOperatorImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getArithmeticOperator()
     * @generated
     */
    EClass ARITHMETIC_OPERATOR = eINSTANCE.getArithmeticOperator();

    /**
     * The meta object literal for the '<em><b>PLUS</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute ARITHMETIC_OPERATOR__PLUS = eINSTANCE.getArithmeticOperator_PLUS();

    /**
     * The meta object literal for the '<em><b>MINUS</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute ARITHMETIC_OPERATOR__MINUS = eINSTANCE.getArithmeticOperator_MINUS();

    /**
     * The meta object literal for the '<em><b>TIMES</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute ARITHMETIC_OPERATOR__TIMES = eINSTANCE.getArithmeticOperator_TIMES();

    /**
     * The meta object literal for the '<em><b>DIVIDE</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute ARITHMETIC_OPERATOR__DIVIDE = eINSTANCE.getArithmeticOperator_DIVIDE();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.LiteralExpressionImpl <em>Literal Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.LiteralExpressionImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getLiteralExpression()
     * @generated
     */
    EClass LITERAL_EXPRESSION = eINSTANCE.getLiteralExpression();

    /**
     * The meta object literal for the '<em><b>Name</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference LITERAL_EXPRESSION__NAME = eINSTANCE.getLiteralExpression_Name();

    /**
     * The meta object literal for the '<em><b>Obj</b></em>' reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference LITERAL_EXPRESSION__OBJ = eINSTANCE.getLiteralExpression_Obj();

    /**
     * The meta object literal for the '<em><b>Type</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference LITERAL_EXPRESSION__TYPE = eINSTANCE.getLiteralExpression_Type();

    /**
     * The meta object literal for the '<em><b>Value</b></em>' reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference LITERAL_EXPRESSION__VALUE = eINSTANCE.getLiteralExpression_Value();

    /**
     * The meta object literal for the '<em><b>Cons</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference LITERAL_EXPRESSION__CONS = eINSTANCE.getLiteralExpression_Cons();

    /**
     * The meta object literal for the '<em><b>Litsleft</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference LITERAL_EXPRESSION__LITSLEFT = eINSTANCE.getLiteralExpression_Litsleft();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.LiteralImpl <em>Literal</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.LiteralImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getLiteral()
     * @generated
     */
    EClass LITERAL = eINSTANCE.getLiteral();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.UnaryOperatorImpl <em>Unary Operator</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.UnaryOperatorImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getUnaryOperator()
     * @generated
     */
    EClass UNARY_OPERATOR = eINSTANCE.getUnaryOperator();

    /**
     * The meta object literal for the '<em><b>NOT</b></em>' attribute feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EAttribute UNARY_OPERATOR__NOT = eINSTANCE.getUnaryOperator_NOT();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.LitListImpl <em>Lit List</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.LitListImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getLitList()
     * @generated
     */
    EClass LIT_LIST = eINSTANCE.getLitList();

    /**
     * The meta object literal for the '<em><b>Parameters</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference LIT_LIST__PARAMETERS = eINSTANCE.getLitList_Parameters();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.SuParListImpl <em>Su Par List</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.SuParListImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getSuParList()
     * @generated
     */
    EClass SU_PAR_LIST = eINSTANCE.getSuParList();

    /**
     * The meta object literal for the '<em><b>Parameters</b></em>' containment reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SU_PAR_LIST__PARAMETERS = eINSTANCE.getSuParList_Parameters();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.SuParImpl <em>Su Par</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.SuParImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getSuPar()
     * @generated
     */
    EClass SU_PAR = eINSTANCE.getSuPar();

    /**
     * The meta object literal for the '<em><b>Val</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference SU_PAR__VAL = eINSTANCE.getSuPar_Val();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.AggegateImpl <em>Aggegate</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.AggegateImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getAggegate()
     * @generated
     */
    EClass AGGEGATE = eINSTANCE.getAggegate();

    /**
     * The meta object literal for the '<em><b>Lab</b></em>' reference list feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference AGGEGATE__LAB = eINSTANCE.getAggegate_Lab();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.OrderImpl <em>Order</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.OrderImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getOrder()
     * @generated
     */
    EClass ORDER = eINSTANCE.getOrder();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.SimpleOrderImpl <em>Simple Order</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.SimpleOrderImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getSimpleOrder()
     * @generated
     */
    EClass SIMPLE_ORDER = eINSTANCE.getSimpleOrder();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ComparisonExpressionImpl <em>Comparison Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.ComparisonExpressionImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getComparisonExpression()
     * @generated
     */
    EClass COMPARISON_EXPRESSION = eINSTANCE.getComparisonExpression();

    /**
     * The meta object literal for the '<em><b>Left</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference COMPARISON_EXPRESSION__LEFT = eINSTANCE.getComparisonExpression_Left();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ArithmeticExpressionImpl <em>Arithmetic Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.ArithmeticExpressionImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getArithmeticExpression()
     * @generated
     */
    EClass ARITHMETIC_EXPRESSION = eINSTANCE.getArithmeticExpression();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.UnaryPreExpressionImpl <em>Unary Pre Expression</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.UnaryPreExpressionImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getUnaryPreExpression()
     * @generated
     */
    EClass UNARY_PRE_EXPRESSION = eINSTANCE.getUnaryPreExpression();

    /**
     * The meta object literal for the '<em><b>Enclosed Expression</b></em>' containment reference feature.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    EReference UNARY_PRE_EXPRESSION__ENCLOSED_EXPRESSION = eINSTANCE.getUnaryPreExpression_EnclosedExpression();

    /**
     * The meta object literal for the '{@link de.darmstadt.tu.crossing.cryptSL.impl.ObjectImpl <em>Object</em>}' class.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @see de.darmstadt.tu.crossing.cryptSL.impl.ObjectImpl
     * @see de.darmstadt.tu.crossing.cryptSL.impl.CryptSLPackageImpl#getObject()
     * @generated
     */
    EClass OBJECT = eINSTANCE.getObject();

  }

} //CryptSLPackage
