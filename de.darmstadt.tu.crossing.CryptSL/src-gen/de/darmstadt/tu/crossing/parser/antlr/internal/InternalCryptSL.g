/*
 * generated by Xtext 2.11.0
 */
grammar InternalCryptSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.darmstadt.tu.crossing.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.darmstadt.tu.crossing.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.darmstadt.tu.crossing.services.CryptSLGrammarAccess;

}

@parser::members {

 	private CryptSLGrammarAccess grammarAccess;

    public InternalCryptSLParser(TokenStream input, CryptSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Domainmodel";
   	}

   	@Override
   	protected CryptSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainmodel
entryRuleDomainmodel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainmodelRule()); }
	iv_ruleDomainmodel=ruleDomainmodel
	{ $current=$iv_ruleDomainmodel.current; }
	EOF;

// Rule Domainmodel
ruleDomainmodel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SPEC'
		{
			newLeafNode(otherlv_0, grammarAccess.getDomainmodelAccess().getSPECKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDomainmodelRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getDomainmodelAccess().getJavaTypeJvmTypeCrossReference_1_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='USES_OBJECTS'
		{
			newLeafNode(otherlv_2, grammarAccess.getDomainmodelAccess().getUSES_OBJECTSKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainmodelAccess().getObjectObjectDeclParserRuleCall_3_0());
				}
				lv_object_3_0=ruleObjectDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainmodelRule());
					}
					add(
						$current,
						"object",
						lv_object_3_0,
						"de.darmstadt.tu.crossing.CryptSL.ObjectDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_4='FORBIDDEN_EVENTS'
			{
				newLeafNode(otherlv_4, grammarAccess.getDomainmodelAccess().getFORBIDDEN_EVENTSKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDomainmodelAccess().getMethodForbMethodParserRuleCall_4_1_0());
					}
					lv_method_5_0=ruleForbMethod
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDomainmodelRule());
						}
						add(
							$current,
							"method",
							lv_method_5_0,
							"de.darmstadt.tu.crossing.CryptSL.ForbMethod");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		otherlv_6='REQUIRED_EVENTS'
		{
			newLeafNode(otherlv_6, grammarAccess.getDomainmodelAccess().getREQUIRED_EVENTSKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainmodelAccess().getEventEventParserRuleCall_6_0());
				}
				lv_event_7_0=ruleEvent
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainmodelRule());
					}
					add(
						$current,
						"event",
						lv_event_7_0,
						"de.darmstadt.tu.crossing.CryptSL.Event");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_8='ENFORCE_ORDER'
		{
			newLeafNode(otherlv_8, grammarAccess.getDomainmodelAccess().getENFORCE_ORDERKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainmodelAccess().getOrderOrderParserRuleCall_8_0());
				}
				lv_order_9_0=ruleOrder
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainmodelRule());
					}
					set(
						$current,
						"order",
						lv_order_9_0,
						"de.darmstadt.tu.crossing.CryptSL.Order");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_10='ENFORCES_CONSTRAINTS'
		{
			newLeafNode(otherlv_10, grammarAccess.getDomainmodelAccess().getENFORCES_CONSTRAINTSKeyword_9());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDomainmodelAccess().getReqConstraintParserRuleCall_10_0());
				}
				lv_req_11_0=ruleConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDomainmodelRule());
					}
					add(
						$current,
						"req",
						lv_req_11_0,
						"de.darmstadt.tu.crossing.CryptSL.Constraint");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_12='ENSURES'
			{
				newLeafNode(otherlv_12, grammarAccess.getDomainmodelAccess().getENSURESKeyword_11_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDomainmodelAccess().getEnsPredParserRuleCall_11_1_0());
					}
					lv_ens_13_0=rulePred
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDomainmodelRule());
						}
						add(
							$current,
							"ens",
							lv_ens_13_0,
							"de.darmstadt.tu.crossing.CryptSL.Pred");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
	)
;

// Entry rule entryRuleObjectDecl
entryRuleObjectDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectDeclRule()); }
	iv_ruleObjectDecl=ruleObjectDecl
	{ $current=$iv_ruleObjectDecl.current; }
	EOF;

// Rule ObjectDecl
ruleObjectDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectDeclRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getObjectDeclAccess().getObjectTypeJvmTypeCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1='[]'
			{
				newLeafNode(otherlv_1, grammarAccess.getObjectDeclAccess().getLeftSquareBracketRightSquareBracketKeyword_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getObjectDeclAccess().getObjectNameObjectParserRuleCall_2_0());
				}
				lv_objectName_2_0=ruleObject
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getObjectDeclRule());
					}
					set(
						$current,
						"objectName",
						lv_objectName_2_0,
						"de.darmstadt.tu.crossing.CryptSL.Object");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getObjectDeclAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleForbMethod
entryRuleForbMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForbMethodRule()); }
	iv_ruleForbMethod=ruleForbMethod
	{ $current=$iv_ruleForbMethod.current; }
	EOF;

// Rule ForbMethod
ruleForbMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForbMethodAccess().getForbMethodAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getForbMethodRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getForbMethodAccess().getJavaMethJvmOperationCrossReference_1_0_0());
					}
					ruleFQN
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2='=>'
				{
					newLeafNode(otherlv_2, grammarAccess.getForbMethodAccess().getEqualsSignGreaterThanSignKeyword_1_1_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getForbMethodRule());
							}
						}
						otherlv_3=RULE_ID
						{
							newLeafNode(otherlv_3, grammarAccess.getForbMethodAccess().getRepEventCrossReference_1_1_1_0());
						}
					)
				)
			)?
		)
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getForbMethodAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleFQN
entryRuleFQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFQNRule()); }
	iv_ruleFQN=ruleFQN
	{ $current=$iv_ruleFQN.current.getText(); }
	EOF;

// Rule FQN
ruleFQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFQNAccess().getQNParserRuleCall_0());
		}
		this_QN_0=ruleQN
		{
			$current.merge(this_QN_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFQNAccess().getLeftParenthesisKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getFQNAccess().getQNParserRuleCall_2_0());
			}
			this_QN_2=ruleQN
			{
				$current.merge(this_QN_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getFQNAccess().getCommaKeyword_2_1_0());
				}
				{
					newCompositeNode(grammarAccess.getFQNAccess().getQNParserRuleCall_2_1_1());
				}
				this_QN_4=ruleQN
				{
					$current.merge(this_QN_4);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
		)?
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFQNAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleQN
entryRuleQN returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQNRule()); }
	iv_ruleQN=ruleQN
	{ $current=$iv_ruleQN.current.getText(); }
	EOF;

// Rule QN
ruleQN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQNAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQNAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getQNAccess().getIDTerminalRuleCall_1_1());
			}
		)*
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEventAccess().getLabelMethodCallParserRuleCall_0());
		}
		this_LabelMethodCall_0=ruleLabelMethodCall
		{
			$current = $this_LabelMethodCall_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getEventAccess().getAggregateParserRuleCall_1());
		}
		this_Aggregate_1=ruleAggregate
		{
			$current = $this_Aggregate_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLabelMethodCall
entryRuleLabelMethodCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabelMethodCallRule()); }
	iv_ruleLabelMethodCall=ruleLabelMethodCall
	{ $current=$iv_ruleLabelMethodCall.current; }
	EOF;

// Rule LabelMethodCall
ruleLabelMethodCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getLabelMethodCallAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLabelMethodCallRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.xbase.Xtype.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getLabelMethodCallAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLabelMethodCallAccess().getMethMethodParserRuleCall_2_0());
				}
				lv_meth_2_0=ruleMethod
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLabelMethodCallRule());
					}
					set(
						$current,
						"meth",
						lv_meth_2_0,
						"de.darmstadt.tu.crossing.CryptSL.Method");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	iv_ruleMethod=ruleMethod
	{ $current=$iv_ruleMethod.current; }
	EOF;

// Rule Method
ruleMethod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMethodRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getMethodAccess().getLeftSideObjectCrossReference_0_0_0());
					}
				)
			)
			otherlv_1='='
			{
				newLeafNode(otherlv_1, grammarAccess.getMethodAccess().getEqualsSignKeyword_0_1());
			}
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMethodRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getMethodAccess().getMethNameJvmOperationCrossReference_1_0());
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMethodAccess().getParListParListParserRuleCall_3_0());
				}
				lv_parList_4_0=ruleParList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMethodRule());
					}
					set(
						$current,
						"parList",
						lv_parList_4_0,
						"de.darmstadt.tu.crossing.CryptSL.ParList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=');'
		{
			newLeafNode(otherlv_5, grammarAccess.getMethodAccess().getRightParenthesisSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleParList
entryRuleParList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParListRule()); }
	iv_ruleParList=ruleParList
	{ $current=$iv_ruleParList.current; }
	EOF;

// Rule ParList
ruleParList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParListAccess().getParametersParParserRuleCall_0_0());
				}
				lv_parameters_0_0=rulePar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParListRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_0_0,
						"de.darmstadt.tu.crossing.CryptSL.Par");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getParListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParListAccess().getParametersParParserRuleCall_1_1_0());
					}
					lv_parameters_2_0=rulePar
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParListRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"de.darmstadt.tu.crossing.CryptSL.Par");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePar
entryRulePar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParRule()); }
	iv_rulePar=rulePar
	{ $current=$iv_rulePar.current; }
	EOF;

// Rule Par
rulePar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParAccess().getParAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getParRule());
						}
					}
					otherlv_1=RULE_ID
					{
						newLeafNode(otherlv_1, grammarAccess.getParAccess().getValObjectCrossReference_1_0_0());
					}
				)
			)
			    |
			otherlv_2='_'
			{
				newLeafNode(otherlv_2, grammarAccess.getParAccess().get_Keyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleAggregate
entryRuleAggregate returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAggregateRule()); }
	iv_ruleAggregate=ruleAggregate
	{ $current=$iv_ruleAggregate.current; }
	EOF;

// Rule Aggregate
ruleAggregate returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAggregateAccess().getAggegateAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getAggregateAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAggregateRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.xbase.Xtype.ID");
					}
				)
			)
			otherlv_2=':='
			{
				newLeafNode(otherlv_2, grammarAccess.getAggregateAccess().getColonEqualsSignKeyword_1_1());
			}
			(
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAggregateRule());
							}
						}
						otherlv_3=RULE_ID
						{
							newLeafNode(otherlv_3, grammarAccess.getAggregateAccess().getLabEventCrossReference_1_2_0_0());
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getAggregateAccess().getCommaKeyword_1_2_1_0());
					}
					(
						(
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAggregateRule());
								}
							}
							otherlv_5=RULE_ID
							{
								newLeafNode(otherlv_5, grammarAccess.getAggregateAccess().getLabEventCrossReference_1_2_1_1_0());
							}
						)
					)
				)*
			)
			otherlv_6=';'
			{
				newLeafNode(otherlv_6, grammarAccess.getAggregateAccess().getSemicolonKeyword_1_3());
			}
		)
	)
;

// Entry rule entryRuleOrder
entryRuleOrder returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrderRule()); }
	iv_ruleOrder=ruleOrder
	{ $current=$iv_ruleOrder.current; }
	EOF;

// Rule Order
ruleOrder returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrderAccess().getSimpleOrderParserRuleCall_0());
		}
		this_SimpleOrder_0=ruleSimpleOrder
		{
			$current = $this_SimpleOrder_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrderAccess().getOrderLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_orderop_2_0=','
					{
						newLeafNode(lv_orderop_2_0, grammarAccess.getOrderAccess().getOrderopCommaKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOrderRule());
						}
						setWithLastConsumed($current, "orderop", lv_orderop_2_0, ",");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrderAccess().getRightSimpleOrderParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleSimpleOrder
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrderRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.darmstadt.tu.crossing.CryptSL.SimpleOrder");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSimpleOrder
entryRuleSimpleOrder returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleOrderRule()); }
	iv_ruleSimpleOrder=ruleSimpleOrder
	{ $current=$iv_ruleSimpleOrder.current; }
	EOF;

// Rule SimpleOrder
ruleSimpleOrder returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSimpleOrderAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getSimpleOrderAccess().getSimpleOrderLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_orderop_2_0='|'
					{
						newLeafNode(lv_orderop_2_0, grammarAccess.getSimpleOrderAccess().getOrderopVerticalLineKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSimpleOrderRule());
						}
						setWithLastConsumed($current, "orderop", lv_orderop_2_0, "|");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleOrderAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleOrderRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"de.darmstadt.tu.crossing.CryptSL.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryRule());
						}
					}
					otherlv_0=RULE_ID
					{
						newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getOrderEvEventCrossReference_0_0_0());
					}
				)
			)
			(
				(
					(
						lv_elementop_1_1='+'
						{
							newLeafNode(lv_elementop_1_1, grammarAccess.getPrimaryAccess().getElementopPlusSignKeyword_0_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPrimaryRule());
							}
							setWithLastConsumed($current, "elementop", lv_elementop_1_1, null);
						}
						    |
						lv_elementop_1_2='?'
						{
							newLeafNode(lv_elementop_1_2, grammarAccess.getPrimaryAccess().getElementopQuestionMarkKeyword_0_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPrimaryRule());
							}
							setWithLastConsumed($current, "elementop", lv_elementop_1_2, null);
						}
						    |
						lv_elementop_1_3='*'
						{
							newLeafNode(lv_elementop_1_3, grammarAccess.getPrimaryAccess().getElementopAsteriskKeyword_0_1_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPrimaryRule());
							}
							setWithLastConsumed($current, "elementop", lv_elementop_1_3, null);
						}
					)
				)
			)?
		)
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getOrderParserRuleCall_1_1());
			}
			this_Order_3=ruleOrder
			{
				$current = $this_Order_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_1_2());
			}
			(
				(
					(
						lv_elementop_5_1='+'
						{
							newLeafNode(lv_elementop_5_1, grammarAccess.getPrimaryAccess().getElementopPlusSignKeyword_1_3_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPrimaryRule());
							}
							setWithLastConsumed($current, "elementop", lv_elementop_5_1, null);
						}
						    |
						lv_elementop_5_2='?'
						{
							newLeafNode(lv_elementop_5_2, grammarAccess.getPrimaryAccess().getElementopQuestionMarkKeyword_1_3_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPrimaryRule());
							}
							setWithLastConsumed($current, "elementop", lv_elementop_5_2, null);
						}
						    |
						lv_elementop_5_3='*'
						{
							newLeafNode(lv_elementop_5_3, grammarAccess.getPrimaryAccess().getElementopAsteriskKeyword_1_3_0_2());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getPrimaryRule());
							}
							setWithLastConsumed($current, "elementop", lv_elementop_5_3, null);
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current; }
	EOF;

// Rule Constraint
ruleConstraint returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getConstraintAccess().getLogicalImplyExpressionParserRuleCall());
	}
	this_LogicalImplyExpression_0=ruleLogicalImplyExpression
	{
		$current = $this_LogicalImplyExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleLogicalImplyExpression
entryRuleLogicalImplyExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalImplyExpressionRule()); }
	iv_ruleLogicalImplyExpression=ruleLogicalImplyExpression
	{ $current=$iv_ruleLogicalImplyExpression.current; }
	EOF;

// Rule LogicalImplyExpression
ruleLogicalImplyExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalImplyExpressionAccess().getLogicalOrExpressionParserRuleCall_0());
		}
		this_LogicalOrExpression_0=ruleLogicalOrExpression
		{
			$current = $this_LogicalOrExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLogicalImplyExpressionAccess().getConstraintLeftExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalImplyExpressionAccess().getOperatorLogicalImplyParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleLogicalImply
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalImplyExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"de.darmstadt.tu.crossing.CryptSL.LogicalImply");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalImplyExpressionAccess().getRightExpressionLogicalOrExpressionParserRuleCall_1_2_0());
					}
					lv_rightExpression_3_0=ruleLogicalOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalImplyExpressionRule());
						}
						set(
							$current,
							"rightExpression",
							lv_rightExpression_3_0,
							"de.darmstadt.tu.crossing.CryptSL.LogicalOrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLogicalImply
entryRuleLogicalImply returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalImplyRule()); }
	iv_ruleLogicalImply=ruleLogicalImply
	{ $current=$iv_ruleLogicalImply.current; }
	EOF;

// Rule LogicalImply
ruleLogicalImply returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_IMPLIES_0_0='=>'
			{
				newLeafNode(lv_IMPLIES_0_0, grammarAccess.getLogicalImplyAccess().getIMPLIESEqualsSignGreaterThanSignKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLogicalImplyRule());
				}
				setWithLastConsumed($current, "IMPLIES", lv_IMPLIES_0_0, "=>");
			}
		)
	)
;

// Entry rule entryRuleLogicalOrExpression
entryRuleLogicalOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOrExpressionRule()); }
	iv_ruleLogicalOrExpression=ruleLogicalOrExpression
	{ $current=$iv_ruleLogicalOrExpression.current; }
	EOF;

// Rule LogicalOrExpression
ruleLogicalOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getLogicalAndExpressionParserRuleCall_0());
		}
		this_LogicalAndExpression_0=ruleLogicalAndExpression
		{
			$current = $this_LogicalAndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLogicalOrExpressionAccess().getConstraintLeftExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getOperatorLogicalOrParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleLogicalOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"de.darmstadt.tu.crossing.CryptSL.LogicalOr");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalOrExpressionAccess().getRightExpressionLogicalAndExpressionParserRuleCall_1_2_0());
					}
					lv_rightExpression_3_0=ruleLogicalAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalOrExpressionRule());
						}
						set(
							$current,
							"rightExpression",
							lv_rightExpression_3_0,
							"de.darmstadt.tu.crossing.CryptSL.LogicalAndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLogicalOr
entryRuleLogicalOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalOrRule()); }
	iv_ruleLogicalOr=ruleLogicalOr
	{ $current=$iv_ruleLogicalOr.current; }
	EOF;

// Rule LogicalOr
ruleLogicalOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_OR_0_0='||'
			{
				newLeafNode(lv_OR_0_0, grammarAccess.getLogicalOrAccess().getORVerticalLineVerticalLineKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLogicalOrRule());
				}
				setWithLastConsumed($current, "OR", lv_OR_0_0, "||");
			}
		)
	)
;

// Entry rule entryRuleLogicalAndExpression
entryRuleLogicalAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalAndExpressionRule()); }
	iv_ruleLogicalAndExpression=ruleLogicalAndExpression
	{ $current=$iv_ruleLogicalAndExpression.current; }
	EOF;

// Rule LogicalAndExpression
ruleLogicalAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getComparisonExpressionParserRuleCall_0());
		}
		this_ComparisonExpression_0=ruleComparisonExpression
		{
			$current = $this_ComparisonExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getLogicalAndExpressionAccess().getConstraintLeftExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getOperatorLogicalAndParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleLogicalAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"de.darmstadt.tu.crossing.CryptSL.LogicalAnd");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicalAndExpressionAccess().getRightExpressionComparisonExpressionParserRuleCall_1_2_0());
					}
					lv_rightExpression_3_0=ruleComparisonExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicalAndExpressionRule());
						}
						set(
							$current,
							"rightExpression",
							lv_rightExpression_3_0,
							"de.darmstadt.tu.crossing.CryptSL.ComparisonExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLogicalAnd
entryRuleLogicalAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicalAndRule()); }
	iv_ruleLogicalAnd=ruleLogicalAnd
	{ $current=$iv_ruleLogicalAnd.current; }
	EOF;

// Rule LogicalAnd
ruleLogicalAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_AND_0_0='&&'
			{
				newLeafNode(lv_AND_0_0, grammarAccess.getLogicalAndAccess().getANDAmpersandAmpersandKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLogicalAndRule());
				}
				setWithLastConsumed($current, "AND", lv_AND_0_0, "&&");
			}
		)
	)
;

// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonExpressionRule()); }
	iv_ruleComparisonExpression=ruleComparisonExpression
	{ $current=$iv_ruleComparisonExpression.current; }
	EOF;

// Rule ComparisonExpression
ruleComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonExpressionAccess().getComparisonHigherOpExpressionParserRuleCall_0());
		}
		this_ComparisonHigherOpExpression_0=ruleComparisonHigherOpExpression
		{
			$current = $this_ComparisonHigherOpExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonExpressionAccess().getOperatorComparingEQNEQOperatorParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleComparingEQNEQOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"de.darmstadt.tu.crossing.CryptSL.ComparingEQNEQOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonExpressionAccess().getRightExpressionComparisonHigherOpExpressionParserRuleCall_1_2_0());
					}
					lv_rightExpression_3_0=ruleComparisonHigherOpExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonExpressionRule());
						}
						set(
							$current,
							"rightExpression",
							lv_rightExpression_3_0,
							"de.darmstadt.tu.crossing.CryptSL.ComparisonHigherOpExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleComparisonHigherOpExpression
entryRuleComparisonHigherOpExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonHigherOpExpressionRule()); }
	iv_ruleComparisonHigherOpExpression=ruleComparisonHigherOpExpression
	{ $current=$iv_ruleComparisonHigherOpExpression.current; }
	EOF;

// Rule ComparisonHigherOpExpression
ruleComparisonHigherOpExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonHigherOpExpressionAccess().getArithmeticExpressionParserRuleCall_0());
		}
		this_ArithmeticExpression_0=ruleArithmeticExpression
		{
			$current = $this_ArithmeticExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonHigherOpExpressionAccess().getComparisonExpressionLeftExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonHigherOpExpressionAccess().getOperatorComparingRelOperatorParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleComparingRelOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonHigherOpExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"de.darmstadt.tu.crossing.CryptSL.ComparingRelOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonHigherOpExpressionAccess().getRightExpressionArithmeticExpressionParserRuleCall_1_2_0());
					}
					lv_rightExpression_3_0=ruleArithmeticExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonHigherOpExpressionRule());
						}
						set(
							$current,
							"rightExpression",
							lv_rightExpression_3_0,
							"de.darmstadt.tu.crossing.CryptSL.ArithmeticExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleComparingRelOperator
entryRuleComparingRelOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparingRelOperatorRule()); }
	iv_ruleComparingRelOperator=ruleComparingRelOperator
	{ $current=$iv_ruleComparingRelOperator.current; }
	EOF;

// Rule ComparingRelOperator
ruleComparingRelOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_LESS_0_0='<'
				{
					newLeafNode(lv_LESS_0_0, grammarAccess.getComparingRelOperatorAccess().getLESSLessThanSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparingRelOperatorRule());
					}
					setWithLastConsumed($current, "LESS", lv_LESS_0_0, "<");
				}
			)
		)
		    |
		(
			(
				lv_LESS_OR_EQUAL_1_0='<='
				{
					newLeafNode(lv_LESS_OR_EQUAL_1_0, grammarAccess.getComparingRelOperatorAccess().getLESS_OR_EQUALLessThanSignEqualsSignKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparingRelOperatorRule());
					}
					setWithLastConsumed($current, "LESS_OR_EQUAL", lv_LESS_OR_EQUAL_1_0, "<=");
				}
			)
		)
		    |
		(
			(
				lv_GREATER_OR_EQUAL_2_0='>='
				{
					newLeafNode(lv_GREATER_OR_EQUAL_2_0, grammarAccess.getComparingRelOperatorAccess().getGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparingRelOperatorRule());
					}
					setWithLastConsumed($current, "GREATER_OR_EQUAL", lv_GREATER_OR_EQUAL_2_0, ">=");
				}
			)
		)
		    |
		(
			(
				lv_GREATER_3_0='>'
				{
					newLeafNode(lv_GREATER_3_0, grammarAccess.getComparingRelOperatorAccess().getGREATERGreaterThanSignKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparingRelOperatorRule());
					}
					setWithLastConsumed($current, "GREATER", lv_GREATER_3_0, ">");
				}
			)
		)
	)
;

// Entry rule entryRuleArithmeticExpression
entryRuleArithmeticExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArithmeticExpressionRule()); }
	iv_ruleArithmeticExpression=ruleArithmeticExpression
	{ $current=$iv_ruleArithmeticExpression.current; }
	EOF;

// Rule ArithmeticExpression
ruleArithmeticExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getArithmeticExpressionAccess().getAdditionExpressionParserRuleCall());
	}
	this_AdditionExpression_0=ruleAdditionExpression
	{
		$current = $this_AdditionExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAdditionExpression
entryRuleAdditionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionExpressionRule()); }
	iv_ruleAdditionExpression=ruleAdditionExpression
	{ $current=$iv_ruleAdditionExpression.current; }
	EOF;

// Rule AdditionExpression
ruleAdditionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionExpressionAccess().getMultiplicationExpressionParserRuleCall_0());
		}
		this_MultiplicationExpression_0=ruleMultiplicationExpression
		{
			$current = $this_MultiplicationExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionExpressionAccess().getOperatorAdditionOperatorParserRuleCall_1_1_0());
					}
					lv_operator_2_0=ruleAdditionOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_2_0,
							"de.darmstadt.tu.crossing.CryptSL.AdditionOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionExpressionAccess().getRightExpressionMultiplicationExpressionParserRuleCall_1_2_0());
					}
					lv_rightExpression_3_0=ruleMultiplicationExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionExpressionRule());
						}
						set(
							$current,
							"rightExpression",
							lv_rightExpression_3_0,
							"de.darmstadt.tu.crossing.CryptSL.MultiplicationExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAdditionOperator
entryRuleAdditionOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionOperatorRule()); }
	iv_ruleAdditionOperator=ruleAdditionOperator
	{ $current=$iv_ruleAdditionOperator.current; }
	EOF;

// Rule AdditionOperator
ruleAdditionOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_PLUS_0_0='+'
				{
					newLeafNode(lv_PLUS_0_0, grammarAccess.getAdditionOperatorAccess().getPLUSPlusSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAdditionOperatorRule());
					}
					setWithLastConsumed($current, "PLUS", lv_PLUS_0_0, "+");
				}
			)
		)
		    |
		(
			(
				lv_MINUS_1_0='-'
				{
					newLeafNode(lv_MINUS_1_0, grammarAccess.getAdditionOperatorAccess().getMINUSHyphenMinusKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAdditionOperatorRule());
					}
					setWithLastConsumed($current, "MINUS", lv_MINUS_1_0, "-");
				}
			)
		)
	)
;

// Entry rule entryRuleMultiplicationExpression
entryRuleMultiplicationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationExpressionRule()); }
	iv_ruleMultiplicationExpression=ruleMultiplicationExpression
	{ $current=$iv_ruleMultiplicationExpression.current; }
	EOF;

// Rule MultiplicationExpression
ruleMultiplicationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getUnaryPreExpressionParserRuleCall_0());
		}
		this_UnaryPreExpression_0=ruleUnaryPreExpression
		{
			$current = $this_UnaryPreExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getOperandParserRuleCall_1_0());
			}
			this_Operand_1=ruleOperand
			{
				$current = $this_Operand_1.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getMultiplicationExpressionAccess().getArithmeticExpressionLeftExpressionAction_1_1_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getOperatorMultiplicationOperatorParserRuleCall_1_1_1_0());
						}
						lv_operator_3_0=ruleMultiplicationOperator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
							}
							set(
								$current,
								"operator",
								lv_operator_3_0,
								"de.darmstadt.tu.crossing.CryptSL.MultiplicationOperator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getMultiplicationExpressionAccess().getRightExpressionOperandParserRuleCall_1_1_2_0());
						}
						lv_rightExpression_4_0=ruleOperand
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getMultiplicationExpressionRule());
							}
							set(
								$current,
								"rightExpression",
								lv_rightExpression_4_0,
								"de.darmstadt.tu.crossing.CryptSL.Operand");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
	)
;

// Entry rule entryRuleMultiplicationOperator
entryRuleMultiplicationOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationOperatorRule()); }
	iv_ruleMultiplicationOperator=ruleMultiplicationOperator
	{ $current=$iv_ruleMultiplicationOperator.current; }
	EOF;

// Rule MultiplicationOperator
ruleMultiplicationOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_TIMES_0_0='*'
				{
					newLeafNode(lv_TIMES_0_0, grammarAccess.getMultiplicationOperatorAccess().getTIMESAsteriskKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiplicationOperatorRule());
					}
					setWithLastConsumed($current, "TIMES", lv_TIMES_0_0, "*");
				}
			)
		)
		    |
		(
			(
				lv_DIVIDE_1_0='/'
				{
					newLeafNode(lv_DIVIDE_1_0, grammarAccess.getMultiplicationOperatorAccess().getDIVIDESolidusKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiplicationOperatorRule());
					}
					setWithLastConsumed($current, "DIVIDE", lv_DIVIDE_1_0, "/");
				}
			)
		)
	)
;

// Entry rule entryRuleUnaryPreExpression
entryRuleUnaryPreExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryPreExpressionRule()); }
	iv_ruleUnaryPreExpression=ruleUnaryPreExpression
	{ $current=$iv_ruleUnaryPreExpression.current; }
	EOF;

// Rule UnaryPreExpression
ruleUnaryPreExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getUnaryPreExpressionAccess().getUnaryPreExpressionAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryPreExpressionAccess().getOperatorUnaryPreOperatorParserRuleCall_1_0_0());
					}
					lv_operator_1_0=ruleUnaryPreOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryPreExpressionRule());
						}
						set(
							$current,
							"operator",
							lv_operator_1_0,
							"de.darmstadt.tu.crossing.CryptSL.UnaryPreOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryPreExpressionAccess().getEnclosedExpressionOperandParserRuleCall_1_1_0());
					}
					lv_enclosedExpression_2_0=ruleOperand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryPreExpressionRule());
						}
						set(
							$current,
							"enclosedExpression",
							lv_enclosedExpression_2_0,
							"de.darmstadt.tu.crossing.CryptSL.Operand");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleOperand
entryRuleOperand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperandRule()); }
	iv_ruleOperand=ruleOperand
	{ $current=$iv_ruleOperand.current; }
	EOF;

// Rule Operand
ruleOperand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getOperandAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getOperandAccess().getConstraintParserRuleCall_0_1());
			}
			this_Constraint_1=ruleConstraint
			{
				$current = $this_Constraint_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getOperandAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getOperandAccess().getConsParserRuleCall_1());
		}
		this_Cons_3=ruleCons
		{
			$current = $this_Cons_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperandAccess().getPredParserRuleCall_2());
		}
		this_Pred_4=rulePred
		{
			$current = $this_Pred_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	iv_ruleLiteralExpression=ruleLiteralExpression
	{ $current=$iv_ruleLiteralExpression.current; }
	EOF;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralExpressionAccess().getNameLiteralParserRuleCall_0_0());
				}
				lv_name_0_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralExpressionRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"de.darmstadt.tu.crossing.CryptSL.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getLiteralExpressionAccess().getNameAggregateExpressionParserRuleCall_1_0());
				}
				lv_name_1_0=ruleAggregateExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLiteralExpressionRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"de.darmstadt.tu.crossing.CryptSL.AggregateExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			otherlv_2='typeOf('
			{
				newLeafNode(otherlv_2, grammarAccess.getLiteralExpressionAccess().getTypeOfKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLiteralExpressionRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getLiteralExpressionAccess().getObjObjectCrossReference_2_1_0());
					}
				)
			)
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getLiteralExpressionAccess().getCommaKeyword_2_2());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getLiteralExpressionRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getLiteralExpressionAccess().getTypeJvmTypeCrossReference_2_3_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getLiteralExpressionAccess().getRightParenthesisKeyword_2_4());
			}
		)
	)
;

// Entry rule entryRuleAggregateExpression
entryRuleAggregateExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAggregateExpressionRule()); }
	iv_ruleAggregateExpression=ruleAggregateExpression
	{ $current=$iv_ruleAggregateExpression.current; }
	EOF;

// Rule AggregateExpression
ruleAggregateExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAggregateExpressionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getAggregateExpressionAccess().getValueSuperTypeCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getAggregateExpressionAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				newLeafNode(this_ID_2, grammarAccess.getAggregateExpressionAccess().getIDTerminalRuleCall_1_1());
			}
		)?
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLiteralAccess().getLiteralAction_0(),
					$current);
			}
		)
		(
			this_STRING_1=RULE_STRING
			{
				newLeafNode(this_STRING_1, grammarAccess.getLiteralAccess().getSTRINGTerminalRuleCall_1_0());
			}
			    |
			this_INT_2=RULE_INT
			{
				newLeafNode(this_INT_2, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_1_1());
			}
		)
	)
;

// Entry rule entryRuleUnaryPreOperator
entryRuleUnaryPreOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryPreOperatorRule()); }
	iv_ruleUnaryPreOperator=ruleUnaryPreOperator
	{ $current=$iv_ruleUnaryPreOperator.current; }
	EOF;

// Rule UnaryPreOperator
ruleUnaryPreOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_NOT_0_0='!'
			{
				newLeafNode(lv_NOT_0_0, grammarAccess.getUnaryPreOperatorAccess().getNOTExclamationMarkKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getUnaryPreOperatorRule());
				}
				setWithLastConsumed($current, "NOT", lv_NOT_0_0, "!");
			}
		)
	)
;

// Entry rule entryRuleComparingEQNEQOperator
entryRuleComparingEQNEQOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparingEQNEQOperatorRule()); }
	iv_ruleComparingEQNEQOperator=ruleComparingEQNEQOperator
	{ $current=$iv_ruleComparingEQNEQOperator.current; }
	EOF;

// Rule ComparingEQNEQOperator
ruleComparingEQNEQOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_EQUAL_0_0='=='
				{
					newLeafNode(lv_EQUAL_0_0, grammarAccess.getComparingEQNEQOperatorAccess().getEQUALEqualsSignEqualsSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparingEQNEQOperatorRule());
					}
					setWithLastConsumed($current, "EQUAL", lv_EQUAL_0_0, "==");
				}
			)
		)
		    |
		(
			(
				lv_UNEQUAL_1_0='!='
				{
					newLeafNode(lv_UNEQUAL_1_0, grammarAccess.getComparingEQNEQOperatorAccess().getUNEQUALExclamationMarkEqualsSignKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparingEQNEQOperatorRule());
					}
					setWithLastConsumed($current, "UNEQUAL", lv_UNEQUAL_1_0, "!=");
				}
			)
		)
	)
;

// Entry rule entryRuleCons
entryRuleCons returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConsRule()); }
	iv_ruleCons=ruleCons
	{ $current=$iv_ruleCons.current; }
	EOF;

// Rule Cons
ruleCons returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getConsAccess().getConsConsPredParserRuleCall_0_0_0());
					}
					lv_cons_0_0=ruleConsPred
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConsRule());
						}
						set(
							$current,
							"cons",
							lv_cons_0_0,
							"de.darmstadt.tu.crossing.CryptSL.ConsPred");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_1='in'
			{
				newLeafNode(otherlv_1, grammarAccess.getConsAccess().getInKeyword_0_1());
			}
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getConsAccess().getLeftCurlyBracketKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getConsAccess().getLitsleftLitListParserRuleCall_0_3_0());
					}
					lv_litsleft_3_0=ruleLitList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getConsRule());
						}
						set(
							$current,
							"litsleft",
							lv_litsleft_3_0,
							"de.darmstadt.tu.crossing.CryptSL.LitList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4='}'
			{
				newLeafNode(otherlv_4, grammarAccess.getConsAccess().getRightCurlyBracketKeyword_0_4());
			}
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getConsAccess().getConsLiteralExpressionParserRuleCall_1_0());
				}
				lv_cons_5_0=ruleLiteralExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConsRule());
					}
					set(
						$current,
						"cons",
						lv_cons_5_0,
						"de.darmstadt.tu.crossing.CryptSL.LiteralExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleConsPred
entryRuleConsPred returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConsPredRule()); }
	iv_ruleConsPred=ruleConsPred
	{ $current=$iv_ruleConsPred.current; }
	EOF;

// Rule ConsPred
ruleConsPred returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='part('
			{
				newLeafNode(otherlv_0, grammarAccess.getConsPredAccess().getPartKeyword_0_0());
			}
			this_INT_1=RULE_INT
			{
				newLeafNode(this_INT_1, grammarAccess.getConsPredAccess().getINTTerminalRuleCall_0_1());
			}
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getConsPredAccess().getCommaKeyword_0_2());
			}
			this_STRING_3=RULE_STRING
			{
				newLeafNode(this_STRING_3, grammarAccess.getConsPredAccess().getSTRINGTerminalRuleCall_0_3());
			}
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getConsPredAccess().getCommaKeyword_0_4());
			}
			{
				newCompositeNode(grammarAccess.getConsPredAccess().getLiteralExpressionParserRuleCall_0_5());
			}
			this_LiteralExpression_5=ruleLiteralExpression
			{
				$current = $this_LiteralExpression_5.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getConsPredAccess().getRightParenthesisKeyword_0_6());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getConsPredAccess().getLiteralExpressionParserRuleCall_1());
		}
		this_LiteralExpression_7=ruleLiteralExpression
		{
			$current = $this_LiteralExpression_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLitList
entryRuleLitList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLitListRule()); }
	iv_ruleLitList=ruleLitList
	{ $current=$iv_ruleLitList.current; }
	EOF;

// Rule LitList
ruleLitList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLitListAccess().getParametersLiteralParserRuleCall_0_0());
				}
				lv_parameters_0_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLitListRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_0_0,
						"de.darmstadt.tu.crossing.CryptSL.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getLitListAccess().getCommaKeyword_1_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getLitListAccess().getParametersLiteralParserRuleCall_1_1_0_0());
						}
						lv_parameters_2_0=ruleLiteral
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLitListRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_2_0,
								"de.darmstadt.tu.crossing.CryptSL.Literal");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				otherlv_3='...'
				{
					newLeafNode(otherlv_3, grammarAccess.getLitListAccess().getFullStopFullStopFullStopKeyword_1_1_1());
				}
			)
		)*
	)
;

// Entry rule entryRulePred
entryRulePred returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPredRule()); }
	iv_rulePred=rulePred
	{ $current=$iv_rulePred.current; }
	EOF;

// Rule Pred
rulePred returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_predName_0_0=RULE_ID
				{
					newLeafNode(lv_predName_0_0, grammarAccess.getPredAccess().getPredNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPredRule());
					}
					setWithLastConsumed(
						$current,
						"predName",
						lv_predName_0_0,
						"org.eclipse.xtext.xbase.Xtype.ID");
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getPredAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPredAccess().getParListSuParListParserRuleCall_2_0());
				}
				lv_parList_2_0=ruleSuParList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPredRule());
					}
					set(
						$current,
						"parList",
						lv_parList_2_0,
						"de.darmstadt.tu.crossing.CryptSL.SuParList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=');'
		{
			newLeafNode(otherlv_3, grammarAccess.getPredAccess().getRightParenthesisSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleSuParList
entryRuleSuParList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSuParListRule()); }
	iv_ruleSuParList=ruleSuParList
	{ $current=$iv_ruleSuParList.current; }
	EOF;

// Rule SuParList
ruleSuParList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSuParListAccess().getParametersSuParParserRuleCall_0_0());
				}
				lv_parameters_0_0=ruleSuPar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSuParListRule());
					}
					add(
						$current,
						"parameters",
						lv_parameters_0_0,
						"de.darmstadt.tu.crossing.CryptSL.SuPar");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getSuParListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSuParListAccess().getParametersSuParParserRuleCall_1_1_0());
					}
					lv_parameters_2_0=ruleSuPar
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSuParListRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"de.darmstadt.tu.crossing.CryptSL.SuPar");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleSuPar
entryRuleSuPar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSuParRule()); }
	iv_ruleSuPar=ruleSuPar
	{ $current=$iv_ruleSuPar.current; }
	EOF;

// Rule SuPar
ruleSuPar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSuParAccess().getSuParAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSuParAccess().getValConsPredParserRuleCall_1_0_0());
					}
					lv_val_1_0=ruleConsPred
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSuParRule());
						}
						set(
							$current,
							"val",
							lv_val_1_0,
							"de.darmstadt.tu.crossing.CryptSL.ConsPred");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			otherlv_2='_'
			{
				newLeafNode(otherlv_2, grammarAccess.getSuParAccess().get_Keyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getObjectRule()); }
	iv_ruleObject=ruleObject
	{ $current=$iv_ruleObject.current; }
	EOF;

// Rule Object
ruleObject returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getObjectAccess().getObjectAction_0(),
					$current);
			}
		)
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getObjectAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getObjectRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.xbase.Xtype.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleJvmTypeReference
entryRuleJvmTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJvmTypeReferenceRule()); }
	iv_ruleJvmTypeReference=ruleJvmTypeReference
	{ $current=$iv_ruleJvmTypeReference.current; }
	EOF;

// Rule JvmTypeReference
ruleJvmTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getJvmParameterizedTypeReferenceParserRuleCall_0_0());
			}
			this_JvmParameterizedTypeReference_0=ruleJvmParameterizedTypeReference
			{
				$current = $this_JvmParameterizedTypeReference_0.current;
				afterParserOrEnumRuleCall();
			}
			(
				((
					(
					)
					ruleArrayBrackets
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0(),
								$current);
						}
					)
					{
						newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getArrayBracketsParserRuleCall_0_1_0_1());
					}
					ruleArrayBrackets
					{
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)
		    |
		{
			newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getXFunctionTypeRefParserRuleCall_1());
		}
		this_XFunctionTypeRef_3=ruleXFunctionTypeRef
		{
			$current = $this_XFunctionTypeRef_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleArrayBrackets
entryRuleArrayBrackets returns [String current=null]:
	{ newCompositeNode(grammarAccess.getArrayBracketsRule()); }
	iv_ruleArrayBrackets=ruleArrayBrackets
	{ $current=$iv_ruleArrayBrackets.current.getText(); }
	EOF;

// Rule ArrayBrackets
ruleArrayBrackets returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='['
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArrayBracketsAccess().getLeftSquareBracketKeyword_0());
		}
		kw=']'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getArrayBracketsAccess().getRightSquareBracketKeyword_1());
		}
	)
;

// Entry rule entryRuleXFunctionTypeRef
entryRuleXFunctionTypeRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXFunctionTypeRefRule()); }
	iv_ruleXFunctionTypeRef=ruleXFunctionTypeRef
	{ $current=$iv_ruleXFunctionTypeRef.current; }
	EOF;

// Rule XFunctionTypeRef
ruleXFunctionTypeRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_0_0());
						}
						lv_paramTypes_1_0=ruleJvmTypeReference
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
							}
							add(
								$current,
								"paramTypes",
								lv_paramTypes_1_0,
								"org.eclipse.xtext.xbase.Xtype.JvmTypeReference");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_2=','
					{
						newLeafNode(otherlv_2, grammarAccess.getXFunctionTypeRefAccess().getCommaKeyword_0_1_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_1_1_0());
							}
							lv_paramTypes_3_0=ruleJvmTypeReference
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
								}
								add(
									$current,
									"paramTypes",
									lv_paramTypes_3_0,
									"org.eclipse.xtext.xbase.Xtype.JvmTypeReference");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2());
			}
		)?
		otherlv_5='=>'
		{
			newLeafNode(otherlv_5, grammarAccess.getXFunctionTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getReturnTypeJvmTypeReferenceParserRuleCall_2_0());
				}
				lv_returnType_6_0=ruleJvmTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_6_0,
						"org.eclipse.xtext.xbase.Xtype.JvmTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJvmParameterizedTypeReference
entryRuleJvmParameterizedTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceRule()); }
	iv_ruleJvmParameterizedTypeReference=ruleJvmParameterizedTypeReference
	{ $current=$iv_ruleJvmParameterizedTypeReference.current; }
	EOF;

// Rule JvmParameterizedTypeReference
ruleJvmParameterizedTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getJvmParameterizedTypeReferenceRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_0_0());
				}
				ruleQualifiedName
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('<')=>
				otherlv_1='<'
				{
					newLeafNode(otherlv_1, grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0());
					}
					lv_arguments_2_0=ruleJvmArgumentTypeReference
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_2_0,
							"org.eclipse.xtext.xbase.Xtype.JvmArgumentTypeReference");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0());
						}
						lv_arguments_4_0=ruleJvmArgumentTypeReference
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_4_0,
								"org.eclipse.xtext.xbase.Xtype.JvmArgumentTypeReference");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_5='>'
			{
				newLeafNode(otherlv_5, grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_3());
			}
			(
				(
					((
						(
						)
						'.'
					)
					)=>
					(
						(
							{
								$current = forceCreateModelElementAndSet(
									grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0(),
									$current);
							}
						)
						otherlv_7='.'
						{
							newLeafNode(otherlv_7, grammarAccess.getJvmParameterizedTypeReferenceAccess().getFullStopKeyword_1_4_0_0_1());
						}
					)
				)
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getJvmParameterizedTypeReferenceRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_1_4_1_0());
						}
						ruleValidID
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						('<')=>
						otherlv_9='<'
						{
							newLeafNode(otherlv_9, grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_4_2_0());
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_1_0());
							}
							lv_arguments_10_0=ruleJvmArgumentTypeReference
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
								}
								add(
									$current,
									"arguments",
									lv_arguments_10_0,
									"org.eclipse.xtext.xbase.Xtype.JvmArgumentTypeReference");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_11=','
						{
							newLeafNode(otherlv_11, grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_4_2_2_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_2_1_0());
								}
								lv_arguments_12_0=ruleJvmArgumentTypeReference
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
									}
									add(
										$current,
										"arguments",
										lv_arguments_12_0,
										"org.eclipse.xtext.xbase.Xtype.JvmArgumentTypeReference");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)*
					otherlv_13='>'
					{
						newLeafNode(otherlv_13, grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_4_2_3());
					}
				)?
			)*
		)?
	)
;

// Entry rule entryRuleJvmArgumentTypeReference
entryRuleJvmArgumentTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceRule()); }
	iv_ruleJvmArgumentTypeReference=ruleJvmArgumentTypeReference
	{ $current=$iv_ruleJvmArgumentTypeReference.current; }
	EOF;

// Rule JvmArgumentTypeReference
ruleJvmArgumentTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmTypeReferenceParserRuleCall_0());
		}
		this_JvmTypeReference_0=ruleJvmTypeReference
		{
			$current = $this_JvmTypeReference_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmWildcardTypeReferenceParserRuleCall_1());
		}
		this_JvmWildcardTypeReference_1=ruleJvmWildcardTypeReference
		{
			$current = $this_JvmWildcardTypeReference_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleJvmWildcardTypeReference
entryRuleJvmWildcardTypeReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceRule()); }
	iv_ruleJvmWildcardTypeReference=ruleJvmWildcardTypeReference
	{ $current=$iv_ruleJvmWildcardTypeReference.current; }
	EOF;

// Rule JvmWildcardTypeReference
ruleJvmWildcardTypeReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getJvmWildcardTypeReferenceAccess().getJvmWildcardTypeReferenceAction_0(),
					$current);
			}
		)
		otherlv_1='?'
		{
			newLeafNode(otherlv_1, grammarAccess.getJvmWildcardTypeReferenceAccess().getQuestionMarkKeyword_1());
		}
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundParserRuleCall_2_0_0_0());
						}
						lv_constraints_2_0=ruleJvmUpperBound
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
							}
							add(
								$current,
								"constraints",
								lv_constraints_2_0,
								"org.eclipse.xtext.xbase.Xtype.JvmUpperBound");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundAndedParserRuleCall_2_0_1_0());
						}
						lv_constraints_3_0=ruleJvmUpperBoundAnded
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
							}
							add(
								$current,
								"constraints",
								lv_constraints_3_0,
								"org.eclipse.xtext.xbase.Xtype.JvmUpperBoundAnded");
							afterParserOrEnumRuleCall();
						}
					)
				)*
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundParserRuleCall_2_1_0_0());
						}
						lv_constraints_4_0=ruleJvmLowerBound
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
							}
							add(
								$current,
								"constraints",
								lv_constraints_4_0,
								"org.eclipse.xtext.xbase.Xtype.JvmLowerBound");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundAndedParserRuleCall_2_1_1_0());
						}
						lv_constraints_5_0=ruleJvmLowerBoundAnded
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
							}
							add(
								$current,
								"constraints",
								lv_constraints_5_0,
								"org.eclipse.xtext.xbase.Xtype.JvmLowerBoundAnded");
							afterParserOrEnumRuleCall();
						}
					)
				)*
			)
		)?
	)
;

// Entry rule entryRuleJvmUpperBound
entryRuleJvmUpperBound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJvmUpperBoundRule()); }
	iv_ruleJvmUpperBound=ruleJvmUpperBound
	{ $current=$iv_ruleJvmUpperBound.current; }
	EOF;

// Rule JvmUpperBound
ruleJvmUpperBound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='extends'
		{
			newLeafNode(otherlv_0, grammarAccess.getJvmUpperBoundAccess().getExtendsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0());
				}
				lv_typeReference_1_0=ruleJvmTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJvmUpperBoundRule());
					}
					set(
						$current,
						"typeReference",
						lv_typeReference_1_0,
						"org.eclipse.xtext.xbase.Xtype.JvmTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJvmUpperBoundAnded
entryRuleJvmUpperBoundAnded returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJvmUpperBoundAndedRule()); }
	iv_ruleJvmUpperBoundAnded=ruleJvmUpperBoundAnded
	{ $current=$iv_ruleJvmUpperBoundAnded.current; }
	EOF;

// Rule JvmUpperBoundAnded
ruleJvmUpperBoundAnded returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='&'
		{
			newLeafNode(otherlv_0, grammarAccess.getJvmUpperBoundAndedAccess().getAmpersandKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJvmUpperBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0());
				}
				lv_typeReference_1_0=ruleJvmTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJvmUpperBoundAndedRule());
					}
					set(
						$current,
						"typeReference",
						lv_typeReference_1_0,
						"org.eclipse.xtext.xbase.Xtype.JvmTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJvmLowerBound
entryRuleJvmLowerBound returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJvmLowerBoundRule()); }
	iv_ruleJvmLowerBound=ruleJvmLowerBound
	{ $current=$iv_ruleJvmLowerBound.current; }
	EOF;

// Rule JvmLowerBound
ruleJvmLowerBound returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='super'
		{
			newLeafNode(otherlv_0, grammarAccess.getJvmLowerBoundAccess().getSuperKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0());
				}
				lv_typeReference_1_0=ruleJvmTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJvmLowerBoundRule());
					}
					set(
						$current,
						"typeReference",
						lv_typeReference_1_0,
						"org.eclipse.xtext.xbase.Xtype.JvmTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleJvmLowerBoundAnded
entryRuleJvmLowerBoundAnded returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJvmLowerBoundAndedRule()); }
	iv_ruleJvmLowerBoundAnded=ruleJvmLowerBoundAnded
	{ $current=$iv_ruleJvmLowerBoundAnded.current; }
	EOF;

// Rule JvmLowerBoundAnded
ruleJvmLowerBoundAnded returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='&'
		{
			newLeafNode(otherlv_0, grammarAccess.getJvmLowerBoundAndedAccess().getAmpersandKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJvmLowerBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0());
				}
				lv_typeReference_1_0=ruleJvmTypeReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJvmLowerBoundAndedRule());
					}
					set(
						$current,
						"typeReference",
						lv_typeReference_1_0,
						"org.eclipse.xtext.xbase.Xtype.JvmTypeReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); }
	iv_ruleQualifiedName=ruleQualifiedName
	{ $current=$iv_ruleQualifiedName.current.getText(); }
	EOF;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0());
		}
		this_ValidID_0=ruleValidID
		{
			$current.merge(this_ValidID_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1());
			}
			this_ValidID_2=ruleValidID
			{
				$current.merge(this_ValidID_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); }
	iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard
	{ $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }
	EOF;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0());
		}
		this_QualifiedName_0=ruleQualifiedName
		{
			$current.merge(this_QualifiedName_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1());
		}
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_2());
		}
	)
;

// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValidIDRule()); }
	iv_ruleValidID=ruleValidID
	{ $current=$iv_ruleValidID.current.getText(); }
	EOF;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_ID_0=RULE_ID
	{
		$current.merge(this_ID_0);
	}
	{
		newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall());
	}
;

// Entry rule entryRuleXImportDeclaration
entryRuleXImportDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXImportDeclarationRule()); }
	iv_ruleXImportDeclaration=ruleXImportDeclaration
	{ $current=$iv_ruleXImportDeclaration.current; }
	EOF;

// Rule XImportDeclaration
ruleXImportDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getXImportDeclarationAccess().getImportKeyword_0());
		}
		(
			(
				(
					(
						lv_static_1_0='static'
						{
							newLeafNode(lv_static_1_0, grammarAccess.getXImportDeclarationAccess().getStaticStaticKeyword_1_0_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXImportDeclarationRule());
							}
							setWithLastConsumed($current, "static", true, "static");
						}
					)
				)
				(
					(
						lv_extension_2_0='extension'
						{
							newLeafNode(lv_extension_2_0, grammarAccess.getXImportDeclarationAccess().getExtensionExtensionKeyword_1_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXImportDeclarationRule());
							}
							setWithLastConsumed($current, "extension", true, "extension");
						}
					)
				)?
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXImportDeclarationRule());
							}
						}
						{
							newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_0_2_0());
						}
						ruleQualifiedNameInStaticImport
						{
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						(
							lv_wildcard_4_0='*'
							{
								newLeafNode(lv_wildcard_4_0, grammarAccess.getXImportDeclarationAccess().getWildcardAsteriskKeyword_1_0_3_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getXImportDeclarationRule());
								}
								setWithLastConsumed($current, "wildcard", true, "*");
							}
						)
					)
					    |
					(
						(
							{
								newCompositeNode(grammarAccess.getXImportDeclarationAccess().getMemberNameValidIDParserRuleCall_1_0_3_1_0());
							}
							lv_memberName_5_0=ruleValidID
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getXImportDeclarationRule());
								}
								set(
									$current,
									"memberName",
									lv_memberName_5_0,
									"org.eclipse.xtext.xbase.Xtype.ValidID");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			    |
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getXImportDeclarationRule());
						}
					}
					{
						newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_1_0());
					}
					ruleQualifiedName
					{
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_2_0());
					}
					lv_importedNamespace_7_0=ruleQualifiedNameWithWildcard
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXImportDeclarationRule());
						}
						set(
							$current,
							"importedNamespace",
							lv_importedNamespace_7_0,
							"org.eclipse.xtext.xbase.Xtype.QualifiedNameWithWildcard");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_8=';'
			{
				newLeafNode(otherlv_8, grammarAccess.getXImportDeclarationAccess().getSemicolonKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleQualifiedNameInStaticImport
entryRuleQualifiedNameInStaticImport returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedNameInStaticImportRule()); }
	iv_ruleQualifiedNameInStaticImport=ruleQualifiedNameInStaticImport
	{ $current=$iv_ruleQualifiedNameInStaticImport.current.getText(); }
	EOF;

// Rule QualifiedNameInStaticImport
ruleQualifiedNameInStaticImport returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifiedNameInStaticImportAccess().getValidIDParserRuleCall_0());
		}
		this_ValidID_0=ruleValidID
		{
			$current.merge(this_ValidID_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualifiedNameInStaticImportAccess().getFullStopKeyword_1());
		}
	)+
;

RULE_INT : '0'..'9' ('0'..'9'|'_')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'?|'\'' ('\\' .|~(('\\'|'\'')))* '\''?);

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
