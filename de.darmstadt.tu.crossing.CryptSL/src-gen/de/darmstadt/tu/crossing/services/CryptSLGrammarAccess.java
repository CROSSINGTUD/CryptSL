/*
 * generated by Xtext 2.10.0
 */
package de.darmstadt.tu.crossing.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class CryptSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Domainmodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSPECKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cJavaTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cJavaTypeJvmTypeCrossReference_1_0 = (CrossReference)cJavaTypeAssignment_1.eContents().get(0);
		private final RuleCall cJavaTypeJvmTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cJavaTypeJvmTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cUSES_OBJECTSKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectObjectDeclParserRuleCall_3_0 = (RuleCall)cObjectAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFORBIDDEN_EVENTSKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMethodAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMethodForbMethodParserRuleCall_4_1_0 = (RuleCall)cMethodAssignment_4_1.eContents().get(0);
		private final Keyword cREQUIRED_EVENTSKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEventAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEventEventParserRuleCall_6_0 = (RuleCall)cEventAssignment_6.eContents().get(0);
		private final Keyword cENFORCE_ORDERKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOrderAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOrderOrderParserRuleCall_8_0 = (RuleCall)cOrderAssignment_8.eContents().get(0);
		private final Keyword cENFORCES_CONSTRAINTSKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cReqAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cReqConstraintParserRuleCall_10_0 = (RuleCall)cReqAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cENSURESKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cEnsAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cEnsPredParserRuleCall_11_1_0 = (RuleCall)cEnsAssignment_11_1.eContents().get(0);
		
		//Domainmodel:
		//	'SPEC' javaType=[jvmTypes::JvmType|QualifiedName]
		//	'USES_OBJECTS' object+=ObjectDecl+ ('FORBIDDEN_EVENTS' method+=ForbMethod+)?
		//	'REQUIRED_EVENTS' event+=Event+
		//	'ENFORCE_ORDER' order=Order
		//	'ENFORCES_CONSTRAINTS' req+=Constraint* ('ENSURES' ens+=Pred+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'SPEC' javaType=[jvmTypes::JvmType|QualifiedName] 'USES_OBJECTS' object+=ObjectDecl+ ('FORBIDDEN_EVENTS'
		//method+=ForbMethod+)? 'REQUIRED_EVENTS' event+=Event+ 'ENFORCE_ORDER' order=Order 'ENFORCES_CONSTRAINTS'
		//req+=Constraint* ('ENSURES' ens+=Pred+)?
		public Group getGroup() { return cGroup; }
		
		//'SPEC'
		public Keyword getSPECKeyword_0() { return cSPECKeyword_0; }
		
		//javaType=[jvmTypes::JvmType|QualifiedName]
		public Assignment getJavaTypeAssignment_1() { return cJavaTypeAssignment_1; }
		
		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getJavaTypeJvmTypeCrossReference_1_0() { return cJavaTypeJvmTypeCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getJavaTypeJvmTypeQualifiedNameParserRuleCall_1_0_1() { return cJavaTypeJvmTypeQualifiedNameParserRuleCall_1_0_1; }
		
		//'USES_OBJECTS'
		public Keyword getUSES_OBJECTSKeyword_2() { return cUSES_OBJECTSKeyword_2; }
		
		//object+=ObjectDecl+
		public Assignment getObjectAssignment_3() { return cObjectAssignment_3; }
		
		//ObjectDecl
		public RuleCall getObjectObjectDeclParserRuleCall_3_0() { return cObjectObjectDeclParserRuleCall_3_0; }
		
		//('FORBIDDEN_EVENTS' method+=ForbMethod+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'FORBIDDEN_EVENTS'
		public Keyword getFORBIDDEN_EVENTSKeyword_4_0() { return cFORBIDDEN_EVENTSKeyword_4_0; }
		
		//method+=ForbMethod+
		public Assignment getMethodAssignment_4_1() { return cMethodAssignment_4_1; }
		
		//ForbMethod
		public RuleCall getMethodForbMethodParserRuleCall_4_1_0() { return cMethodForbMethodParserRuleCall_4_1_0; }
		
		//'REQUIRED_EVENTS'
		public Keyword getREQUIRED_EVENTSKeyword_5() { return cREQUIRED_EVENTSKeyword_5; }
		
		//event+=Event+
		public Assignment getEventAssignment_6() { return cEventAssignment_6; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_6_0() { return cEventEventParserRuleCall_6_0; }
		
		//'ENFORCE_ORDER'
		public Keyword getENFORCE_ORDERKeyword_7() { return cENFORCE_ORDERKeyword_7; }
		
		//order=Order
		public Assignment getOrderAssignment_8() { return cOrderAssignment_8; }
		
		//Order
		public RuleCall getOrderOrderParserRuleCall_8_0() { return cOrderOrderParserRuleCall_8_0; }
		
		//'ENFORCES_CONSTRAINTS'
		public Keyword getENFORCES_CONSTRAINTSKeyword_9() { return cENFORCES_CONSTRAINTSKeyword_9; }
		
		//req+=Constraint*
		public Assignment getReqAssignment_10() { return cReqAssignment_10; }
		
		//Constraint
		public RuleCall getReqConstraintParserRuleCall_10_0() { return cReqConstraintParserRuleCall_10_0; }
		
		//('ENSURES' ens+=Pred+)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'ENSURES'
		public Keyword getENSURESKeyword_11_0() { return cENSURESKeyword_11_0; }
		
		//ens+=Pred+
		public Assignment getEnsAssignment_11_1() { return cEnsAssignment_11_1; }
		
		//Pred
		public RuleCall getEnsPredParserRuleCall_11_1_0() { return cEnsPredParserRuleCall_11_1_0; }
	}
	public class ObjectDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.ObjectDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cObjectTypeJvmTypeCrossReference_0_0 = (CrossReference)cObjectTypeAssignment_0.eContents().get(0);
		private final RuleCall cObjectTypeJvmTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cObjectTypeJvmTypeCrossReference_0_0.eContents().get(1);
		private final RuleCall cArrayBracketsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cObjectNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectNameObjectParserRuleCall_2_0 = (RuleCall)cObjectNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ObjectDecl:
		//	objectType=[jvmTypes::JvmType|QualifiedName] ArrayBrackets? objectName=Object ";";
		@Override public ParserRule getRule() { return rule; }
		
		//objectType=[jvmTypes::JvmType|QualifiedName] ArrayBrackets? objectName=Object ";"
		public Group getGroup() { return cGroup; }
		
		//objectType=[jvmTypes::JvmType|QualifiedName]
		public Assignment getObjectTypeAssignment_0() { return cObjectTypeAssignment_0; }
		
		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getObjectTypeJvmTypeCrossReference_0_0() { return cObjectTypeJvmTypeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getObjectTypeJvmTypeQualifiedNameParserRuleCall_0_0_1() { return cObjectTypeJvmTypeQualifiedNameParserRuleCall_0_0_1; }
		
		//ArrayBrackets?
		public RuleCall getArrayBracketsParserRuleCall_1() { return cArrayBracketsParserRuleCall_1; }
		
		//objectName=Object
		public Assignment getObjectNameAssignment_2() { return cObjectNameAssignment_2; }
		
		//Object
		public RuleCall getObjectNameObjectParserRuleCall_2_0() { return cObjectNameObjectParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelMethodCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAggregateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Event:
		//	LabelMethodCall | Aggregate;
		@Override public ParserRule getRule() { return rule; }
		
		//LabelMethodCall | Aggregate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LabelMethodCall
		public RuleCall getLabelMethodCallParserRuleCall_0() { return cLabelMethodCallParserRuleCall_0; }
		
		//Aggregate
		public RuleCall getAggregateParserRuleCall_1() { return cAggregateParserRuleCall_1; }
	}
	public class ForbMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.ForbMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForbMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cParametersAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final CrossReference cParametersJvmTypeCrossReference_1_2_0_0 = (CrossReference)cParametersAssignment_1_2_0.eContents().get(0);
		private final RuleCall cParametersJvmTypeQualifiedNameParserRuleCall_1_2_0_0_1 = (RuleCall)cParametersJvmTypeCrossReference_1_2_0_0.eContents().get(1);
		private final RuleCall cArrayBracketsParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_2_0 = (Keyword)cGroup_1_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final CrossReference cParametersJvmTypeCrossReference_1_2_2_1_0 = (CrossReference)cParametersAssignment_1_2_2_1.eContents().get(0);
		private final RuleCall cParametersJvmTypeQualifiedNameParserRuleCall_1_2_2_1_0_1 = (RuleCall)cParametersJvmTypeCrossReference_1_2_2_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_2_2_2 = (Keyword)cGroup_1_2_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cRepAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final CrossReference cRepEventCrossReference_1_4_1_0 = (CrossReference)cRepAssignment_1_4_1.eContents().get(0);
		private final RuleCall cRepEventIDTerminalRuleCall_1_4_1_0_1 = (RuleCall)cRepEventCrossReference_1_4_1_0.eContents().get(1);
		
		//ForbMethod:
		//	{ForbMethod} (ID "(" (parameters+=[jvmTypes::JvmType|QualifiedName] ArrayBrackets? (','
		//	parameters+=[jvmTypes::JvmType|QualifiedName] "[]"?)*)? ")" ("=>" rep=[Event])?);
		@Override public ParserRule getRule() { return rule; }
		
		//{ForbMethod} (ID "(" (parameters+=[jvmTypes::JvmType|QualifiedName] ArrayBrackets? (','
		//parameters+=[jvmTypes::JvmType|QualifiedName] "[]"?)*)? ")" ("=>" rep=[Event])?)
		public Group getGroup() { return cGroup; }
		
		//{ForbMethod}
		public Action getForbMethodAction_0() { return cForbMethodAction_0; }
		
		//(ID "(" (parameters+=[jvmTypes::JvmType|QualifiedName] ArrayBrackets? (',' parameters+=[jvmTypes::JvmType|QualifiedName]
		//"[]"?)*)? ")" ("=>" rep=[Event])?)
		public Group getGroup_1() { return cGroup_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//(parameters+=[jvmTypes::JvmType|QualifiedName] ArrayBrackets? (',' parameters+=[jvmTypes::JvmType|QualifiedName]
		//"[]"?)*)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//parameters+=[jvmTypes::JvmType|QualifiedName]
		public Assignment getParametersAssignment_1_2_0() { return cParametersAssignment_1_2_0; }
		
		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getParametersJvmTypeCrossReference_1_2_0_0() { return cParametersJvmTypeCrossReference_1_2_0_0; }
		
		//QualifiedName
		public RuleCall getParametersJvmTypeQualifiedNameParserRuleCall_1_2_0_0_1() { return cParametersJvmTypeQualifiedNameParserRuleCall_1_2_0_0_1; }
		
		//ArrayBrackets?
		public RuleCall getArrayBracketsParserRuleCall_1_2_1() { return cArrayBracketsParserRuleCall_1_2_1; }
		
		//(',' parameters+=[jvmTypes::JvmType|QualifiedName] "[]"?)*
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_2_0() { return cCommaKeyword_1_2_2_0; }
		
		//parameters+=[jvmTypes::JvmType|QualifiedName]
		public Assignment getParametersAssignment_1_2_2_1() { return cParametersAssignment_1_2_2_1; }
		
		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getParametersJvmTypeCrossReference_1_2_2_1_0() { return cParametersJvmTypeCrossReference_1_2_2_1_0; }
		
		//QualifiedName
		public RuleCall getParametersJvmTypeQualifiedNameParserRuleCall_1_2_2_1_0_1() { return cParametersJvmTypeQualifiedNameParserRuleCall_1_2_2_1_0_1; }
		
		//"[]"?
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_2_2_2() { return cLeftSquareBracketRightSquareBracketKeyword_1_2_2_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//("=>" rep=[Event])?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_4_0() { return cEqualsSignGreaterThanSignKeyword_1_4_0; }
		
		//rep=[Event]
		public Assignment getRepAssignment_1_4_1() { return cRepAssignment_1_4_1; }
		
		//[Event]
		public CrossReference getRepEventCrossReference_1_4_1_0() { return cRepEventCrossReference_1_4_1_0; }
		
		//ID
		public RuleCall getRepEventIDTerminalRuleCall_1_4_1_0_1() { return cRepEventIDTerminalRuleCall_1_4_1_0_1; }
	}
	public class LabelMethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.LabelMethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethMethodParserRuleCall_2_0 = (RuleCall)cMethAssignment_2.eContents().get(0);
		
		//LabelMethodCall:
		//	name=ID ":" meth=Method;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ":" meth=Method
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//meth=Method
		public Assignment getMethAssignment_2() { return cMethAssignment_2; }
		
		//Method
		public RuleCall getMethMethodParserRuleCall_2_0() { return cMethMethodParserRuleCall_2_0; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLeftSideAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cLeftSideObjectCrossReference_0_0_0 = (CrossReference)cLeftSideAssignment_0_0.eContents().get(0);
		private final RuleCall cLeftSideObjectIDTerminalRuleCall_0_0_0_1 = (RuleCall)cLeftSideObjectCrossReference_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cMethNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethNameIDTerminalRuleCall_1_0 = (RuleCall)cMethNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParListParListParserRuleCall_3_0 = (RuleCall)cParListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Method:
		//	(leftSide=[Object] "=")? methName=ID "(" parList=ParList? ");";
		@Override public ParserRule getRule() { return rule; }
		
		//(leftSide=[Object] "=")? methName=ID "(" parList=ParList? ");"
		public Group getGroup() { return cGroup; }
		
		//(leftSide=[Object] "=")?
		public Group getGroup_0() { return cGroup_0; }
		
		//leftSide=[Object]
		public Assignment getLeftSideAssignment_0_0() { return cLeftSideAssignment_0_0; }
		
		//[Object]
		public CrossReference getLeftSideObjectCrossReference_0_0_0() { return cLeftSideObjectCrossReference_0_0_0; }
		
		//ID
		public RuleCall getLeftSideObjectIDTerminalRuleCall_0_0_0_1() { return cLeftSideObjectIDTerminalRuleCall_0_0_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//methName=ID
		public Assignment getMethNameAssignment_1() { return cMethNameAssignment_1; }
		
		//ID
		public RuleCall getMethNameIDTerminalRuleCall_1_0() { return cMethNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parList=ParList?
		public Assignment getParListAssignment_3() { return cParListAssignment_3; }
		
		//ParList
		public RuleCall getParListParListParserRuleCall_3_0() { return cParListParListParserRuleCall_3_0; }
		
		//");"
		public Keyword getRightParenthesisSemicolonKeyword_4() { return cRightParenthesisSemicolonKeyword_4; }
	}
	public class ParListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.ParList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersParParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//ParList:
		//	parameters+=Par (',' parameters+=Par)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=Par (',' parameters+=Par)*
		public Group getGroup() { return cGroup; }
		
		//parameters+=Par
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//Par
		public RuleCall getParametersParParserRuleCall_0_0() { return cParametersParParserRuleCall_0_0; }
		
		//(',' parameters+=Par)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameters+=Par
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//Par
		public RuleCall getParametersParParserRuleCall_1_1_0() { return cParametersParParserRuleCall_1_1_0; }
	}
	public class ParElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Par");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cValObjectCrossReference_1_0_0 = (CrossReference)cValAssignment_1_0.eContents().get(0);
		private final RuleCall cValObjectIDTerminalRuleCall_1_0_0_1 = (RuleCall)cValObjectCrossReference_1_0_0.eContents().get(1);
		private final Keyword c_Keyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Par:
		//	{Par} (val=[Object] | '_');
		@Override public ParserRule getRule() { return rule; }
		
		//{Par} (val=[Object] | '_')
		public Group getGroup() { return cGroup; }
		
		//{Par}
		public Action getParAction_0() { return cParAction_0; }
		
		//(val=[Object] | '_')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//val=[Object]
		public Assignment getValAssignment_1_0() { return cValAssignment_1_0; }
		
		//[Object]
		public CrossReference getValObjectCrossReference_1_0_0() { return cValObjectCrossReference_1_0_0; }
		
		//ID
		public RuleCall getValObjectIDTerminalRuleCall_1_0_0_1() { return cValObjectIDTerminalRuleCall_1_0_0_1; }
		
		//'_'
		public Keyword get_Keyword_1_1() { return c_Keyword_1_1; }
	}
	public class AggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Aggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLabAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cLabEventCrossReference_2_0_0 = (CrossReference)cLabAssignment_2_0.eContents().get(0);
		private final RuleCall cLabEventIDTerminalRuleCall_2_0_0_1 = (RuleCall)cLabEventCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cLabAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cLabEventCrossReference_2_1_1_0 = (CrossReference)cLabAssignment_2_1_1.eContents().get(0);
		private final RuleCall cLabEventIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cLabEventCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Aggregate:
		//	name=ID ':=' (lab+=[Event] (',' lab+=[Event])*) ";";
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ':=' (lab+=[Event] (',' lab+=[Event])*) ";"
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//(lab+=[Event] (',' lab+=[Event])*)
		public Group getGroup_2() { return cGroup_2; }
		
		//lab+=[Event]
		public Assignment getLabAssignment_2_0() { return cLabAssignment_2_0; }
		
		//[Event]
		public CrossReference getLabEventCrossReference_2_0_0() { return cLabEventCrossReference_2_0_0; }
		
		//ID
		public RuleCall getLabEventIDTerminalRuleCall_2_0_0_1() { return cLabEventIDTerminalRuleCall_2_0_0_1; }
		
		//(',' lab+=[Event])*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//lab+=[Event]
		public Assignment getLabAssignment_2_1_1() { return cLabAssignment_2_1_1; }
		
		//[Event]
		public CrossReference getLabEventCrossReference_2_1_1_0() { return cLabEventCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getLabEventIDTerminalRuleCall_2_1_1_0_1() { return cLabEventIDTerminalRuleCall_2_1_1_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class OrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Order");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleOrderParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrderLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSimpleOrderParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Order Expression:
		//	SimpleOrder ({Order.left=current} ',' right=SimpleOrder)*
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleOrder ({Order.left=current} ',' right=SimpleOrder)*
		public Group getGroup() { return cGroup; }
		
		//SimpleOrder
		public RuleCall getSimpleOrderParserRuleCall_0() { return cSimpleOrderParserRuleCall_0; }
		
		//({Order.left=current} ',' right=SimpleOrder)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Order.left=current}
		public Action getOrderLeftAction_1_0() { return cOrderLeftAction_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//right=SimpleOrder
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//SimpleOrder
		public RuleCall getRightSimpleOrderParserRuleCall_1_2_0() { return cRightSimpleOrderParserRuleCall_1_2_0; }
	}
	public class SimpleOrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.SimpleOrder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSimpleOrderLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SimpleOrder Expression:
		//	Primary ({SimpleOrder.left=current} '|' right=Primary)*
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({SimpleOrder.left=current} '|' right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({SimpleOrder.left=current} '|' right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SimpleOrder.left=current}
		public Action getSimpleOrderLeftAction_1_0() { return cSimpleOrderLeftAction_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOrderEvAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cOrderEvEventCrossReference_0_0_0 = (CrossReference)cOrderEvAssignment_0_0.eContents().get(0);
		private final RuleCall cOrderEvEventIDTerminalRuleCall_0_0_0_1 = (RuleCall)cOrderEvEventCrossReference_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cPlusSignKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_0_1_2 = (Keyword)cAlternatives_0_1.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOrderParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Keyword cPlusSignKeyword_1_3_0 = (Keyword)cAlternatives_1_3.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_3_1 = (Keyword)cAlternatives_1_3.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_3_2 = (Keyword)cAlternatives_1_3.eContents().get(2);
		
		//Primary Expression:
		//	orderEv+=[Event] ('+' | '?' | '*')? | '(' Order ')' ('+' | '?' | '*')?
		@Override public ParserRule getRule() { return rule; }
		
		//orderEv+=[Event] ('+' | '?' | '*')? | '(' Order ')' ('+' | '?' | '*')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//orderEv+=[Event] ('+' | '?' | '*')?
		public Group getGroup_0() { return cGroup_0; }
		
		//orderEv+=[Event]
		public Assignment getOrderEvAssignment_0_0() { return cOrderEvAssignment_0_0; }
		
		//[Event]
		public CrossReference getOrderEvEventCrossReference_0_0_0() { return cOrderEvEventCrossReference_0_0_0; }
		
		//ID
		public RuleCall getOrderEvEventIDTerminalRuleCall_0_0_0_1() { return cOrderEvEventIDTerminalRuleCall_0_0_0_1; }
		
		//('+' | '?' | '*')?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_1_0() { return cPlusSignKeyword_0_1_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_0_1_1() { return cQuestionMarkKeyword_0_1_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_1_2() { return cAsteriskKeyword_0_1_2; }
		
		//'(' Order ')' ('+' | '?' | '*')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Order
		public RuleCall getOrderParserRuleCall_1_1() { return cOrderParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//('+' | '?' | '*')?
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_3_0() { return cPlusSignKeyword_1_3_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_3_1() { return cQuestionMarkKeyword_1_3_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_3_2() { return cAsteriskKeyword_1_3_2; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Constraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConsCompParserRuleCall_0_0 = (RuleCall)cConsAssignment_0.eContents().get(0);
		private final Assignment cConsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConsInclParserRuleCall_1_0 = (RuleCall)cConsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cConsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cConsPredParserRuleCall_2_1_0 = (RuleCall)cConsAssignment_2_1.eContents().get(0);
		
		//Constraint:
		//	cons+=Comp | cons+=Incl | '!'? cons+=Pred;
		@Override public ParserRule getRule() { return rule; }
		
		//cons+=Comp | cons+=Incl | '!'? cons+=Pred
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//cons+=Comp
		public Assignment getConsAssignment_0() { return cConsAssignment_0; }
		
		//Comp
		public RuleCall getConsCompParserRuleCall_0_0() { return cConsCompParserRuleCall_0_0; }
		
		//cons+=Incl
		public Assignment getConsAssignment_1() { return cConsAssignment_1; }
		
		//Incl
		public RuleCall getConsInclParserRuleCall_1_0() { return cConsInclParserRuleCall_1_0; }
		
		//'!'? cons+=Pred
		public Group getGroup_2() { return cGroup_2; }
		
		//'!'?
		public Keyword getExclamationMarkKeyword_2_0() { return cExclamationMarkKeyword_2_0; }
		
		//cons+=Pred
		public Assignment getConsAssignment_2_1() { return cConsAssignment_2_1; }
		
		//Pred
		public RuleCall getConsPredParserRuleCall_2_1_0() { return cConsPredParserRuleCall_2_1_0; }
	}
	public class InclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Incl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAlglAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAlglConsListParserRuleCall_0_0 = (RuleCall)cAlglAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAlgrAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAlgrConsListParserRuleCall_1_1_0 = (RuleCall)cAlgrAssignment_1_1.eContents().get(0);
		
		//Incl Constraint:
		//	algl=ConsList ("=>" algr=ConsList)?
		@Override public ParserRule getRule() { return rule; }
		
		//algl=ConsList ("=>" algr=ConsList)?
		public Group getGroup() { return cGroup; }
		
		//algl=ConsList
		public Assignment getAlglAssignment_0() { return cAlglAssignment_0; }
		
		//ConsList
		public RuleCall getAlglConsListParserRuleCall_0_0() { return cAlglConsListParserRuleCall_0_0; }
		
		//("=>" algr=ConsList)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_0() { return cEqualsSignGreaterThanSignKeyword_1_0; }
		
		//algr=ConsList
		public Assignment getAlgrAssignment_1_1() { return cAlgrAssignment_1_1; }
		
		//ConsList
		public RuleCall getAlgrConsListParserRuleCall_1_1_0() { return cAlgrConsListParserRuleCall_1_1_0; }
	}
	public class ConsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.ConsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cListConsParserRuleCall_0_0 = (RuleCall)cListAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLogConParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cListConsParserRuleCall_1_1_0 = (RuleCall)cListAssignment_1_1.eContents().get(0);
		
		//ConsList:
		//	list+=Cons (LogCon list+=Cons)*;
		@Override public ParserRule getRule() { return rule; }
		
		//list+=Cons (LogCon list+=Cons)*
		public Group getGroup() { return cGroup; }
		
		//list+=Cons
		public Assignment getListAssignment_0() { return cListAssignment_0; }
		
		//Cons
		public RuleCall getListConsParserRuleCall_0_0() { return cListConsParserRuleCall_0_0; }
		
		//(LogCon list+=Cons)*
		public Group getGroup_1() { return cGroup_1; }
		
		//LogCon
		public RuleCall getLogConParserRuleCall_1_0() { return cLogConParserRuleCall_1_0; }
		
		//list+=Cons
		public Assignment getListAssignment_1_1() { return cListAssignment_1_1; }
		
		//Cons
		public RuleCall getListConsParserRuleCall_1_1_0() { return cListConsParserRuleCall_1_1_0; }
	}
	public class LogConElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.LogCon");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpAndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOpOrParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LogCon:
		//	OpAnd | OpOr;
		@Override public ParserRule getRule() { return rule; }
		
		//OpAnd | OpOr
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OpAnd
		public RuleCall getOpAndParserRuleCall_0() { return cOpAndParserRuleCall_0; }
		
		//OpOr
		public RuleCall getOpOrParserRuleCall_1() { return cOpOrParserRuleCall_1; }
	}
	public class ConsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Cons");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cConsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cConsConsPredParserRuleCall_0_0_0 = (RuleCall)cConsAssignment_0_0.eContents().get(0);
		private final Keyword cInKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cLitsleftAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cLitsleftLitListParserRuleCall_0_3_0 = (RuleCall)cLitsleftAssignment_0_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final RuleCall cNoEqParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Cons:
		//	cons=ConsPred "in" "{" litsleft=LitList "}" | NoEq;
		@Override public ParserRule getRule() { return rule; }
		
		//cons=ConsPred "in" "{" litsleft=LitList "}" | NoEq
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//cons=ConsPred "in" "{" litsleft=LitList "}"
		public Group getGroup_0() { return cGroup_0; }
		
		//cons=ConsPred
		public Assignment getConsAssignment_0_0() { return cConsAssignment_0_0; }
		
		//ConsPred
		public RuleCall getConsConsPredParserRuleCall_0_0_0() { return cConsConsPredParserRuleCall_0_0_0; }
		
		//"in"
		public Keyword getInKeyword_0_1() { return cInKeyword_0_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//litsleft=LitList
		public Assignment getLitsleftAssignment_0_3() { return cLitsleftAssignment_0_3; }
		
		//LitList
		public RuleCall getLitsleftLitListParserRuleCall_0_3_0() { return cLitsleftLitListParserRuleCall_0_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }
		
		//NoEq
		public RuleCall getNoEqParserRuleCall_1() { return cNoEqParserRuleCall_1; }
	}
	public class NoEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.NoEq");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLeftAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLeftObAcParserRuleCall_0_0_0 = (RuleCall)cLeftAssignment_0_0.eContents().get(0);
		private final RuleCall cNoEqOpParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Assignment cRightAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRightObAcParserRuleCall_0_2_0 = (RuleCall)cRightAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLeftAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLeftObAcParserRuleCall_1_0_0 = (RuleCall)cLeftAssignment_1_0.eContents().get(0);
		private final RuleCall cNoEqOpParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_2 = (Alternatives)cGroup_1.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cAlternatives_1_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_2_1 = (RuleCall)cAlternatives_1_2.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cAlternatives_2_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2_0_1 = (RuleCall)cAlternatives_2_0.eContents().get(1);
		private final RuleCall cNoEqOpParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Assignment cRightAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRightObAcParserRuleCall_2_2_0 = (RuleCall)cRightAssignment_2_2.eContents().get(0);
		
		//NoEq:
		//	left=ObAc NoEqOp right=ObAc | left=ObAc NoEqOp (STRING | INT) | (STRING | INT) NoEqOp right=ObAc;
		@Override public ParserRule getRule() { return rule; }
		
		//left=ObAc NoEqOp right=ObAc | left=ObAc NoEqOp (STRING | INT) | (STRING | INT) NoEqOp right=ObAc
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//left=ObAc NoEqOp right=ObAc
		public Group getGroup_0() { return cGroup_0; }
		
		//left=ObAc
		public Assignment getLeftAssignment_0_0() { return cLeftAssignment_0_0; }
		
		//ObAc
		public RuleCall getLeftObAcParserRuleCall_0_0_0() { return cLeftObAcParserRuleCall_0_0_0; }
		
		//NoEqOp
		public RuleCall getNoEqOpParserRuleCall_0_1() { return cNoEqOpParserRuleCall_0_1; }
		
		//right=ObAc
		public Assignment getRightAssignment_0_2() { return cRightAssignment_0_2; }
		
		//ObAc
		public RuleCall getRightObAcParserRuleCall_0_2_0() { return cRightObAcParserRuleCall_0_2_0; }
		
		//left=ObAc NoEqOp (STRING | INT)
		public Group getGroup_1() { return cGroup_1; }
		
		//left=ObAc
		public Assignment getLeftAssignment_1_0() { return cLeftAssignment_1_0; }
		
		//ObAc
		public RuleCall getLeftObAcParserRuleCall_1_0_0() { return cLeftObAcParserRuleCall_1_0_0; }
		
		//NoEqOp
		public RuleCall getNoEqOpParserRuleCall_1_1() { return cNoEqOpParserRuleCall_1_1; }
		
		//(STRING | INT)
		public Alternatives getAlternatives_1_2() { return cAlternatives_1_2; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_2_0() { return cSTRINGTerminalRuleCall_1_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2_1() { return cINTTerminalRuleCall_1_2_1; }
		
		//(STRING | INT) NoEqOp right=ObAc
		public Group getGroup_2() { return cGroup_2; }
		
		//(STRING | INT)
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2_0_0() { return cSTRINGTerminalRuleCall_2_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2_0_1() { return cINTTerminalRuleCall_2_0_1; }
		
		//NoEqOp
		public RuleCall getNoEqOpParserRuleCall_2_1() { return cNoEqOpParserRuleCall_2_1; }
		
		//right=ObAc
		public Assignment getRightAssignment_2_2() { return cRightAssignment_2_2; }
		
		//ObAc
		public RuleCall getRightObAcParserRuleCall_2_2_0() { return cRightObAcParserRuleCall_2_2_0; }
	}
	public class NoEqOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.NoEqOp");
		private final Keyword cExclamationMarkEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//NoEqOp:
		//	'!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword() { return cExclamationMarkEqualsSignKeyword; }
	}
	public class ConsPredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.ConsPred");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cPartKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cOfKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameObjectCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameObjectIDTerminalRuleCall_1_0_1 = (RuleCall)cNameObjectCrossReference_1_0.eContents().get(1);
		
		//ConsPred:
		//	("part(" INT "," STRING ")" "of")? name=[Object];
		@Override public ParserRule getRule() { return rule; }
		
		//("part(" INT "," STRING ")" "of")? name=[Object]
		public Group getGroup() { return cGroup; }
		
		//("part(" INT "," STRING ")" "of")?
		public Group getGroup_0() { return cGroup_0; }
		
		//"part("
		public Keyword getPartKeyword_0_0() { return cPartKeyword_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }
		
		//","
		public Keyword getCommaKeyword_0_2() { return cCommaKeyword_0_2; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_3() { return cSTRINGTerminalRuleCall_0_3; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//"of"
		public Keyword getOfKeyword_0_5() { return cOfKeyword_0_5; }
		
		//name=[Object]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[Object]
		public CrossReference getNameObjectCrossReference_1_0() { return cNameObjectCrossReference_1_0; }
		
		//ID
		public RuleCall getNameObjectIDTerminalRuleCall_1_0_1() { return cNameObjectIDTerminalRuleCall_1_0_1; }
	}
	public class LitListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.LitList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersXLiteralParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cParametersAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cParametersXLiteralParserRuleCall_1_1_0_0 = (RuleCall)cParametersAssignment_1_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		
		//LitList:
		//	parameters+=XLiteral (',' (parameters+=XLiteral | '...'))*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=XLiteral (',' (parameters+=XLiteral | '...'))*
		public Group getGroup() { return cGroup; }
		
		//parameters+=XLiteral
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//XLiteral
		public RuleCall getParametersXLiteralParserRuleCall_0_0() { return cParametersXLiteralParserRuleCall_0_0; }
		
		//(',' (parameters+=XLiteral | '...'))*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//(parameters+=XLiteral | '...')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//parameters+=XLiteral
		public Assignment getParametersAssignment_1_1_0() { return cParametersAssignment_1_1_0; }
		
		//XLiteral
		public RuleCall getParametersXLiteralParserRuleCall_1_1_0_0() { return cParametersXLiteralParserRuleCall_1_1_0_0; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_1_1_1() { return cFullStopFullStopFullStopKeyword_1_1_1; }
	}
	public class PredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Pred");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLeftSideAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cLeftSideObjectCrossReference_0_0_0 = (CrossReference)cLeftSideAssignment_0_0.eContents().get(0);
		private final RuleCall cLeftSideObjectIDTerminalRuleCall_0_0_0_1 = (RuleCall)cLeftSideObjectCrossReference_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cPredNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPredNameIDTerminalRuleCall_1_0 = (RuleCall)cPredNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParListParListParserRuleCall_3_0 = (RuleCall)cParListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Pred Constraint:
		//	(leftSide=[Object] "=")? predName=ID "(" parList=ParList? ");"
		@Override public ParserRule getRule() { return rule; }
		
		//(leftSide=[Object] "=")? predName=ID "(" parList=ParList? ");"
		public Group getGroup() { return cGroup; }
		
		//(leftSide=[Object] "=")?
		public Group getGroup_0() { return cGroup_0; }
		
		//leftSide=[Object]
		public Assignment getLeftSideAssignment_0_0() { return cLeftSideAssignment_0_0; }
		
		//[Object]
		public CrossReference getLeftSideObjectCrossReference_0_0_0() { return cLeftSideObjectCrossReference_0_0_0; }
		
		//ID
		public RuleCall getLeftSideObjectIDTerminalRuleCall_0_0_0_1() { return cLeftSideObjectIDTerminalRuleCall_0_0_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//predName=ID
		public Assignment getPredNameAssignment_1() { return cPredNameAssignment_1; }
		
		//ID
		public RuleCall getPredNameIDTerminalRuleCall_1_0() { return cPredNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parList=ParList?
		public Assignment getParListAssignment_3() { return cParListAssignment_3; }
		
		//ParList
		public RuleCall getParListParListParserRuleCall_3_0() { return cParListParListParserRuleCall_3_0; }
		
		//");"
		public Keyword getRightParenthesisSemicolonKeyword_4() { return cRightParenthesisSemicolonKeyword_4; }
	}
	public class CompElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Comp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cLeftAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final RuleCall cLeftObAcParserRuleCall_0_0_0_0 = (RuleCall)cLeftAssignment_0_0_0.eContents().get(0);
		private final RuleCall cOpCompareParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Assignment cRightAssignment_0_0_2 = (Assignment)cGroup_0_0.eContents().get(2);
		private final RuleCall cRightObAcParserRuleCall_0_0_2_0 = (RuleCall)cRightAssignment_0_0_2.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cLeftAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cLeftObAcParserRuleCall_0_1_0_0 = (RuleCall)cLeftAssignment_0_1_0.eContents().get(0);
		private final RuleCall cOpCompareParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Alternatives cAlternatives_0_1_2 = (Alternatives)cGroup_0_1.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_0_1_2_0 = (RuleCall)cAlternatives_0_1_2.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1_2_1 = (RuleCall)cAlternatives_0_1_2.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Alternatives cAlternatives_0_2_0 = (Alternatives)cGroup_0_2.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_0_2_0_0 = (RuleCall)cAlternatives_0_2_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_2_0_1 = (RuleCall)cAlternatives_0_2_0.eContents().get(1);
		private final RuleCall cOpCompareParserRuleCall_0_2_1 = (RuleCall)cGroup_0_2.eContents().get(1);
		private final Assignment cRightAssignment_0_2_2 = (Assignment)cGroup_0_2.eContents().get(2);
		private final RuleCall cRightObAcParserRuleCall_0_2_2_0 = (RuleCall)cRightAssignment_0_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Comp Constraint:
		//	(left=ObAc OpCompare right=ObAc | left=ObAc OpCompare (STRING | INT) | (STRING | INT) OpCompare right=ObAc) ";"
		@Override public ParserRule getRule() { return rule; }
		
		//(left=ObAc OpCompare right=ObAc | left=ObAc OpCompare (STRING | INT) | (STRING | INT) OpCompare right=ObAc) ";"
		public Group getGroup() { return cGroup; }
		
		//(left=ObAc OpCompare right=ObAc | left=ObAc OpCompare (STRING | INT) | (STRING | INT) OpCompare right=ObAc)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//left=ObAc OpCompare right=ObAc
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//left=ObAc
		public Assignment getLeftAssignment_0_0_0() { return cLeftAssignment_0_0_0; }
		
		//ObAc
		public RuleCall getLeftObAcParserRuleCall_0_0_0_0() { return cLeftObAcParserRuleCall_0_0_0_0; }
		
		//OpCompare
		public RuleCall getOpCompareParserRuleCall_0_0_1() { return cOpCompareParserRuleCall_0_0_1; }
		
		//right=ObAc
		public Assignment getRightAssignment_0_0_2() { return cRightAssignment_0_0_2; }
		
		//ObAc
		public RuleCall getRightObAcParserRuleCall_0_0_2_0() { return cRightObAcParserRuleCall_0_0_2_0; }
		
		//left=ObAc OpCompare (STRING | INT)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//left=ObAc
		public Assignment getLeftAssignment_0_1_0() { return cLeftAssignment_0_1_0; }
		
		//ObAc
		public RuleCall getLeftObAcParserRuleCall_0_1_0_0() { return cLeftObAcParserRuleCall_0_1_0_0; }
		
		//OpCompare
		public RuleCall getOpCompareParserRuleCall_0_1_1() { return cOpCompareParserRuleCall_0_1_1; }
		
		//(STRING | INT)
		public Alternatives getAlternatives_0_1_2() { return cAlternatives_0_1_2; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_1_2_0() { return cSTRINGTerminalRuleCall_0_1_2_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1_2_1() { return cINTTerminalRuleCall_0_1_2_1; }
		
		//(STRING | INT) OpCompare right=ObAc
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//(STRING | INT)
		public Alternatives getAlternatives_0_2_0() { return cAlternatives_0_2_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_2_0_0() { return cSTRINGTerminalRuleCall_0_2_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_2_0_1() { return cINTTerminalRuleCall_0_2_0_1; }
		
		//OpCompare
		public RuleCall getOpCompareParserRuleCall_0_2_1() { return cOpCompareParserRuleCall_0_2_1; }
		
		//right=ObAc
		public Assignment getRightAssignment_0_2_2() { return cRightAssignment_0_2_2; }
		
		//ObAc
		public RuleCall getRightObAcParserRuleCall_0_2_2_0() { return cRightObAcParserRuleCall_0_2_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ObAcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.ObAc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameObjectCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameObjectIDTerminalRuleCall_0_0_1 = (RuleCall)cNameObjectCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ObAc:
		//	name=[Object] ("." ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Object] ("." ID)?
		public Group getGroup() { return cGroup; }
		
		//name=[Object]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Object]
		public CrossReference getNameObjectCrossReference_0_0() { return cNameObjectCrossReference_0_0; }
		
		//ID
		public RuleCall getNameObjectIDTerminalRuleCall_0_0_1() { return cNameObjectIDTerminalRuleCall_0_0_1; }
		
		//("." ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Object:
		//	{Object} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object} name=ID
		public Group getGroup() { return cGroup; }
		
		//{Object}
		public Action getObjectAction_0() { return cObjectAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final ObjectDeclElements pObjectDecl;
	private final EventElements pEvent;
	private final ForbMethodElements pForbMethod;
	private final LabelMethodCallElements pLabelMethodCall;
	private final MethodElements pMethod;
	private final ParListElements pParList;
	private final ParElements pPar;
	private final AggregateElements pAggregate;
	private final OrderElements pOrder;
	private final SimpleOrderElements pSimpleOrder;
	private final PrimaryElements pPrimary;
	private final ConstraintElements pConstraint;
	private final InclElements pIncl;
	private final ConsListElements pConsList;
	private final LogConElements pLogCon;
	private final ConsElements pCons;
	private final NoEqElements pNoEq;
	private final NoEqOpElements pNoEqOp;
	private final ConsPredElements pConsPred;
	private final LitListElements pLitList;
	private final PredElements pPred;
	private final CompElements pComp;
	private final ObAcElements pObAc;
	private final ObjectElements pObject;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public CryptSLGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pDomainmodel = new DomainmodelElements();
		this.pObjectDecl = new ObjectDeclElements();
		this.pEvent = new EventElements();
		this.pForbMethod = new ForbMethodElements();
		this.pLabelMethodCall = new LabelMethodCallElements();
		this.pMethod = new MethodElements();
		this.pParList = new ParListElements();
		this.pPar = new ParElements();
		this.pAggregate = new AggregateElements();
		this.pOrder = new OrderElements();
		this.pSimpleOrder = new SimpleOrderElements();
		this.pPrimary = new PrimaryElements();
		this.pConstraint = new ConstraintElements();
		this.pIncl = new InclElements();
		this.pConsList = new ConsListElements();
		this.pLogCon = new LogConElements();
		this.pCons = new ConsElements();
		this.pNoEq = new NoEqElements();
		this.pNoEqOp = new NoEqOpElements();
		this.pConsPred = new ConsPredElements();
		this.pLitList = new LitListElements();
		this.pPred = new PredElements();
		this.pComp = new CompElements();
		this.pObAc = new ObAcElements();
		this.pObject = new ObjectElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.darmstadt.tu.crossing.CryptSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Domainmodel:
	//	'SPEC' javaType=[jvmTypes::JvmType|QualifiedName]
	//	'USES_OBJECTS' object+=ObjectDecl+ ('FORBIDDEN_EVENTS' method+=ForbMethod+)?
	//	'REQUIRED_EVENTS' event+=Event+
	//	'ENFORCE_ORDER' order=Order
	//	'ENFORCES_CONSTRAINTS' req+=Constraint* ('ENSURES' ens+=Pred+)?;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}
	
	//ObjectDecl:
	//	objectType=[jvmTypes::JvmType|QualifiedName] ArrayBrackets? objectName=Object ";";
	public ObjectDeclElements getObjectDeclAccess() {
		return pObjectDecl;
	}
	
	public ParserRule getObjectDeclRule() {
		return getObjectDeclAccess().getRule();
	}
	
	//Event:
	//	LabelMethodCall | Aggregate;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//ForbMethod:
	//	{ForbMethod} (ID "(" (parameters+=[jvmTypes::JvmType|QualifiedName] ArrayBrackets? (','
	//	parameters+=[jvmTypes::JvmType|QualifiedName] "[]"?)*)? ")" ("=>" rep=[Event])?);
	public ForbMethodElements getForbMethodAccess() {
		return pForbMethod;
	}
	
	public ParserRule getForbMethodRule() {
		return getForbMethodAccess().getRule();
	}
	
	//LabelMethodCall:
	//	name=ID ":" meth=Method;
	public LabelMethodCallElements getLabelMethodCallAccess() {
		return pLabelMethodCall;
	}
	
	public ParserRule getLabelMethodCallRule() {
		return getLabelMethodCallAccess().getRule();
	}
	
	//Method:
	//	(leftSide=[Object] "=")? methName=ID "(" parList=ParList? ");";
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//ParList:
	//	parameters+=Par (',' parameters+=Par)*;
	public ParListElements getParListAccess() {
		return pParList;
	}
	
	public ParserRule getParListRule() {
		return getParListAccess().getRule();
	}
	
	//Par:
	//	{Par} (val=[Object] | '_');
	public ParElements getParAccess() {
		return pPar;
	}
	
	public ParserRule getParRule() {
		return getParAccess().getRule();
	}
	
	//Aggregate:
	//	name=ID ':=' (lab+=[Event] (',' lab+=[Event])*) ";";
	public AggregateElements getAggregateAccess() {
		return pAggregate;
	}
	
	public ParserRule getAggregateRule() {
		return getAggregateAccess().getRule();
	}
	
	//Order Expression:
	//	SimpleOrder ({Order.left=current} ',' right=SimpleOrder)*
	public OrderElements getOrderAccess() {
		return pOrder;
	}
	
	public ParserRule getOrderRule() {
		return getOrderAccess().getRule();
	}
	
	//SimpleOrder Expression:
	//	Primary ({SimpleOrder.left=current} '|' right=Primary)*
	public SimpleOrderElements getSimpleOrderAccess() {
		return pSimpleOrder;
	}
	
	public ParserRule getSimpleOrderRule() {
		return getSimpleOrderAccess().getRule();
	}
	
	//Primary Expression:
	//	orderEv+=[Event] ('+' | '?' | '*')? | '(' Order ')' ('+' | '?' | '*')?
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//Constraint:
	//	cons+=Comp | cons+=Incl | '!'? cons+=Pred;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//Incl Constraint:
	//	algl=ConsList ("=>" algr=ConsList)?
	public InclElements getInclAccess() {
		return pIncl;
	}
	
	public ParserRule getInclRule() {
		return getInclAccess().getRule();
	}
	
	//ConsList:
	//	list+=Cons (LogCon list+=Cons)*;
	public ConsListElements getConsListAccess() {
		return pConsList;
	}
	
	public ParserRule getConsListRule() {
		return getConsListAccess().getRule();
	}
	
	//LogCon:
	//	OpAnd | OpOr;
	public LogConElements getLogConAccess() {
		return pLogCon;
	}
	
	public ParserRule getLogConRule() {
		return getLogConAccess().getRule();
	}
	
	//Cons:
	//	cons=ConsPred "in" "{" litsleft=LitList "}" | NoEq;
	public ConsElements getConsAccess() {
		return pCons;
	}
	
	public ParserRule getConsRule() {
		return getConsAccess().getRule();
	}
	
	//NoEq:
	//	left=ObAc NoEqOp right=ObAc | left=ObAc NoEqOp (STRING | INT) | (STRING | INT) NoEqOp right=ObAc;
	public NoEqElements getNoEqAccess() {
		return pNoEq;
	}
	
	public ParserRule getNoEqRule() {
		return getNoEqAccess().getRule();
	}
	
	//NoEqOp:
	//	'!=';
	public NoEqOpElements getNoEqOpAccess() {
		return pNoEqOp;
	}
	
	public ParserRule getNoEqOpRule() {
		return getNoEqOpAccess().getRule();
	}
	
	//ConsPred:
	//	("part(" INT "," STRING ")" "of")? name=[Object];
	public ConsPredElements getConsPredAccess() {
		return pConsPred;
	}
	
	public ParserRule getConsPredRule() {
		return getConsPredAccess().getRule();
	}
	
	//LitList:
	//	parameters+=XLiteral (',' (parameters+=XLiteral | '...'))*;
	public LitListElements getLitListAccess() {
		return pLitList;
	}
	
	public ParserRule getLitListRule() {
		return getLitListAccess().getRule();
	}
	
	//Pred Constraint:
	//	(leftSide=[Object] "=")? predName=ID "(" parList=ParList? ");"
	public PredElements getPredAccess() {
		return pPred;
	}
	
	public ParserRule getPredRule() {
		return getPredAccess().getRule();
	}
	
	//Comp Constraint:
	//	(left=ObAc OpCompare right=ObAc | left=ObAc OpCompare (STRING | INT) | (STRING | INT) OpCompare right=ObAc) ";"
	public CompElements getCompAccess() {
		return pComp;
	}
	
	public ParserRule getCompRule() {
		return getCompAccess().getRule();
	}
	
	//ObAc:
	//	name=[Object] ("." ID)?;
	public ObAcElements getObAcAccess() {
		return pObAc;
	}
	
	public ParserRule getObAcRule() {
		return getObAcAccess().getRule();
	}
	
	//Object:
	//	{Object} name=ID;
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
