/*
 * generated by Xtext 2.10.0
 */
package de.darmstadt.tu.crossing.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class CryptSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Domainmodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSPECKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cJavaTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cJavaTypeJvmTypeCrossReference_1_0 = (CrossReference)cJavaTypeAssignment_1.eContents().get(0);
		private final RuleCall cJavaTypeJvmTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cJavaTypeJvmTypeCrossReference_1_0.eContents().get(1);
		private final Keyword cUSES_OBJECTSKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cObjectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cObjectObjectDeclParserRuleCall_3_0 = (RuleCall)cObjectAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFORBIDDEN_EVENTSKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMethodAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMethodForbMethodParserRuleCall_4_1_0 = (RuleCall)cMethodAssignment_4_1.eContents().get(0);
		private final Keyword cREQUIRED_EVENTSKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEventAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEventEventParserRuleCall_6_0 = (RuleCall)cEventAssignment_6.eContents().get(0);
		private final Keyword cENFORCE_ORDERKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cOrderAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cOrderOrderParserRuleCall_8_0 = (RuleCall)cOrderAssignment_8.eContents().get(0);
		private final Keyword cENFORCES_CONSTRAINTSKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cReqAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cReqConstraintParserRuleCall_10_0 = (RuleCall)cReqAssignment_10.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cENSURESKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cEnsAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cEnsPredParserRuleCall_11_1_0 = (RuleCall)cEnsAssignment_11_1.eContents().get(0);
		
		//Domainmodel:
		//	'SPEC' javaType=[jvmTypes::JvmType|QualifiedName]
		//	'USES_OBJECTS' object+=ObjectDecl+ ('FORBIDDEN_EVENTS' method+=ForbMethod+)?
		//	'REQUIRED_EVENTS' event+=Event+
		//	'ENFORCE_ORDER' order=Order
		//	'ENFORCES_CONSTRAINTS' req+=Constraint* ('ENSURES' ens+=Pred+)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'SPEC' javaType=[jvmTypes::JvmType|QualifiedName] 'USES_OBJECTS' object+=ObjectDecl+ ('FORBIDDEN_EVENTS'
		//method+=ForbMethod+)? 'REQUIRED_EVENTS' event+=Event+ 'ENFORCE_ORDER' order=Order 'ENFORCES_CONSTRAINTS'
		//req+=Constraint* ('ENSURES' ens+=Pred+)?
		public Group getGroup() { return cGroup; }
		
		//'SPEC'
		public Keyword getSPECKeyword_0() { return cSPECKeyword_0; }
		
		//javaType=[jvmTypes::JvmType|QualifiedName]
		public Assignment getJavaTypeAssignment_1() { return cJavaTypeAssignment_1; }
		
		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getJavaTypeJvmTypeCrossReference_1_0() { return cJavaTypeJvmTypeCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getJavaTypeJvmTypeQualifiedNameParserRuleCall_1_0_1() { return cJavaTypeJvmTypeQualifiedNameParserRuleCall_1_0_1; }
		
		//'USES_OBJECTS'
		public Keyword getUSES_OBJECTSKeyword_2() { return cUSES_OBJECTSKeyword_2; }
		
		//object+=ObjectDecl+
		public Assignment getObjectAssignment_3() { return cObjectAssignment_3; }
		
		//ObjectDecl
		public RuleCall getObjectObjectDeclParserRuleCall_3_0() { return cObjectObjectDeclParserRuleCall_3_0; }
		
		//('FORBIDDEN_EVENTS' method+=ForbMethod+)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'FORBIDDEN_EVENTS'
		public Keyword getFORBIDDEN_EVENTSKeyword_4_0() { return cFORBIDDEN_EVENTSKeyword_4_0; }
		
		//method+=ForbMethod+
		public Assignment getMethodAssignment_4_1() { return cMethodAssignment_4_1; }
		
		//ForbMethod
		public RuleCall getMethodForbMethodParserRuleCall_4_1_0() { return cMethodForbMethodParserRuleCall_4_1_0; }
		
		//'REQUIRED_EVENTS'
		public Keyword getREQUIRED_EVENTSKeyword_5() { return cREQUIRED_EVENTSKeyword_5; }
		
		//event+=Event+
		public Assignment getEventAssignment_6() { return cEventAssignment_6; }
		
		//Event
		public RuleCall getEventEventParserRuleCall_6_0() { return cEventEventParserRuleCall_6_0; }
		
		//'ENFORCE_ORDER'
		public Keyword getENFORCE_ORDERKeyword_7() { return cENFORCE_ORDERKeyword_7; }
		
		//order=Order
		public Assignment getOrderAssignment_8() { return cOrderAssignment_8; }
		
		//Order
		public RuleCall getOrderOrderParserRuleCall_8_0() { return cOrderOrderParserRuleCall_8_0; }
		
		//'ENFORCES_CONSTRAINTS'
		public Keyword getENFORCES_CONSTRAINTSKeyword_9() { return cENFORCES_CONSTRAINTSKeyword_9; }
		
		//req+=Constraint*
		public Assignment getReqAssignment_10() { return cReqAssignment_10; }
		
		//Constraint
		public RuleCall getReqConstraintParserRuleCall_10_0() { return cReqConstraintParserRuleCall_10_0; }
		
		//('ENSURES' ens+=Pred+)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'ENSURES'
		public Keyword getENSURESKeyword_11_0() { return cENSURESKeyword_11_0; }
		
		//ens+=Pred+
		public Assignment getEnsAssignment_11_1() { return cEnsAssignment_11_1; }
		
		//Pred
		public RuleCall getEnsPredParserRuleCall_11_1_0() { return cEnsPredParserRuleCall_11_1_0; }
	}
	public class ObjectDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.ObjectDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cObjectTypeJvmTypeCrossReference_0_0 = (CrossReference)cObjectTypeAssignment_0.eContents().get(0);
		private final RuleCall cObjectTypeJvmTypeQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cObjectTypeJvmTypeCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cObjectNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cObjectNameObjectParserRuleCall_2_0 = (RuleCall)cObjectNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//////////////// OBJECTS
		//ObjectDecl:
		//	objectType=[jvmTypes::JvmType|QualifiedName] "[]"? objectName=Object ";";
		@Override public ParserRule getRule() { return rule; }
		
		//objectType=[jvmTypes::JvmType|QualifiedName] "[]"? objectName=Object ";"
		public Group getGroup() { return cGroup; }
		
		//objectType=[jvmTypes::JvmType|QualifiedName]
		public Assignment getObjectTypeAssignment_0() { return cObjectTypeAssignment_0; }
		
		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getObjectTypeJvmTypeCrossReference_0_0() { return cObjectTypeJvmTypeCrossReference_0_0; }
		
		//QualifiedName
		public RuleCall getObjectTypeJvmTypeQualifiedNameParserRuleCall_0_0_1() { return cObjectTypeJvmTypeQualifiedNameParserRuleCall_0_0_1; }
		
		//"[]"?
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1() { return cLeftSquareBracketRightSquareBracketKeyword_1; }
		
		//objectName=Object
		public Assignment getObjectNameAssignment_2() { return cObjectNameAssignment_2; }
		
		//Object
		public RuleCall getObjectNameObjectParserRuleCall_2_0() { return cObjectNameObjectParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ForbMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.ForbMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForbMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cParametersAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final CrossReference cParametersJvmTypeCrossReference_1_2_0_0 = (CrossReference)cParametersAssignment_1_2_0.eContents().get(0);
		private final RuleCall cParametersJvmTypeQualifiedNameParserRuleCall_1_2_0_0_1 = (RuleCall)cParametersJvmTypeCrossReference_1_2_0_0.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Group cGroup_1_2_2 = (Group)cGroup_1_2.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_2_0 = (Keyword)cGroup_1_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_2_2_1 = (Assignment)cGroup_1_2_2.eContents().get(1);
		private final CrossReference cParametersJvmTypeCrossReference_1_2_2_1_0 = (CrossReference)cParametersAssignment_1_2_2_1.eContents().get(0);
		private final RuleCall cParametersJvmTypeQualifiedNameParserRuleCall_1_2_2_1_0_1 = (RuleCall)cParametersJvmTypeCrossReference_1_2_2_1_0.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_2_2_2 = (Keyword)cGroup_1_2_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cEqualsSignGreaterThanSignKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cRepAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final CrossReference cRepEventCrossReference_1_4_1_0 = (CrossReference)cRepAssignment_1_4_1.eContents().get(0);
		private final RuleCall cRepEventIDTerminalRuleCall_1_4_1_0_1 = (RuleCall)cRepEventCrossReference_1_4_1_0.eContents().get(1);
		
		///////////// FORBIDDEN EVENTS
		//ForbMethod:
		//	{ForbMethod} (ID "(" (parameters+=[jvmTypes::JvmType|QualifiedName] "[]"? (','
		//	parameters+=[jvmTypes::JvmType|QualifiedName] "[]"?)*)? ")" ("=>" rep=[Event])?);
		@Override public ParserRule getRule() { return rule; }
		
		//{ForbMethod} (ID "(" (parameters+=[jvmTypes::JvmType|QualifiedName] "[]"? (','
		//parameters+=[jvmTypes::JvmType|QualifiedName] "[]"?)*)? ")" ("=>" rep=[Event])?)
		public Group getGroup() { return cGroup; }
		
		//{ForbMethod}
		public Action getForbMethodAction_0() { return cForbMethodAction_0; }
		
		//(ID "(" (parameters+=[jvmTypes::JvmType|QualifiedName] "[]"? (',' parameters+=[jvmTypes::JvmType|QualifiedName]
		//"[]"?)*)? ")" ("=>" rep=[Event])?)
		public Group getGroup_1() { return cGroup_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0() { return cIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//(parameters+=[jvmTypes::JvmType|QualifiedName] "[]"? (',' parameters+=[jvmTypes::JvmType|QualifiedName] "[]"?)*)?
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//parameters+=[jvmTypes::JvmType|QualifiedName]
		public Assignment getParametersAssignment_1_2_0() { return cParametersAssignment_1_2_0; }
		
		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getParametersJvmTypeCrossReference_1_2_0_0() { return cParametersJvmTypeCrossReference_1_2_0_0; }
		
		//QualifiedName
		public RuleCall getParametersJvmTypeQualifiedNameParserRuleCall_1_2_0_0_1() { return cParametersJvmTypeQualifiedNameParserRuleCall_1_2_0_0_1; }
		
		//"[]"?
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_2_1() { return cLeftSquareBracketRightSquareBracketKeyword_1_2_1; }
		
		//(',' parameters+=[jvmTypes::JvmType|QualifiedName] "[]"?)*
		public Group getGroup_1_2_2() { return cGroup_1_2_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_2_0() { return cCommaKeyword_1_2_2_0; }
		
		//parameters+=[jvmTypes::JvmType|QualifiedName]
		public Assignment getParametersAssignment_1_2_2_1() { return cParametersAssignment_1_2_2_1; }
		
		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getParametersJvmTypeCrossReference_1_2_2_1_0() { return cParametersJvmTypeCrossReference_1_2_2_1_0; }
		
		//QualifiedName
		public RuleCall getParametersJvmTypeQualifiedNameParserRuleCall_1_2_2_1_0_1() { return cParametersJvmTypeQualifiedNameParserRuleCall_1_2_2_1_0_1; }
		
		//"[]"?
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_2_2_2() { return cLeftSquareBracketRightSquareBracketKeyword_1_2_2_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//("=>" rep=[Event])?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_1_4_0() { return cEqualsSignGreaterThanSignKeyword_1_4_0; }
		
		//rep=[Event]
		public Assignment getRepAssignment_1_4_1() { return cRepAssignment_1_4_1; }
		
		//[Event]
		public CrossReference getRepEventCrossReference_1_4_1_0() { return cRepEventCrossReference_1_4_1_0; }
		
		//ID
		public RuleCall getRepEventIDTerminalRuleCall_1_4_1_0_1() { return cRepEventIDTerminalRuleCall_1_4_1_0_1; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelMethodCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAggregateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/////////////// EVENTS
		//Event:
		//	LabelMethodCall | Aggregate;
		@Override public ParserRule getRule() { return rule; }
		
		//LabelMethodCall | Aggregate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LabelMethodCall
		public RuleCall getLabelMethodCallParserRuleCall_0() { return cLabelMethodCallParserRuleCall_0; }
		
		//Aggregate
		public RuleCall getAggregateParserRuleCall_1() { return cAggregateParserRuleCall_1; }
	}
	public class LabelMethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.LabelMethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethMethodParserRuleCall_2_0 = (RuleCall)cMethAssignment_2.eContents().get(0);
		
		///// LABELMETHCALL
		//LabelMethodCall:
		//	name=ID ":" meth=Method;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ":" meth=Method
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//meth=Method
		public Assignment getMethAssignment_2() { return cMethAssignment_2; }
		
		//Method
		public RuleCall getMethMethodParserRuleCall_2_0() { return cMethMethodParserRuleCall_2_0; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLeftSideAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cLeftSideObjectCrossReference_0_0_0 = (CrossReference)cLeftSideAssignment_0_0.eContents().get(0);
		private final RuleCall cLeftSideObjectIDTerminalRuleCall_0_0_0_1 = (RuleCall)cLeftSideObjectCrossReference_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cMethNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMethNameIDTerminalRuleCall_1_0 = (RuleCall)cMethNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParListParListParserRuleCall_3_0 = (RuleCall)cParListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Method:
		//	(leftSide=[Object] "=")? methName=ID "(" parList=ParList? ");";
		@Override public ParserRule getRule() { return rule; }
		
		//(leftSide=[Object] "=")? methName=ID "(" parList=ParList? ");"
		public Group getGroup() { return cGroup; }
		
		//(leftSide=[Object] "=")?
		public Group getGroup_0() { return cGroup_0; }
		
		//leftSide=[Object]
		public Assignment getLeftSideAssignment_0_0() { return cLeftSideAssignment_0_0; }
		
		//[Object]
		public CrossReference getLeftSideObjectCrossReference_0_0_0() { return cLeftSideObjectCrossReference_0_0_0; }
		
		//ID
		public RuleCall getLeftSideObjectIDTerminalRuleCall_0_0_0_1() { return cLeftSideObjectIDTerminalRuleCall_0_0_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//methName=ID
		public Assignment getMethNameAssignment_1() { return cMethNameAssignment_1; }
		
		//ID
		public RuleCall getMethNameIDTerminalRuleCall_1_0() { return cMethNameIDTerminalRuleCall_1_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parList=ParList?
		public Assignment getParListAssignment_3() { return cParListAssignment_3; }
		
		//ParList
		public RuleCall getParListParListParserRuleCall_3_0() { return cParListParListParserRuleCall_3_0; }
		
		//");"
		public Keyword getRightParenthesisSemicolonKeyword_4() { return cRightParenthesisSemicolonKeyword_4; }
	}
	public class ParListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.ParList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersParParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//ParList:
		//	parameters+=Par (',' parameters+=Par)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=Par (',' parameters+=Par)*
		public Group getGroup() { return cGroup; }
		
		//parameters+=Par
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//Par
		public RuleCall getParametersParParserRuleCall_0_0() { return cParametersParParserRuleCall_0_0; }
		
		//(',' parameters+=Par)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameters+=Par
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//Par
		public RuleCall getParametersParParserRuleCall_1_1_0() { return cParametersParParserRuleCall_1_1_0; }
	}
	public class ParElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Par");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cValObjectCrossReference_1_0_0 = (CrossReference)cValAssignment_1_0.eContents().get(0);
		private final RuleCall cValObjectIDTerminalRuleCall_1_0_0_1 = (RuleCall)cValObjectCrossReference_1_0_0.eContents().get(1);
		private final Keyword c_Keyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Par:
		//	{Par} (val=[Object] | '_');
		@Override public ParserRule getRule() { return rule; }
		
		//{Par} (val=[Object] | '_')
		public Group getGroup() { return cGroup; }
		
		//{Par}
		public Action getParAction_0() { return cParAction_0; }
		
		//(val=[Object] | '_')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//val=[Object]
		public Assignment getValAssignment_1_0() { return cValAssignment_1_0; }
		
		//[Object]
		public CrossReference getValObjectCrossReference_1_0_0() { return cValObjectCrossReference_1_0_0; }
		
		//ID
		public RuleCall getValObjectIDTerminalRuleCall_1_0_0_1() { return cValObjectIDTerminalRuleCall_1_0_0_1; }
		
		//'_'
		public Keyword get_Keyword_1_1() { return c_Keyword_1_1; }
	}
	public class AggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Aggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAggegateAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cLabAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final CrossReference cLabEventCrossReference_1_2_0_0 = (CrossReference)cLabAssignment_1_2_0.eContents().get(0);
		private final RuleCall cLabEventIDTerminalRuleCall_1_2_0_0_1 = (RuleCall)cLabEventCrossReference_1_2_0_0.eContents().get(1);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cCommaKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cLabAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final CrossReference cLabEventCrossReference_1_2_1_1_0 = (CrossReference)cLabAssignment_1_2_1_1.eContents().get(0);
		private final RuleCall cLabEventIDTerminalRuleCall_1_2_1_1_0_1 = (RuleCall)cLabEventCrossReference_1_2_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		///// AGGS
		//Aggregate SuperType:
		//	{Aggegate} (name=ID ':=' (lab+=[Event] (',' lab+=[Event])*) ";")
		@Override public ParserRule getRule() { return rule; }
		
		//{Aggegate} (name=ID ':=' (lab+=[Event] (',' lab+=[Event])*) ";")
		public Group getGroup() { return cGroup; }
		
		//{Aggegate}
		public Action getAggegateAction_0() { return cAggegateAction_0; }
		
		//(name=ID ':=' (lab+=[Event] (',' lab+=[Event])*) ";")
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }
		
		//(lab+=[Event] (',' lab+=[Event])*)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//lab+=[Event]
		public Assignment getLabAssignment_1_2_0() { return cLabAssignment_1_2_0; }
		
		//[Event]
		public CrossReference getLabEventCrossReference_1_2_0_0() { return cLabEventCrossReference_1_2_0_0; }
		
		//ID
		public RuleCall getLabEventIDTerminalRuleCall_1_2_0_0_1() { return cLabEventIDTerminalRuleCall_1_2_0_0_1; }
		
		//(',' lab+=[Event])*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//','
		public Keyword getCommaKeyword_1_2_1_0() { return cCommaKeyword_1_2_1_0; }
		
		//lab+=[Event]
		public Assignment getLabAssignment_1_2_1_1() { return cLabAssignment_1_2_1_1; }
		
		//[Event]
		public CrossReference getLabEventCrossReference_1_2_1_1_0() { return cLabEventCrossReference_1_2_1_1_0; }
		
		//ID
		public RuleCall getLabEventIDTerminalRuleCall_1_2_1_1_0_1() { return cLabEventIDTerminalRuleCall_1_2_1_1_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
	}
	public class OrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Order");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleOrderParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrderLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightSimpleOrderParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		/////////////// ORDER
		//Order Expression:
		//	SimpleOrder ({Order.left=current} ',' right=SimpleOrder)*
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleOrder ({Order.left=current} ',' right=SimpleOrder)*
		public Group getGroup() { return cGroup; }
		
		//SimpleOrder
		public RuleCall getSimpleOrderParserRuleCall_0() { return cSimpleOrderParserRuleCall_0; }
		
		//({Order.left=current} ',' right=SimpleOrder)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Order.left=current}
		public Action getOrderLeftAction_1_0() { return cOrderLeftAction_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//right=SimpleOrder
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//SimpleOrder
		public RuleCall getRightSimpleOrderParserRuleCall_1_2_0() { return cRightSimpleOrderParserRuleCall_1_2_0; }
	}
	public class SimpleOrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.SimpleOrder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSimpleOrderLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SimpleOrder Expression:
		//	Primary ({SimpleOrder.left=current} '|' right=Primary)*
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({SimpleOrder.left=current} '|' right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({SimpleOrder.left=current} '|' right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SimpleOrder.left=current}
		public Action getSimpleOrderLeftAction_1_0() { return cSimpleOrderLeftAction_1_0; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOrderEvAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cOrderEvEventCrossReference_0_0_0 = (CrossReference)cOrderEvAssignment_0_0.eContents().get(0);
		private final RuleCall cOrderEvEventIDTerminalRuleCall_0_0_0_1 = (RuleCall)cOrderEvEventCrossReference_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cPlusSignKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_0_1_2 = (Keyword)cAlternatives_0_1.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOrderParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Alternatives cAlternatives_1_3 = (Alternatives)cGroup_1.eContents().get(3);
		private final Keyword cPlusSignKeyword_1_3_0 = (Keyword)cAlternatives_1_3.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_3_1 = (Keyword)cAlternatives_1_3.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_3_2 = (Keyword)cAlternatives_1_3.eContents().get(2);
		
		//Primary Expression:
		//	orderEv+=[Event] ('+' | '?' | '*')? | '(' Order ')' ('+' | '?' | '*')?
		@Override public ParserRule getRule() { return rule; }
		
		//orderEv+=[Event] ('+' | '?' | '*')? | '(' Order ')' ('+' | '?' | '*')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//orderEv+=[Event] ('+' | '?' | '*')?
		public Group getGroup_0() { return cGroup_0; }
		
		//orderEv+=[Event]
		public Assignment getOrderEvAssignment_0_0() { return cOrderEvAssignment_0_0; }
		
		//[Event]
		public CrossReference getOrderEvEventCrossReference_0_0_0() { return cOrderEvEventCrossReference_0_0_0; }
		
		//ID
		public RuleCall getOrderEvEventIDTerminalRuleCall_0_0_0_1() { return cOrderEvEventIDTerminalRuleCall_0_0_0_1; }
		
		//('+' | '?' | '*')?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_0_1_0() { return cPlusSignKeyword_0_1_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_0_1_1() { return cQuestionMarkKeyword_0_1_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_0_1_2() { return cAsteriskKeyword_0_1_2; }
		
		//'(' Order ')' ('+' | '?' | '*')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Order
		public RuleCall getOrderParserRuleCall_1_1() { return cOrderParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//('+' | '?' | '*')?
		public Alternatives getAlternatives_1_3() { return cAlternatives_1_3; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_3_0() { return cPlusSignKeyword_1_3_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_3_1() { return cQuestionMarkKeyword_1_3_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_3_2() { return cAsteriskKeyword_1_3_2; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Constraint");
		private final RuleCall cLogicalImplyExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/////////////// CONSTRAINTS
		//Constraint:
		//	LogicalImplyExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalImplyExpression
		public RuleCall getLogicalImplyExpressionParserRuleCall() { return cLogicalImplyExpressionParserRuleCall; }
	}
	public class LogicalImplyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.LogicalImplyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConstraintLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLogicalImplyParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionLogicalOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//LogicalImplyExpression Constraint:
		//	LogicalOrExpression ({Constraint.leftExpression=current} operator=LogicalImply
		//	rightExpression=LogicalOrExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalOrExpression ({Constraint.leftExpression=current} operator=LogicalImply rightExpression=LogicalOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall_0() { return cLogicalOrExpressionParserRuleCall_0; }
		
		//({Constraint.leftExpression=current} operator=LogicalImply rightExpression=LogicalOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Constraint.leftExpression=current}
		public Action getConstraintLeftExpressionAction_1_0() { return cConstraintLeftExpressionAction_1_0; }
		
		//operator=LogicalImply
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//LogicalImply
		public RuleCall getOperatorLogicalImplyParserRuleCall_1_1_0() { return cOperatorLogicalImplyParserRuleCall_1_1_0; }
		
		//rightExpression=LogicalOrExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//LogicalOrExpression
		public RuleCall getRightExpressionLogicalOrExpressionParserRuleCall_1_2_0() { return cRightExpressionLogicalOrExpressionParserRuleCall_1_2_0; }
	}
	public class LogicalImplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.LogicalImply");
		private final Assignment cIMPLIESAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIMPLIESEqualsSignGreaterThanSignKeyword_0 = (Keyword)cIMPLIESAssignment.eContents().get(0);
		
		//LogicalImply:
		//	IMPLIES="=>";
		@Override public ParserRule getRule() { return rule; }
		
		//IMPLIES="=>"
		public Assignment getIMPLIESAssignment() { return cIMPLIESAssignment; }
		
		//"=>"
		public Keyword getIMPLIESEqualsSignGreaterThanSignKeyword_0() { return cIMPLIESEqualsSignGreaterThanSignKeyword_0; }
	}
	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConstraintLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLogicalOrParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionLogicalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//LogicalOrExpression Constraint:
		//	LogicalAndExpression ({Constraint.leftExpression=current} operator=LogicalOr
		//	rightExpression=LogicalAndExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalAndExpression ({Constraint.leftExpression=current} operator=LogicalOr rightExpression=LogicalAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }
		
		//({Constraint.leftExpression=current} operator=LogicalOr rightExpression=LogicalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Constraint.leftExpression=current}
		public Action getConstraintLeftExpressionAction_1_0() { return cConstraintLeftExpressionAction_1_0; }
		
		//operator=LogicalOr
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//LogicalOr
		public RuleCall getOperatorLogicalOrParserRuleCall_1_1_0() { return cOperatorLogicalOrParserRuleCall_1_1_0; }
		
		//rightExpression=LogicalAndExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//LogicalAndExpression
		public RuleCall getRightExpressionLogicalAndExpressionParserRuleCall_1_2_0() { return cRightExpressionLogicalAndExpressionParserRuleCall_1_2_0; }
	}
	public class LogicalOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.LogicalOr");
		private final Assignment cORAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cORVerticalLineVerticalLineKeyword_0 = (Keyword)cORAssignment.eContents().get(0);
		
		//LogicalOr LogicalOperator:
		//	OR='||'
		@Override public ParserRule getRule() { return rule; }
		
		//OR='||'
		public Assignment getORAssignment() { return cORAssignment; }
		
		//'||'
		public Keyword getORVerticalLineVerticalLineKeyword_0() { return cORVerticalLineVerticalLineKeyword_0; }
	}
	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConstraintLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLogicalAndParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionComparisonExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//LogicalAndExpression Constraint:
		//	ComparisonExpression ({Constraint.leftExpression=current} operator=LogicalAnd
		//	rightExpression=ComparisonExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonExpression ({Constraint.leftExpression=current} operator=LogicalAnd rightExpression=ComparisonExpression)*
		public Group getGroup() { return cGroup; }
		
		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }
		
		//({Constraint.leftExpression=current} operator=LogicalAnd rightExpression=ComparisonExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Constraint.leftExpression=current}
		public Action getConstraintLeftExpressionAction_1_0() { return cConstraintLeftExpressionAction_1_0; }
		
		//operator=LogicalAnd
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//LogicalAnd
		public RuleCall getOperatorLogicalAndParserRuleCall_1_1_0() { return cOperatorLogicalAndParserRuleCall_1_1_0; }
		
		//rightExpression=ComparisonExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//ComparisonExpression
		public RuleCall getRightExpressionComparisonExpressionParserRuleCall_1_2_0() { return cRightExpressionComparisonExpressionParserRuleCall_1_2_0; }
	}
	public class LogicalAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.LogicalAnd");
		private final Assignment cANDAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cANDAmpersandAmpersandKeyword_0 = (Keyword)cANDAssignment.eContents().get(0);
		
		//LogicalAnd LogicalOperator:
		//	AND='&&'
		@Override public ParserRule getRule() { return rule; }
		
		//AND='&&'
		public Assignment getANDAssignment() { return cANDAssignment; }
		
		//'&&'
		public Keyword getANDAmpersandAmpersandKeyword_0() { return cANDAmpersandAmpersandKeyword_0; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonHigherOpExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorComparingEQNEQOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionComparisonHigherOpExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//ComparisonExpression Constraint:
		//	ComparisonHigherOpExpression ({ComparisonExpression.left=current} operator=ComparingEQNEQOperator
		//	rightExpression=ComparisonHigherOpExpression)?
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonHigherOpExpression ({ComparisonExpression.left=current} operator=ComparingEQNEQOperator
		//rightExpression=ComparisonHigherOpExpression)?
		public Group getGroup() { return cGroup; }
		
		//ComparisonHigherOpExpression
		public RuleCall getComparisonHigherOpExpressionParserRuleCall_0() { return cComparisonHigherOpExpressionParserRuleCall_0; }
		
		//({ComparisonExpression.left=current} operator=ComparingEQNEQOperator rightExpression=ComparisonHigherOpExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonExpression.left=current}
		public Action getComparisonExpressionLeftAction_1_0() { return cComparisonExpressionLeftAction_1_0; }
		
		//operator=ComparingEQNEQOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ComparingEQNEQOperator
		public RuleCall getOperatorComparingEQNEQOperatorParserRuleCall_1_1_0() { return cOperatorComparingEQNEQOperatorParserRuleCall_1_1_0; }
		
		//rightExpression=ComparisonHigherOpExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//ComparisonHigherOpExpression
		public RuleCall getRightExpressionComparisonHigherOpExpressionParserRuleCall_1_2_0() { return cRightExpressionComparisonHigherOpExpressionParserRuleCall_1_2_0; }
	}
	public class ComparisonHigherOpExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.ComparisonHigherOpExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithmeticExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExpressionLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorComparingRelOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionArithmeticExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//ComparisonHigherOpExpression Constraint:
		//	ArithmeticExpression ({ComparisonExpression.leftExpression=current} operator=ComparingRelOperator
		//	rightExpression=ArithmeticExpression)?
		@Override public ParserRule getRule() { return rule; }
		
		//ArithmeticExpression ({ComparisonExpression.leftExpression=current} operator=ComparingRelOperator
		//rightExpression=ArithmeticExpression)?
		public Group getGroup() { return cGroup; }
		
		//ArithmeticExpression
		public RuleCall getArithmeticExpressionParserRuleCall_0() { return cArithmeticExpressionParserRuleCall_0; }
		
		//({ComparisonExpression.leftExpression=current} operator=ComparingRelOperator rightExpression=ArithmeticExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonExpression.leftExpression=current}
		public Action getComparisonExpressionLeftExpressionAction_1_0() { return cComparisonExpressionLeftExpressionAction_1_0; }
		
		//operator=ComparingRelOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ComparingRelOperator
		public RuleCall getOperatorComparingRelOperatorParserRuleCall_1_1_0() { return cOperatorComparingRelOperatorParserRuleCall_1_1_0; }
		
		//rightExpression=ArithmeticExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//ArithmeticExpression
		public RuleCall getRightExpressionArithmeticExpressionParserRuleCall_1_2_0() { return cRightExpressionArithmeticExpressionParserRuleCall_1_2_0; }
	}
	public class ComparingRelOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.ComparingRelOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLESSAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cLESSLessThanSignKeyword_0_0 = (Keyword)cLESSAssignment_0.eContents().get(0);
		private final Assignment cLESS_OR_EQUALAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cLESS_OR_EQUALLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLESS_OR_EQUALAssignment_1.eContents().get(0);
		private final Assignment cGREATER_OR_EQUALAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGREATER_OR_EQUALAssignment_2.eContents().get(0);
		private final Assignment cGREATERAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cGREATERGreaterThanSignKeyword_3_0 = (Keyword)cGREATERAssignment_3.eContents().get(0);
		
		//ComparingRelOperator ComparingOperator:
		//	LESS='<' | LESS_OR_EQUAL='<=' | GREATER_OR_EQUAL='>=' | GREATER='>'
		@Override public ParserRule getRule() { return rule; }
		
		//LESS='<' | LESS_OR_EQUAL='<=' | GREATER_OR_EQUAL='>=' | GREATER='>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS='<'
		public Assignment getLESSAssignment_0() { return cLESSAssignment_0; }
		
		//'<'
		public Keyword getLESSLessThanSignKeyword_0_0() { return cLESSLessThanSignKeyword_0_0; }
		
		//LESS_OR_EQUAL='<='
		public Assignment getLESS_OR_EQUALAssignment_1() { return cLESS_OR_EQUALAssignment_1; }
		
		//'<='
		public Keyword getLESS_OR_EQUALLessThanSignEqualsSignKeyword_1_0() { return cLESS_OR_EQUALLessThanSignEqualsSignKeyword_1_0; }
		
		//GREATER_OR_EQUAL='>='
		public Assignment getGREATER_OR_EQUALAssignment_2() { return cGREATER_OR_EQUALAssignment_2; }
		
		//'>='
		public Keyword getGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_2_0() { return cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_2_0; }
		
		//GREATER='>'
		public Assignment getGREATERAssignment_3() { return cGREATERAssignment_3; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_3_0() { return cGREATERGreaterThanSignKeyword_3_0; }
	}
	public class ArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.ArithmeticExpression");
		private final RuleCall cAdditionExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ArithmeticExpression Constraint:
		//	AdditionExpression
		@Override public ParserRule getRule() { return rule; }
		
		//AdditionExpression
		public RuleCall getAdditionExpressionParserRuleCall() { return cAdditionExpressionParserRuleCall; }
	}
	public class AdditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.AdditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpressionLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditionOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionMultiplicationExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//AdditionExpression Constraint:
		//	MultiplicationExpression ({ArithmeticExpression.leftExpression=current} operator=AdditionOperator
		//	rightExpression=MultiplicationExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicationExpression ({ArithmeticExpression.leftExpression=current} operator=AdditionOperator
		//rightExpression=MultiplicationExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicationExpression
		public RuleCall getMultiplicationExpressionParserRuleCall_0() { return cMultiplicationExpressionParserRuleCall_0; }
		
		//({ArithmeticExpression.leftExpression=current} operator=AdditionOperator rightExpression=MultiplicationExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithmeticExpression.leftExpression=current}
		public Action getArithmeticExpressionLeftExpressionAction_1_0() { return cArithmeticExpressionLeftExpressionAction_1_0; }
		
		//operator=AdditionOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AdditionOperator
		public RuleCall getOperatorAdditionOperatorParserRuleCall_1_1_0() { return cOperatorAdditionOperatorParserRuleCall_1_1_0; }
		
		//rightExpression=MultiplicationExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//MultiplicationExpression
		public RuleCall getRightExpressionMultiplicationExpressionParserRuleCall_1_2_0() { return cRightExpressionMultiplicationExpressionParserRuleCall_1_2_0; }
	}
	public class AdditionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.AdditionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPLUSAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSAssignment_0.eContents().get(0);
		private final Assignment cMINUSAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSAssignment_1.eContents().get(0);
		
		//AdditionOperator ArithmeticOperator:
		//	PLUS='+' | MINUS='-'
		@Override public ParserRule getRule() { return rule; }
		
		//PLUS='+' | MINUS='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS='+'
		public Assignment getPLUSAssignment_0() { return cPLUSAssignment_0; }
		
		//'+'
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }
		
		//MINUS='-'
		public Assignment getMINUSAssignment_1() { return cMINUSAssignment_1; }
		
		//'-'
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
	}
	public class MultiplicationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.MultiplicationExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryPreExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cOperandParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cArithmeticExpressionLeftExpressionAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicationOperatorParserRuleCall_1_1_1_0 = (RuleCall)cOperatorAssignment_1_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionOperandParserRuleCall_1_1_2_0 = (RuleCall)cRightExpressionAssignment_1_1_2.eContents().get(0);
		
		//MultiplicationExpression Constraint:
		//	UnaryPreExpression
		//	| Operand ({ArithmeticExpression.leftExpression=current} operator=MultiplicationOperator
		//	rightExpression=Operand)*
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryPreExpression | Operand ({ArithmeticExpression.leftExpression=current} operator=MultiplicationOperator
		//rightExpression=Operand)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryPreExpression
		public RuleCall getUnaryPreExpressionParserRuleCall_0() { return cUnaryPreExpressionParserRuleCall_0; }
		
		//Operand ({ArithmeticExpression.leftExpression=current} operator=MultiplicationOperator rightExpression=Operand)*
		public Group getGroup_1() { return cGroup_1; }
		
		//Operand
		public RuleCall getOperandParserRuleCall_1_0() { return cOperandParserRuleCall_1_0; }
		
		//({ArithmeticExpression.leftExpression=current} operator=MultiplicationOperator rightExpression=Operand)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ArithmeticExpression.leftExpression=current}
		public Action getArithmeticExpressionLeftExpressionAction_1_1_0() { return cArithmeticExpressionLeftExpressionAction_1_1_0; }
		
		//operator=MultiplicationOperator
		public Assignment getOperatorAssignment_1_1_1() { return cOperatorAssignment_1_1_1; }
		
		//MultiplicationOperator
		public RuleCall getOperatorMultiplicationOperatorParserRuleCall_1_1_1_0() { return cOperatorMultiplicationOperatorParserRuleCall_1_1_1_0; }
		
		//rightExpression=Operand
		public Assignment getRightExpressionAssignment_1_1_2() { return cRightExpressionAssignment_1_1_2; }
		
		//Operand
		public RuleCall getRightExpressionOperandParserRuleCall_1_1_2_0() { return cRightExpressionOperandParserRuleCall_1_1_2_0; }
	}
	public class MultiplicationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.MultiplicationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTIMESAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTIMESAsteriskKeyword_0_0 = (Keyword)cTIMESAssignment_0.eContents().get(0);
		private final Assignment cDIVIDEAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cDIVIDESolidusKeyword_1_0 = (Keyword)cDIVIDEAssignment_1.eContents().get(0);
		
		//MultiplicationOperator ArithmeticOperator:
		//	TIMES='*' | DIVIDE='/'
		@Override public ParserRule getRule() { return rule; }
		
		//TIMES='*' | DIVIDE='/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TIMES='*'
		public Assignment getTIMESAssignment_0() { return cTIMESAssignment_0; }
		
		//'*'
		public Keyword getTIMESAsteriskKeyword_0_0() { return cTIMESAsteriskKeyword_0_0; }
		
		//DIVIDE='/'
		public Assignment getDIVIDEAssignment_1() { return cDIVIDEAssignment_1; }
		
		//'/'
		public Keyword getDIVIDESolidusKeyword_1_0() { return cDIVIDESolidusKeyword_1_0; }
	}
	public class UnaryPreExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.UnaryPreExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryPreExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorUnaryPreOperatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cEnclosedExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEnclosedExpressionOperandParserRuleCall_1_1_0 = (RuleCall)cEnclosedExpressionAssignment_1_1.eContents().get(0);
		
		//UnaryPreExpression Constraint:
		//	{UnaryPreExpression} (operator=UnaryPreOperator
		//	enclosedExpression=Operand)
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryPreExpression} (operator=UnaryPreOperator enclosedExpression=Operand)
		public Group getGroup() { return cGroup; }
		
		//{UnaryPreExpression}
		public Action getUnaryPreExpressionAction_0() { return cUnaryPreExpressionAction_0; }
		
		//(operator=UnaryPreOperator enclosedExpression=Operand)
		public Group getGroup_1() { return cGroup_1; }
		
		//operator=UnaryPreOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//UnaryPreOperator
		public RuleCall getOperatorUnaryPreOperatorParserRuleCall_1_0_0() { return cOperatorUnaryPreOperatorParserRuleCall_1_0_0; }
		
		//enclosedExpression=Operand
		public Assignment getEnclosedExpressionAssignment_1_1() { return cEnclosedExpressionAssignment_1_1; }
		
		//Operand
		public RuleCall getEnclosedExpressionOperandParserRuleCall_1_1_0() { return cEnclosedExpressionOperandParserRuleCall_1_1_0; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cConstraintParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cConsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPredParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Operand Constraint:
		//	'(' Constraint ')'
		//	| Cons
		//	| Pred
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Constraint ')' | Cons | Pred
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Constraint ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Constraint
		public RuleCall getConstraintParserRuleCall_0_1() { return cConstraintParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//Cons
		public RuleCall getConsParserRuleCall_1() { return cConsParserRuleCall_1; }
		
		//Pred
		public RuleCall getPredParserRuleCall_2() { return cPredParserRuleCall_2; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAggregateExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LiteralExpression:
		//	Literal | AggregateExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//Literal | AggregateExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }
		
		//AggregateExpression
		public RuleCall getAggregateExpressionParserRuleCall_1() { return cAggregateExpressionParserRuleCall_1; }
	}
	public class AggregateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.AggregateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cValueSuperTypeCrossReference_0_0 = (CrossReference)cValueAssignment_0.eContents().get(0);
		private final RuleCall cValueSuperTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cValueSuperTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//AggregateExpression LiteralExpression:
		//	value=[SuperType] ("." ID)?
		@Override public ParserRule getRule() { return rule; }
		
		//value=[SuperType] ("." ID)?
		public Group getGroup() { return cGroup; }
		
		//value=[SuperType]
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//[SuperType]
		public CrossReference getValueSuperTypeCrossReference_0_0() { return cValueSuperTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getValueSuperTypeIDTerminalRuleCall_0_0_1() { return cValueSuperTypeIDTerminalRuleCall_0_0_1; }
		
		//("." ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Literal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//Literal LiteralExpression:
		//	{Literal} (INT | STRING)
		@Override public ParserRule getRule() { return rule; }
		
		//{Literal} (INT | STRING)
		public Group getGroup() { return cGroup; }
		
		//{Literal}
		public Action getLiteralAction_0() { return cLiteralAction_0; }
		
		//(INT | STRING)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }
	}
	public class UnaryPreOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.UnaryPreOperator");
		private final Assignment cNOTAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNOTExclamationMarkKeyword_0 = (Keyword)cNOTAssignment.eContents().get(0);
		
		//UnaryPreOperator UnaryOperator:
		//	NOT='!'
		@Override public ParserRule getRule() { return rule; }
		
		//NOT='!'
		public Assignment getNOTAssignment() { return cNOTAssignment; }
		
		//'!'
		public Keyword getNOTExclamationMarkKeyword_0() { return cNOTExclamationMarkKeyword_0; }
	}
	public class ComparingEQNEQOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.ComparingEQNEQOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEQUALAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQUALAssignment_0.eContents().get(0);
		private final Assignment cUNEQUALAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cUNEQUALExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cUNEQUALAssignment_1.eContents().get(0);
		
		//ComparingEQNEQOperator ComparingOperator:
		//	EQUAL='==' | UNEQUAL='!='
		@Override public ParserRule getRule() { return rule; }
		
		//EQUAL='==' | UNEQUAL='!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL='=='
		public Assignment getEQUALAssignment_0() { return cEQUALAssignment_0; }
		
		//'=='
		public Keyword getEQUALEqualsSignEqualsSignKeyword_0_0() { return cEQUALEqualsSignEqualsSignKeyword_0_0; }
		
		//UNEQUAL='!='
		public Assignment getUNEQUALAssignment_1() { return cUNEQUALAssignment_1; }
		
		//'!='
		public Keyword getUNEQUALExclamationMarkEqualsSignKeyword_1_0() { return cUNEQUALExclamationMarkEqualsSignKeyword_1_0; }
	}
	public class ConsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Cons");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cConsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cConsConsPredParserRuleCall_0_0_0 = (RuleCall)cConsAssignment_0_0.eContents().get(0);
		private final Keyword cInKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cLitsleftAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cLitsleftLitListParserRuleCall_0_3_0 = (RuleCall)cLitsleftAssignment_0_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cConsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConsLiteralExpressionParserRuleCall_1_0 = (RuleCall)cConsAssignment_1.eContents().get(0);
		
		//Cons LiteralExpression:
		//	cons=ConsPred "in" "{" litsleft=LitList "}" | cons=LiteralExpression
		@Override public ParserRule getRule() { return rule; }
		
		//cons=ConsPred "in" "{" litsleft=LitList "}" | cons=LiteralExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//cons=ConsPred "in" "{" litsleft=LitList "}"
		public Group getGroup_0() { return cGroup_0; }
		
		//cons=ConsPred
		public Assignment getConsAssignment_0_0() { return cConsAssignment_0_0; }
		
		//ConsPred
		public RuleCall getConsConsPredParserRuleCall_0_0_0() { return cConsConsPredParserRuleCall_0_0_0; }
		
		//"in"
		public Keyword getInKeyword_0_1() { return cInKeyword_0_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//litsleft=LitList
		public Assignment getLitsleftAssignment_0_3() { return cLitsleftAssignment_0_3; }
		
		//LitList
		public RuleCall getLitsleftLitListParserRuleCall_0_3_0() { return cLitsleftLitListParserRuleCall_0_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }
		
		//cons=LiteralExpression
		public Assignment getConsAssignment_1() { return cConsAssignment_1; }
		
		//LiteralExpression
		public RuleCall getConsLiteralExpressionParserRuleCall_1_0() { return cConsLiteralExpressionParserRuleCall_1_0; }
	}
	public class ConsPredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.ConsPred");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cPartKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cSTRINGTerminalRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Keyword cCommaKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final RuleCall cLiteralExpressionParserRuleCall_0_5 = (RuleCall)cGroup_0.eContents().get(5);
		private final Keyword cRightParenthesisKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final RuleCall cLiteralExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConsPred LiteralExpression:
		//	"part(" INT "," STRING "," LiteralExpression ")" | LiteralExpression
		@Override public ParserRule getRule() { return rule; }
		
		//"part(" INT "," STRING "," LiteralExpression ")" | LiteralExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"part(" INT "," STRING "," LiteralExpression ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"part("
		public Keyword getPartKeyword_0_0() { return cPartKeyword_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_1() { return cINTTerminalRuleCall_0_1; }
		
		//","
		public Keyword getCommaKeyword_0_2() { return cCommaKeyword_0_2; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0_3() { return cSTRINGTerminalRuleCall_0_3; }
		
		//","
		public Keyword getCommaKeyword_0_4() { return cCommaKeyword_0_4; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_0_5() { return cLiteralExpressionParserRuleCall_0_5; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_6() { return cRightParenthesisKeyword_0_6; }
		
		//LiteralExpression
		public RuleCall getLiteralExpressionParserRuleCall_1() { return cLiteralExpressionParserRuleCall_1; }
	}
	public class LitListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.LitList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersXLiteralParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cParametersAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cParametersXLiteralParserRuleCall_1_1_0_0 = (RuleCall)cParametersAssignment_1_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		
		//LitList:
		//	parameters+=XLiteral (',' (parameters+=XLiteral | '...'))*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=XLiteral (',' (parameters+=XLiteral | '...'))*
		public Group getGroup() { return cGroup; }
		
		//parameters+=XLiteral
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//XLiteral
		public RuleCall getParametersXLiteralParserRuleCall_0_0() { return cParametersXLiteralParserRuleCall_0_0; }
		
		//(',' (parameters+=XLiteral | '...'))*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//(parameters+=XLiteral | '...')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//parameters+=XLiteral
		public Assignment getParametersAssignment_1_1_0() { return cParametersAssignment_1_1_0; }
		
		//XLiteral
		public RuleCall getParametersXLiteralParserRuleCall_1_1_0_0() { return cParametersXLiteralParserRuleCall_1_1_0_0; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_1_1_1() { return cFullStopFullStopFullStopKeyword_1_1_1; }
	}
	public class PredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Pred");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredNameIDTerminalRuleCall_0_0 = (RuleCall)cPredNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParListSuParListParserRuleCall_2_0 = (RuleCall)cParListAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Pred Constraint:
		//	predName=ID "(" parList=SuParList? ");"
		@Override public ParserRule getRule() { return rule; }
		
		//predName=ID "(" parList=SuParList? ");"
		public Group getGroup() { return cGroup; }
		
		//predName=ID
		public Assignment getPredNameAssignment_0() { return cPredNameAssignment_0; }
		
		//ID
		public RuleCall getPredNameIDTerminalRuleCall_0_0() { return cPredNameIDTerminalRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parList=SuParList?
		public Assignment getParListAssignment_2() { return cParListAssignment_2; }
		
		//SuParList
		public RuleCall getParListSuParListParserRuleCall_2_0() { return cParListSuParListParserRuleCall_2_0; }
		
		//");"
		public Keyword getRightParenthesisSemicolonKeyword_3() { return cRightParenthesisSemicolonKeyword_3; }
	}
	public class SuParListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.SuParList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersSuParParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersSuParParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//SuParList:
		//	parameters+=SuPar (',' parameters+=SuPar)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=SuPar (',' parameters+=SuPar)*
		public Group getGroup() { return cGroup; }
		
		//parameters+=SuPar
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//SuPar
		public RuleCall getParametersSuParParserRuleCall_0_0() { return cParametersSuParParserRuleCall_0_0; }
		
		//(',' parameters+=SuPar)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameters+=SuPar
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//SuPar
		public RuleCall getParametersSuParParserRuleCall_1_1_0() { return cParametersSuParParserRuleCall_1_1_0; }
	}
	public class SuParElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.SuPar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSuParAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValConsPredParserRuleCall_1_0_0 = (RuleCall)cValAssignment_1_0.eContents().get(0);
		private final Keyword c_Keyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//SuPar:
		//	{SuPar} (val=ConsPred | '_');
		@Override public ParserRule getRule() { return rule; }
		
		//{SuPar} (val=ConsPred | '_')
		public Group getGroup() { return cGroup; }
		
		//{SuPar}
		public Action getSuParAction_0() { return cSuParAction_0; }
		
		//(val=ConsPred | '_')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//val=ConsPred
		public Assignment getValAssignment_1_0() { return cValAssignment_1_0; }
		
		//ConsPred
		public RuleCall getValConsPredParserRuleCall_1_0_0() { return cValConsPredParserRuleCall_1_0_0; }
		
		//'_'
		public Keyword get_Keyword_1_1() { return c_Keyword_1_1; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CryptSL.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Object SuperType:
		//	{Object} name=ID
		@Override public ParserRule getRule() { return rule; }
		
		//{Object} name=ID
		public Group getGroup() { return cGroup; }
		
		//{Object}
		public Action getObjectAction_0() { return cObjectAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final ObjectDeclElements pObjectDecl;
	private final ForbMethodElements pForbMethod;
	private final EventElements pEvent;
	private final LabelMethodCallElements pLabelMethodCall;
	private final MethodElements pMethod;
	private final ParListElements pParList;
	private final ParElements pPar;
	private final AggregateElements pAggregate;
	private final OrderElements pOrder;
	private final SimpleOrderElements pSimpleOrder;
	private final PrimaryElements pPrimary;
	private final ConstraintElements pConstraint;
	private final LogicalImplyExpressionElements pLogicalImplyExpression;
	private final LogicalImplyElements pLogicalImply;
	private final LogicalOrExpressionElements pLogicalOrExpression;
	private final LogicalOrElements pLogicalOr;
	private final LogicalAndExpressionElements pLogicalAndExpression;
	private final LogicalAndElements pLogicalAnd;
	private final ComparisonExpressionElements pComparisonExpression;
	private final ComparisonHigherOpExpressionElements pComparisonHigherOpExpression;
	private final ComparingRelOperatorElements pComparingRelOperator;
	private final ArithmeticExpressionElements pArithmeticExpression;
	private final AdditionExpressionElements pAdditionExpression;
	private final AdditionOperatorElements pAdditionOperator;
	private final MultiplicationExpressionElements pMultiplicationExpression;
	private final MultiplicationOperatorElements pMultiplicationOperator;
	private final UnaryPreExpressionElements pUnaryPreExpression;
	private final OperandElements pOperand;
	private final LiteralExpressionElements pLiteralExpression;
	private final AggregateExpressionElements pAggregateExpression;
	private final LiteralElements pLiteral;
	private final UnaryPreOperatorElements pUnaryPreOperator;
	private final ComparingEQNEQOperatorElements pComparingEQNEQOperator;
	private final ConsElements pCons;
	private final ConsPredElements pConsPred;
	private final LitListElements pLitList;
	private final PredElements pPred;
	private final SuParListElements pSuParList;
	private final SuParElements pSuPar;
	private final ObjectElements pObject;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public CryptSLGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pDomainmodel = new DomainmodelElements();
		this.pObjectDecl = new ObjectDeclElements();
		this.pForbMethod = new ForbMethodElements();
		this.pEvent = new EventElements();
		this.pLabelMethodCall = new LabelMethodCallElements();
		this.pMethod = new MethodElements();
		this.pParList = new ParListElements();
		this.pPar = new ParElements();
		this.pAggregate = new AggregateElements();
		this.pOrder = new OrderElements();
		this.pSimpleOrder = new SimpleOrderElements();
		this.pPrimary = new PrimaryElements();
		this.pConstraint = new ConstraintElements();
		this.pLogicalImplyExpression = new LogicalImplyExpressionElements();
		this.pLogicalImply = new LogicalImplyElements();
		this.pLogicalOrExpression = new LogicalOrExpressionElements();
		this.pLogicalOr = new LogicalOrElements();
		this.pLogicalAndExpression = new LogicalAndExpressionElements();
		this.pLogicalAnd = new LogicalAndElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pComparisonHigherOpExpression = new ComparisonHigherOpExpressionElements();
		this.pComparingRelOperator = new ComparingRelOperatorElements();
		this.pArithmeticExpression = new ArithmeticExpressionElements();
		this.pAdditionExpression = new AdditionExpressionElements();
		this.pAdditionOperator = new AdditionOperatorElements();
		this.pMultiplicationExpression = new MultiplicationExpressionElements();
		this.pMultiplicationOperator = new MultiplicationOperatorElements();
		this.pUnaryPreExpression = new UnaryPreExpressionElements();
		this.pOperand = new OperandElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pAggregateExpression = new AggregateExpressionElements();
		this.pLiteral = new LiteralElements();
		this.pUnaryPreOperator = new UnaryPreOperatorElements();
		this.pComparingEQNEQOperator = new ComparingEQNEQOperatorElements();
		this.pCons = new ConsElements();
		this.pConsPred = new ConsPredElements();
		this.pLitList = new LitListElements();
		this.pPred = new PredElements();
		this.pSuParList = new SuParListElements();
		this.pSuPar = new SuParElements();
		this.pObject = new ObjectElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.darmstadt.tu.crossing.CryptSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Domainmodel:
	//	'SPEC' javaType=[jvmTypes::JvmType|QualifiedName]
	//	'USES_OBJECTS' object+=ObjectDecl+ ('FORBIDDEN_EVENTS' method+=ForbMethod+)?
	//	'REQUIRED_EVENTS' event+=Event+
	//	'ENFORCE_ORDER' order=Order
	//	'ENFORCES_CONSTRAINTS' req+=Constraint* ('ENSURES' ens+=Pred+)?;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}
	
	//////////////// OBJECTS
	//ObjectDecl:
	//	objectType=[jvmTypes::JvmType|QualifiedName] "[]"? objectName=Object ";";
	public ObjectDeclElements getObjectDeclAccess() {
		return pObjectDecl;
	}
	
	public ParserRule getObjectDeclRule() {
		return getObjectDeclAccess().getRule();
	}
	
	///////////// FORBIDDEN EVENTS
	//ForbMethod:
	//	{ForbMethod} (ID "(" (parameters+=[jvmTypes::JvmType|QualifiedName] "[]"? (','
	//	parameters+=[jvmTypes::JvmType|QualifiedName] "[]"?)*)? ")" ("=>" rep=[Event])?);
	public ForbMethodElements getForbMethodAccess() {
		return pForbMethod;
	}
	
	public ParserRule getForbMethodRule() {
		return getForbMethodAccess().getRule();
	}
	
	/////////////// EVENTS
	//Event:
	//	LabelMethodCall | Aggregate;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	///// LABELMETHCALL
	//LabelMethodCall:
	//	name=ID ":" meth=Method;
	public LabelMethodCallElements getLabelMethodCallAccess() {
		return pLabelMethodCall;
	}
	
	public ParserRule getLabelMethodCallRule() {
		return getLabelMethodCallAccess().getRule();
	}
	
	//Method:
	//	(leftSide=[Object] "=")? methName=ID "(" parList=ParList? ");";
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//ParList:
	//	parameters+=Par (',' parameters+=Par)*;
	public ParListElements getParListAccess() {
		return pParList;
	}
	
	public ParserRule getParListRule() {
		return getParListAccess().getRule();
	}
	
	//Par:
	//	{Par} (val=[Object] | '_');
	public ParElements getParAccess() {
		return pPar;
	}
	
	public ParserRule getParRule() {
		return getParAccess().getRule();
	}
	
	///// AGGS
	//Aggregate SuperType:
	//	{Aggegate} (name=ID ':=' (lab+=[Event] (',' lab+=[Event])*) ";")
	public AggregateElements getAggregateAccess() {
		return pAggregate;
	}
	
	public ParserRule getAggregateRule() {
		return getAggregateAccess().getRule();
	}
	
	/////////////// ORDER
	//Order Expression:
	//	SimpleOrder ({Order.left=current} ',' right=SimpleOrder)*
	public OrderElements getOrderAccess() {
		return pOrder;
	}
	
	public ParserRule getOrderRule() {
		return getOrderAccess().getRule();
	}
	
	//SimpleOrder Expression:
	//	Primary ({SimpleOrder.left=current} '|' right=Primary)*
	public SimpleOrderElements getSimpleOrderAccess() {
		return pSimpleOrder;
	}
	
	public ParserRule getSimpleOrderRule() {
		return getSimpleOrderAccess().getRule();
	}
	
	//Primary Expression:
	//	orderEv+=[Event] ('+' | '?' | '*')? | '(' Order ')' ('+' | '?' | '*')?
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	/////////////// CONSTRAINTS
	//Constraint:
	//	LogicalImplyExpression;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//LogicalImplyExpression Constraint:
	//	LogicalOrExpression ({Constraint.leftExpression=current} operator=LogicalImply
	//	rightExpression=LogicalOrExpression)*
	public LogicalImplyExpressionElements getLogicalImplyExpressionAccess() {
		return pLogicalImplyExpression;
	}
	
	public ParserRule getLogicalImplyExpressionRule() {
		return getLogicalImplyExpressionAccess().getRule();
	}
	
	//LogicalImply:
	//	IMPLIES="=>";
	public LogicalImplyElements getLogicalImplyAccess() {
		return pLogicalImply;
	}
	
	public ParserRule getLogicalImplyRule() {
		return getLogicalImplyAccess().getRule();
	}
	
	//LogicalOrExpression Constraint:
	//	LogicalAndExpression ({Constraint.leftExpression=current} operator=LogicalOr
	//	rightExpression=LogicalAndExpression)*
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return pLogicalOrExpression;
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//LogicalOr LogicalOperator:
	//	OR='||'
	public LogicalOrElements getLogicalOrAccess() {
		return pLogicalOr;
	}
	
	public ParserRule getLogicalOrRule() {
		return getLogicalOrAccess().getRule();
	}
	
	//LogicalAndExpression Constraint:
	//	ComparisonExpression ({Constraint.leftExpression=current} operator=LogicalAnd
	//	rightExpression=ComparisonExpression)*
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return pLogicalAndExpression;
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//LogicalAnd LogicalOperator:
	//	AND='&&'
	public LogicalAndElements getLogicalAndAccess() {
		return pLogicalAnd;
	}
	
	public ParserRule getLogicalAndRule() {
		return getLogicalAndAccess().getRule();
	}
	
	//ComparisonExpression Constraint:
	//	ComparisonHigherOpExpression ({ComparisonExpression.left=current} operator=ComparingEQNEQOperator
	//	rightExpression=ComparisonHigherOpExpression)?
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//ComparisonHigherOpExpression Constraint:
	//	ArithmeticExpression ({ComparisonExpression.leftExpression=current} operator=ComparingRelOperator
	//	rightExpression=ArithmeticExpression)?
	public ComparisonHigherOpExpressionElements getComparisonHigherOpExpressionAccess() {
		return pComparisonHigherOpExpression;
	}
	
	public ParserRule getComparisonHigherOpExpressionRule() {
		return getComparisonHigherOpExpressionAccess().getRule();
	}
	
	//ComparingRelOperator ComparingOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | GREATER_OR_EQUAL='>=' | GREATER='>'
	public ComparingRelOperatorElements getComparingRelOperatorAccess() {
		return pComparingRelOperator;
	}
	
	public ParserRule getComparingRelOperatorRule() {
		return getComparingRelOperatorAccess().getRule();
	}
	
	//ArithmeticExpression Constraint:
	//	AdditionExpression
	public ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return pArithmeticExpression;
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}
	
	//AdditionExpression Constraint:
	//	MultiplicationExpression ({ArithmeticExpression.leftExpression=current} operator=AdditionOperator
	//	rightExpression=MultiplicationExpression)*
	public AdditionExpressionElements getAdditionExpressionAccess() {
		return pAdditionExpression;
	}
	
	public ParserRule getAdditionExpressionRule() {
		return getAdditionExpressionAccess().getRule();
	}
	
	//AdditionOperator ArithmeticOperator:
	//	PLUS='+' | MINUS='-'
	public AdditionOperatorElements getAdditionOperatorAccess() {
		return pAdditionOperator;
	}
	
	public ParserRule getAdditionOperatorRule() {
		return getAdditionOperatorAccess().getRule();
	}
	
	//MultiplicationExpression Constraint:
	//	UnaryPreExpression
	//	| Operand ({ArithmeticExpression.leftExpression=current} operator=MultiplicationOperator
	//	rightExpression=Operand)*
	public MultiplicationExpressionElements getMultiplicationExpressionAccess() {
		return pMultiplicationExpression;
	}
	
	public ParserRule getMultiplicationExpressionRule() {
		return getMultiplicationExpressionAccess().getRule();
	}
	
	//MultiplicationOperator ArithmeticOperator:
	//	TIMES='*' | DIVIDE='/'
	public MultiplicationOperatorElements getMultiplicationOperatorAccess() {
		return pMultiplicationOperator;
	}
	
	public ParserRule getMultiplicationOperatorRule() {
		return getMultiplicationOperatorAccess().getRule();
	}
	
	//UnaryPreExpression Constraint:
	//	{UnaryPreExpression} (operator=UnaryPreOperator
	//	enclosedExpression=Operand)
	public UnaryPreExpressionElements getUnaryPreExpressionAccess() {
		return pUnaryPreExpression;
	}
	
	public ParserRule getUnaryPreExpressionRule() {
		return getUnaryPreExpressionAccess().getRule();
	}
	
	//Operand Constraint:
	//	'(' Constraint ')'
	//	| Cons
	//	| Pred
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//LiteralExpression:
	//	Literal | AggregateExpression;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//AggregateExpression LiteralExpression:
	//	value=[SuperType] ("." ID)?
	public AggregateExpressionElements getAggregateExpressionAccess() {
		return pAggregateExpression;
	}
	
	public ParserRule getAggregateExpressionRule() {
		return getAggregateExpressionAccess().getRule();
	}
	
	//Literal LiteralExpression:
	//	{Literal} (INT | STRING)
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//UnaryPreOperator UnaryOperator:
	//	NOT='!'
	public UnaryPreOperatorElements getUnaryPreOperatorAccess() {
		return pUnaryPreOperator;
	}
	
	public ParserRule getUnaryPreOperatorRule() {
		return getUnaryPreOperatorAccess().getRule();
	}
	
	//ComparingEQNEQOperator ComparingOperator:
	//	EQUAL='==' | UNEQUAL='!='
	public ComparingEQNEQOperatorElements getComparingEQNEQOperatorAccess() {
		return pComparingEQNEQOperator;
	}
	
	public ParserRule getComparingEQNEQOperatorRule() {
		return getComparingEQNEQOperatorAccess().getRule();
	}
	
	//Cons LiteralExpression:
	//	cons=ConsPred "in" "{" litsleft=LitList "}" | cons=LiteralExpression
	public ConsElements getConsAccess() {
		return pCons;
	}
	
	public ParserRule getConsRule() {
		return getConsAccess().getRule();
	}
	
	//ConsPred LiteralExpression:
	//	"part(" INT "," STRING "," LiteralExpression ")" | LiteralExpression
	public ConsPredElements getConsPredAccess() {
		return pConsPred;
	}
	
	public ParserRule getConsPredRule() {
		return getConsPredAccess().getRule();
	}
	
	//LitList:
	//	parameters+=XLiteral (',' (parameters+=XLiteral | '...'))*;
	public LitListElements getLitListAccess() {
		return pLitList;
	}
	
	public ParserRule getLitListRule() {
		return getLitListAccess().getRule();
	}
	
	//Pred Constraint:
	//	predName=ID "(" parList=SuParList? ");"
	public PredElements getPredAccess() {
		return pPred;
	}
	
	public ParserRule getPredRule() {
		return getPredAccess().getRule();
	}
	
	//SuParList:
	//	parameters+=SuPar (',' parameters+=SuPar)*;
	public SuParListElements getSuParListAccess() {
		return pSuParList;
	}
	
	public ParserRule getSuParListRule() {
		return getSuParListAccess().getRule();
	}
	
	//SuPar:
	//	{SuPar} (val=ConsPred | '_');
	public SuParElements getSuParAccess() {
		return pSuPar;
	}
	
	public ParserRule getSuParRule() {
		return getSuParAccess().getRule();
	}
	
	//Object SuperType:
	//	{Object} name=ID
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
