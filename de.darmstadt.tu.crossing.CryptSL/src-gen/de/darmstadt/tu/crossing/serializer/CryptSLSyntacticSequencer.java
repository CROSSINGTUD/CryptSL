/*
 * generated by Xtext 2.10.0
 */
package de.darmstadt.tu.crossing.serializer;

import com.google.inject.Inject;
import de.darmstadt.tu.crossing.services.CryptSLGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class CryptSLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected CryptSLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Comp_INTTerminalRuleCall_0_1_2_1_or_STRINGTerminalRuleCall_0_1_2_0;
	protected AbstractElementAlias match_Comp_INTTerminalRuleCall_0_2_0_1_or_STRINGTerminalRuleCall_0_2_0_0;
	protected AbstractElementAlias match_ConsPred___PartKeyword_0_0_INTTerminalRuleCall_0_1_CommaKeyword_0_2_STRINGTerminalRuleCall_0_3_RightParenthesisKeyword_0_4_OfKeyword_0_5__q;
	protected AbstractElementAlias match_Constraint_ExclamationMarkKeyword_2_0_q;
	protected AbstractElementAlias match_ForbMethod_ArrayBracketsParserRuleCall_1_2_1_q;
	protected AbstractElementAlias match_ForbMethod_LeftSquareBracketRightSquareBracketKeyword_1_2_2_2_q;
	protected AbstractElementAlias match_LitList___CommaKeyword_1_0_FullStopFullStopFullStopKeyword_1_1_1__a;
	protected AbstractElementAlias match_LitList___FullStopFullStopFullStopKeyword_1_1_1_CommaKeyword_1_0__a;
	protected AbstractElementAlias match_NoEq_INTTerminalRuleCall_1_2_1_or_STRINGTerminalRuleCall_1_2_0;
	protected AbstractElementAlias match_NoEq_INTTerminalRuleCall_2_0_1_or_STRINGTerminalRuleCall_2_0_0;
	protected AbstractElementAlias match_ObAc___FullStopKeyword_1_0_IDTerminalRuleCall_1_1__q;
	protected AbstractElementAlias match_ObjectDecl_ArrayBracketsParserRuleCall_1_q;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_1_0_a;
	protected AbstractElementAlias match_Primary_LeftParenthesisKeyword_1_0_p;
	protected AbstractElementAlias match_Primary___AsteriskKeyword_0_1_2_or_PlusSignKeyword_0_1_0_or_QuestionMarkKeyword_0_1_1__q;
	protected AbstractElementAlias match_Primary___AsteriskKeyword_1_3_2_or_PlusSignKeyword_1_3_0_or_QuestionMarkKeyword_1_3_1__q;
	protected AbstractElementAlias match_XBlockExpression_SemicolonKeyword_2_1_q;
	protected AbstractElementAlias match_XExpressionInClosure_SemicolonKeyword_1_1_q;
	protected AbstractElementAlias match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q;
	protected AbstractElementAlias match_XImportDeclaration_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_XParenthesizedExpression_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_XParenthesizedExpression_LeftParenthesisKeyword_0_p;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (CryptSLGrammarAccess) access;
		match_Comp_INTTerminalRuleCall_0_1_2_1_or_STRINGTerminalRuleCall_0_1_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCompAccess().getINTTerminalRuleCall_0_1_2_1()), new TokenAlias(false, false, grammarAccess.getCompAccess().getSTRINGTerminalRuleCall_0_1_2_0()));
		match_Comp_INTTerminalRuleCall_0_2_0_1_or_STRINGTerminalRuleCall_0_2_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getCompAccess().getINTTerminalRuleCall_0_2_0_1()), new TokenAlias(false, false, grammarAccess.getCompAccess().getSTRINGTerminalRuleCall_0_2_0_0()));
		match_ConsPred___PartKeyword_0_0_INTTerminalRuleCall_0_1_CommaKeyword_0_2_STRINGTerminalRuleCall_0_3_RightParenthesisKeyword_0_4_OfKeyword_0_5__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getConsPredAccess().getPartKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getConsPredAccess().getINTTerminalRuleCall_0_1()), new TokenAlias(false, false, grammarAccess.getConsPredAccess().getCommaKeyword_0_2()), new TokenAlias(false, false, grammarAccess.getConsPredAccess().getSTRINGTerminalRuleCall_0_3()), new TokenAlias(false, false, grammarAccess.getConsPredAccess().getRightParenthesisKeyword_0_4()), new TokenAlias(false, false, grammarAccess.getConsPredAccess().getOfKeyword_0_5()));
		match_Constraint_ExclamationMarkKeyword_2_0_q = new TokenAlias(false, true, grammarAccess.getConstraintAccess().getExclamationMarkKeyword_2_0());
		match_ForbMethod_ArrayBracketsParserRuleCall_1_2_1_q = new TokenAlias(false, true, grammarAccess.getForbMethodAccess().getArrayBracketsParserRuleCall_1_2_1());
		match_ForbMethod_LeftSquareBracketRightSquareBracketKeyword_1_2_2_2_q = new TokenAlias(false, true, grammarAccess.getForbMethodAccess().getLeftSquareBracketRightSquareBracketKeyword_1_2_2_2());
		match_LitList___CommaKeyword_1_0_FullStopFullStopFullStopKeyword_1_1_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getLitListAccess().getCommaKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getLitListAccess().getFullStopFullStopFullStopKeyword_1_1_1()));
		match_LitList___FullStopFullStopFullStopKeyword_1_1_1_CommaKeyword_1_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getLitListAccess().getFullStopFullStopFullStopKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getLitListAccess().getCommaKeyword_1_0()));
		match_NoEq_INTTerminalRuleCall_1_2_1_or_STRINGTerminalRuleCall_1_2_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getNoEqAccess().getINTTerminalRuleCall_1_2_1()), new TokenAlias(false, false, grammarAccess.getNoEqAccess().getSTRINGTerminalRuleCall_1_2_0()));
		match_NoEq_INTTerminalRuleCall_2_0_1_or_STRINGTerminalRuleCall_2_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getNoEqAccess().getINTTerminalRuleCall_2_0_1()), new TokenAlias(false, false, grammarAccess.getNoEqAccess().getSTRINGTerminalRuleCall_2_0_0()));
		match_ObAc___FullStopKeyword_1_0_IDTerminalRuleCall_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getObAcAccess().getFullStopKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getObAcAccess().getIDTerminalRuleCall_1_1()));
		match_ObjectDecl_ArrayBracketsParserRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getObjectDeclAccess().getArrayBracketsParserRuleCall_1());
		match_Primary_LeftParenthesisKeyword_1_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
		match_Primary_LeftParenthesisKeyword_1_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_1_0());
		match_Primary___AsteriskKeyword_0_1_2_or_PlusSignKeyword_0_1_0_or_QuestionMarkKeyword_0_1_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getAsteriskKeyword_0_1_2()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getPlusSignKeyword_0_1_0()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getQuestionMarkKeyword_0_1_1()));
		match_Primary___AsteriskKeyword_1_3_2_or_PlusSignKeyword_1_3_0_or_QuestionMarkKeyword_1_3_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getAsteriskKeyword_1_3_2()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getPlusSignKeyword_1_3_0()), new TokenAlias(false, false, grammarAccess.getPrimaryAccess().getQuestionMarkKeyword_1_3_1()));
		match_XBlockExpression_SemicolonKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getXBlockExpressionAccess().getSemicolonKeyword_2_1());
		match_XExpressionInClosure_SemicolonKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getXExpressionInClosureAccess().getSemicolonKeyword_1_1());
		match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2()));
		match_XImportDeclaration_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getXImportDeclarationAccess().getSemicolonKeyword_2());
		match_XParenthesizedExpression_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
		match_XParenthesizedExpression_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getArrayBracketsRule())
			return getArrayBracketsToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLogConRule())
			return getLogConToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNoEqOpRule())
			return getNoEqOpToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOpCompareRule())
			return getOpCompareToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getOpSingleAssignRule())
			return getOpSingleAssignToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * ArrayBrackets :
	 * 	'[' ']'
	 * ;
	 */
	protected String getArrayBracketsToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "[]";
	}
	
	/**
	 * terminal ID:
	 * 	'^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt:
	 * 	'0'..'9' ('0'..'9'|'_')*;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * LogCon:
	 * 	OpAnd | OpOr
	 * ;
	 */
	protected String getLogConToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "&&";
	}
	
	/**
	 * NoEqOp:
	 *  '!='	
	 * ;
	 */
	protected String getNoEqOpToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "!=";
	}
	
	/**
	 * OpCompare:
	 * 	'>=' | '<' '=' | '>' | '<' ;
	 */
	protected String getOpCompareToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ">=";
	}
	
	/**
	 * OpSingleAssign:
	 * 	'='
	 * ;
	 */
	protected String getOpSingleAssignToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "=";
	}
	
	/**
	 * terminal STRING: 
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"'? |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"?;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Comp_INTTerminalRuleCall_0_1_2_1_or_STRINGTerminalRuleCall_0_1_2_0.equals(syntax))
				emit_Comp_INTTerminalRuleCall_0_1_2_1_or_STRINGTerminalRuleCall_0_1_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Comp_INTTerminalRuleCall_0_2_0_1_or_STRINGTerminalRuleCall_0_2_0_0.equals(syntax))
				emit_Comp_INTTerminalRuleCall_0_2_0_1_or_STRINGTerminalRuleCall_0_2_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ConsPred___PartKeyword_0_0_INTTerminalRuleCall_0_1_CommaKeyword_0_2_STRINGTerminalRuleCall_0_3_RightParenthesisKeyword_0_4_OfKeyword_0_5__q.equals(syntax))
				emit_ConsPred___PartKeyword_0_0_INTTerminalRuleCall_0_1_CommaKeyword_0_2_STRINGTerminalRuleCall_0_3_RightParenthesisKeyword_0_4_OfKeyword_0_5__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Constraint_ExclamationMarkKeyword_2_0_q.equals(syntax))
				emit_Constraint_ExclamationMarkKeyword_2_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForbMethod_ArrayBracketsParserRuleCall_1_2_1_q.equals(syntax))
				emit_ForbMethod_ArrayBracketsParserRuleCall_1_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForbMethod_LeftSquareBracketRightSquareBracketKeyword_1_2_2_2_q.equals(syntax))
				emit_ForbMethod_LeftSquareBracketRightSquareBracketKeyword_1_2_2_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LitList___CommaKeyword_1_0_FullStopFullStopFullStopKeyword_1_1_1__a.equals(syntax))
				emit_LitList___CommaKeyword_1_0_FullStopFullStopFullStopKeyword_1_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LitList___FullStopFullStopFullStopKeyword_1_1_1_CommaKeyword_1_0__a.equals(syntax))
				emit_LitList___FullStopFullStopFullStopKeyword_1_1_1_CommaKeyword_1_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NoEq_INTTerminalRuleCall_1_2_1_or_STRINGTerminalRuleCall_1_2_0.equals(syntax))
				emit_NoEq_INTTerminalRuleCall_1_2_1_or_STRINGTerminalRuleCall_1_2_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_NoEq_INTTerminalRuleCall_2_0_1_or_STRINGTerminalRuleCall_2_0_0.equals(syntax))
				emit_NoEq_INTTerminalRuleCall_2_0_1_or_STRINGTerminalRuleCall_2_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObAc___FullStopKeyword_1_0_IDTerminalRuleCall_1_1__q.equals(syntax))
				emit_ObAc___FullStopKeyword_1_0_IDTerminalRuleCall_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ObjectDecl_ArrayBracketsParserRuleCall_1_q.equals(syntax))
				emit_ObjectDecl_ArrayBracketsParserRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_1_0_a.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_1_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary_LeftParenthesisKeyword_1_0_p.equals(syntax))
				emit_Primary_LeftParenthesisKeyword_1_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary___AsteriskKeyword_0_1_2_or_PlusSignKeyword_0_1_0_or_QuestionMarkKeyword_0_1_1__q.equals(syntax))
				emit_Primary___AsteriskKeyword_0_1_2_or_PlusSignKeyword_0_1_0_or_QuestionMarkKeyword_0_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Primary___AsteriskKeyword_1_3_2_or_PlusSignKeyword_1_3_0_or_QuestionMarkKeyword_1_3_1__q.equals(syntax))
				emit_Primary___AsteriskKeyword_1_3_2_or_PlusSignKeyword_1_3_0_or_QuestionMarkKeyword_1_3_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XBlockExpression_SemicolonKeyword_2_1_q.equals(syntax))
				emit_XBlockExpression_SemicolonKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XExpressionInClosure_SemicolonKeyword_1_1_q.equals(syntax))
				emit_XExpressionInClosure_SemicolonKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q.equals(syntax))
				emit_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XImportDeclaration_SemicolonKeyword_2_q.equals(syntax))
				emit_XImportDeclaration_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XParenthesizedExpression_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_XParenthesizedExpression_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_XParenthesizedExpression_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_XParenthesizedExpression_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     STRING | INT
	 *
	 * This ambiguous syntax occurs at:
	 *     left=ObAc OpCompare (ambiguity) ';' (rule end)
	 */
	protected void emit_Comp_INTTerminalRuleCall_0_1_2_1_or_STRINGTerminalRuleCall_0_1_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     STRING | INT
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) OpCompare right=ObAc
	 */
	protected void emit_Comp_INTTerminalRuleCall_0_2_0_1_or_STRINGTerminalRuleCall_0_2_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         'part(' 
	  *         INT 
	  *         ',' 
	  *         STRING 
	  *         ')' 
	  *         'of'
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=[Object|ID]
	 */
	protected void emit_ConsPred___PartKeyword_0_0_INTTerminalRuleCall_0_1_CommaKeyword_0_2_STRINGTerminalRuleCall_0_3_RightParenthesisKeyword_0_4_OfKeyword_0_5__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '!'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) cons+=Pred
	 */
	protected void emit_Constraint_ExclamationMarkKeyword_2_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ArrayBrackets?
	 *
	 * This ambiguous syntax occurs at:
	 *     parameters+=[JvmType|QualifiedName] (ambiguity) ')' '=>' rep=[Event|ID]
	 *     parameters+=[JvmType|QualifiedName] (ambiguity) ')' (rule end)
	 *     parameters+=[JvmType|QualifiedName] (ambiguity) ',' parameters+=[JvmType|QualifiedName]
	 */
	protected void emit_ForbMethod_ArrayBracketsParserRuleCall_1_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '[]'?
	 *
	 * This ambiguous syntax occurs at:
	 *     parameters+=[JvmType|QualifiedName] (ambiguity) ')' '=>' rep=[Event|ID]
	 *     parameters+=[JvmType|QualifiedName] (ambiguity) ')' (rule end)
	 *     parameters+=[JvmType|QualifiedName] (ambiguity) ',' parameters+=[JvmType|QualifiedName]
	 */
	protected void emit_ForbMethod_LeftSquareBracketRightSquareBracketKeyword_1_2_2_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (',' '...')*
	 *
	 * This ambiguous syntax occurs at:
	 *     parameters+=XLiteral (ambiguity) (rule end)
	 */
	protected void emit_LitList___CommaKeyword_1_0_FullStopFullStopFullStopKeyword_1_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('...' ',')*
	 *
	 * This ambiguous syntax occurs at:
	 *     parameters+=XLiteral ',' (ambiguity) parameters+=XLiteral
	 */
	protected void emit_LitList___FullStopFullStopFullStopKeyword_1_1_1_CommaKeyword_1_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     STRING | INT
	 *
	 * This ambiguous syntax occurs at:
	 *     left=ObAc NoEqOp (ambiguity) (rule end)
	 */
	protected void emit_NoEq_INTTerminalRuleCall_1_2_1_or_STRINGTerminalRuleCall_1_2_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     STRING | INT
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) NoEqOp right=ObAc
	 */
	protected void emit_NoEq_INTTerminalRuleCall_2_0_1_or_STRINGTerminalRuleCall_2_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('.' ID)?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=[Object|ID] (ambiguity) (rule end)
	 */
	protected void emit_ObAc___FullStopKeyword_1_0_IDTerminalRuleCall_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ArrayBrackets?
	 *
	 * This ambiguous syntax occurs at:
	 *     objectType=[JvmType|QualifiedName] (ambiguity) objectName=Object
	 */
	protected void emit_ObjectDecl_ArrayBracketsParserRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) orderEv+=[Event|ID]
	 *     (rule start) (ambiguity) {Order.left=}
	 *     (rule start) (ambiguity) {SimpleOrder.left=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_1_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) {Order.left=}
	 *     (rule start) (ambiguity) {SimpleOrder.left=}
	 */
	protected void emit_Primary_LeftParenthesisKeyword_1_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('+' | '?' | '*')?
	 *
	 * This ambiguous syntax occurs at:
	 *     orderEv+=[Event|ID] (ambiguity) (rule end)
	 */
	protected void emit_Primary___AsteriskKeyword_0_1_2_or_PlusSignKeyword_0_1_0_or_QuestionMarkKeyword_0_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('+' | '?' | '*')?
	 *
	 * This ambiguous syntax occurs at:
	 *     right=SimpleOrder ')' (ambiguity) (rule end)
	 */
	protected void emit_Primary___AsteriskKeyword_1_3_2_or_PlusSignKeyword_1_3_0_or_QuestionMarkKeyword_1_3_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) '}' ')' (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) '}' (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) expressions+=XExpressionOrVarDeclaration
	 */
	protected void emit_XBlockExpression_SemicolonKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) (rule end)
	 *     expressions+=XExpressionOrVarDeclaration (ambiguity) expressions+=XExpressionOrVarDeclaration
	 */
	protected void emit_XExpressionInClosure_SemicolonKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '=>' returnType=JvmTypeReference
	 */
	protected void emit_XFunctionTypeRef___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     importedNamespace=QualifiedNameWithWildcard (ambiguity) (rule end)
	 *     importedType=[JvmDeclaredType|QualifiedName] (ambiguity) (rule end)
	 *     memberName=ValidID (ambiguity) (rule end)
	 *     wildcard?='*' (ambiguity) (rule end)
	 */
	protected void emit_XImportDeclaration_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '#' '[' ']' (rule start)
	 *     (rule start) (ambiguity) '#' '[' elements+=XExpression
	 *     (rule start) (ambiguity) '#' '{' '}' (rule start)
	 *     (rule start) (ambiguity) '#' '{' elements+=XExpression
	 *     (rule start) (ambiguity) '<' typeArguments+=JvmArgumentTypeReference
	 *     (rule start) (ambiguity) '[' declaredFormalParameters+=JvmFormalParameter
	 *     (rule start) (ambiguity) '[' explicitSyntax?='|'
	 *     (rule start) (ambiguity) '[' expression=XExpressionInClosure
	 *     (rule start) (ambiguity) 'do' body=XExpression
	 *     (rule start) (ambiguity) 'false' (rule start)
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' ')' eachExpression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' updateExpressions+=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' expression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'for' '(' initExpressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) 'if' '(' if=XExpression
	 *     (rule start) (ambiguity) 'new' constructor=[JvmConstructor|QualifiedName]
	 *     (rule start) (ambiguity) 'null' (rule start)
	 *     (rule start) (ambiguity) 'return' (rule start)
	 *     (rule start) (ambiguity) 'return' expression=XExpression
	 *     (rule start) (ambiguity) 'switch' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' switch=XExpression
	 *     (rule start) (ambiguity) 'synchronized' '(' param=XExpression
	 *     (rule start) (ambiguity) 'throw' expression=XExpression
	 *     (rule start) (ambiguity) 'try' expression=XExpression
	 *     (rule start) (ambiguity) 'typeof' '(' type=[JvmType|QualifiedName]
	 *     (rule start) (ambiguity) 'while' '(' predicate=XExpression
	 *     (rule start) (ambiguity) '{' '}' (rule start)
	 *     (rule start) (ambiguity) '{' expressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|FeatureCallID]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|IdOrSuper]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpUnary]
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {XAssignment.assignable=}
	 *     (rule start) (ambiguity) {XBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {XCastedExpression.target=}
	 *     (rule start) (ambiguity) {XInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {XMemberFeatureCall.memberCallTarget=}
	 *     (rule start) (ambiguity) {XPostfixOperation.operand=}
	 */
	protected void emit_XParenthesizedExpression_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '#' '[' ']' ')' (rule start)
	 *     (rule start) (ambiguity) '#' '[' elements+=XExpression
	 *     (rule start) (ambiguity) '#' '{' '}' ')' (rule start)
	 *     (rule start) (ambiguity) '#' '{' elements+=XExpression
	 *     (rule start) (ambiguity) '<' typeArguments+=JvmArgumentTypeReference
	 *     (rule start) (ambiguity) '[' declaredFormalParameters+=JvmFormalParameter
	 *     (rule start) (ambiguity) '[' explicitSyntax?='|'
	 *     (rule start) (ambiguity) '[' expression=XExpressionInClosure
	 *     (rule start) (ambiguity) 'do' body=XExpression
	 *     (rule start) (ambiguity) 'false' ')' (rule start)
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' ')' eachExpression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' ';' updateExpressions+=XExpression
	 *     (rule start) (ambiguity) 'for' '(' ';' expression=XExpression
	 *     (rule start) (ambiguity) 'for' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'for' '(' initExpressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) 'if' '(' if=XExpression
	 *     (rule start) (ambiguity) 'new' constructor=[JvmConstructor|QualifiedName]
	 *     (rule start) (ambiguity) 'null' ')' (rule start)
	 *     (rule start) (ambiguity) 'return' ')' (rule start)
	 *     (rule start) (ambiguity) 'return' expression=XExpression
	 *     (rule start) (ambiguity) 'switch' '(' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' declaredParam=JvmFormalParameter
	 *     (rule start) (ambiguity) 'switch' switch=XExpression
	 *     (rule start) (ambiguity) 'synchronized' '(' param=XExpression
	 *     (rule start) (ambiguity) 'throw' expression=XExpression
	 *     (rule start) (ambiguity) 'try' expression=XExpression
	 *     (rule start) (ambiguity) 'typeof' '(' type=[JvmType|QualifiedName]
	 *     (rule start) (ambiguity) 'while' '(' predicate=XExpression
	 *     (rule start) (ambiguity) '{' '}' ')' (rule start)
	 *     (rule start) (ambiguity) '{' expressions+=XExpressionOrVarDeclaration
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|FeatureCallID]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|IdOrSuper]
	 *     (rule start) (ambiguity) feature=[JvmIdentifiableElement|OpUnary]
	 *     (rule start) (ambiguity) isTrue?='true'
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) {XAssignment.assignable=}
	 *     (rule start) (ambiguity) {XBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {XCastedExpression.target=}
	 *     (rule start) (ambiguity) {XInstanceOfExpression.expression=}
	 *     (rule start) (ambiguity) {XMemberFeatureCall.memberCallTarget=}
	 *     (rule start) (ambiguity) {XPostfixOperation.operand=}
	 */
	protected void emit_XParenthesizedExpression_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
