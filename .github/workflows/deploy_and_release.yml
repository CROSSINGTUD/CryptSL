name: Deploy CrySL

on: [ workflow_dispatch ]

jobs:
  deployment:
    runs-on: ubuntu-latest
    environment: Deploy
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      # Sets up Java version
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: adopt
          java-package: jdk
          java-version: 17
          server-id: central                              # must match the serverId configured for the nexus-staging-maven-plugin
          server-username: MAVEN_USERNAME                 # Env var that holds the central publisher user name
          server-password: MAVEN_CENTRAL_TOKEN            # Env var that holds the central publisher user token
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }} # Substituted with the value stored in the referenced secret
          gpg-passphrase: MAVEN_GPG_PASSPHRASE            # Env var that holds the key's passphrase
      - name: Deploy
        run: |
          # -U force updates just to make sure we are using latest dependencies
          # -B Batch mode (do not ask for user input), just in case
          # -D activate a profile via the release property (and disable defined submodules that should not be deployed)
          mvn -U -B clean deploy -DskipTests -Pdeployment
        env:
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USER }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.SONATYPE_PW }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.GPG_PRIVATE_KEY_PASSPHRASE }}

  release:
    runs-on: ubuntu-latest
    needs: deployment
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Fetch all tags
        run: git fetch --tags

      - name: Extract Version from pom.xml
        id: extract_version
        run: |
          VERSION=$(sed -n 's/.*<version>\(.*\)<\/version>.*/\1/p' pom.xml | head -n 1)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Generate Release Notes
        id: generate_notes
        run: |
          LATEST_TAG=$(git tag --sort=-creatordate | head -n 1)
          git log $LATEST_TAG..HEAD --merges --pretty=format:"%h" > merged_prs.txt

          RELEASE_NOTES="Release Notes:\n\n"
          
          while IFS= read -r commit_hash; do
            if git log -1 --pretty=format:"%s" $commit_hash | grep -iq "dependabot"; then
              continue
            fi

            PR_NUMBER=$(git log -1 --pretty=format:"%s" $commit_hash | grep -oE "([Pp][Rr]|pull request) #[0-9]+" | grep -oE "[0-9]+" | head -n 1)

            FIRST_COMMENT=$(gh pr view $PR_NUMBER --json body --jq '.body')

            if [ -n "$FIRST_COMMENT" ]; then
              RELEASE_NOTES+="- PR #$PR_NUMBER: $FIRST_COMMENT\n"
            fi
          done < merged_prs.txt

          echo -e "$RELEASE_NOTES" > release_notes.txt
          cat release_notes.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        run: |
          gh release create "$VERSION" --title "$VERSION" --notes-file release_notes.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
