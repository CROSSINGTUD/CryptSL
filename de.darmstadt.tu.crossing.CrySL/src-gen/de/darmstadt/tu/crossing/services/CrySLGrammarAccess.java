/*
 * generated by Xtext 2.21.0
 */
package de.darmstadt.tu.crossing.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class CrySLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.Domainmodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSPECKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cJavaTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cJavaTypeJvmTypeCrossReference_1_0 = (CrossReference)cJavaTypeAssignment_1.eContents().get(0);
		private final RuleCall cJavaTypeJvmTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cJavaTypeJvmTypeCrossReference_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cArrayAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_2_0_0 = (Keyword)cArrayAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cCollectionAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cCollectionJvmGenericTypeCrossReference_2_1_1_0 = (CrossReference)cCollectionAssignment_2_1_1.eContents().get(0);
		private final RuleCall cCollectionJvmGenericTypeQualifiedNameParserRuleCall_2_1_1_0_1 = (RuleCall)cCollectionJvmGenericTypeCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Keyword cOBJECTSKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUsageAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUsageUseBlockParserRuleCall_4_0 = (RuleCall)cUsageAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cFORBIDDENKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cForbEventAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cForbEventForbiddenBlockParserRuleCall_5_1_0 = (RuleCall)cForbEventAssignment_5_1.eContents().get(0);
		private final Keyword cEVENTSKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cReq_eventsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cReq_eventsRequiredBlockParserRuleCall_7_0 = (RuleCall)cReq_eventsAssignment_7.eContents().get(0);
		private final Keyword cORDERKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cOrderAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cOrderOrderParserRuleCall_9_0 = (RuleCall)cOrderAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCONSTRAINTSKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cReqConstraintsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cReqConstraintsEnforceConsBlockParserRuleCall_10_1_0 = (RuleCall)cReqConstraintsAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cREQUIRESKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cRequireAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cRequireRequiresBlockParserRuleCall_11_1_0 = (RuleCall)cRequireAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cENSURESKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cEnsureAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cEnsureEnsuresBlockParserRuleCall_12_1_0 = (RuleCall)cEnsureAssignment_12_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cNEGATESKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cDestroyAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cDestroyDestroysBlockParserRuleCall_13_1_0 = (RuleCall)cDestroyAssignment_13_1.eContents().get(0);
		
		//Domainmodel:
		//	'SPEC' javaType=[jvmTypes::JvmType|QualifiedName] (array="[]" | "<"
		//	collection=[jvmTypes::JvmGenericType|QualifiedName] ">")? 'OBJECTS' usage=UseBlock ('FORBIDDEN'
		//	forbEvent=ForbiddenBlock)? 'EVENTS' req_events=RequiredBlock 'ORDER' order=Order ('CONSTRAINTS'
		//	reqConstraints=EnforceConsBlock)? ('REQUIRES' require=RequiresBlock)? ('ENSURES' ensure=EnsuresBlock)? ('NEGATES'
		//	destroy=DestroysBlock)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'SPEC' javaType=[jvmTypes::JvmType|QualifiedName] (array="[]" | "<" collection=[jvmTypes::JvmGenericType|QualifiedName]
		//">")? 'OBJECTS' usage=UseBlock ('FORBIDDEN' forbEvent=ForbiddenBlock)? 'EVENTS' req_events=RequiredBlock 'ORDER'
		//order=Order ('CONSTRAINTS' reqConstraints=EnforceConsBlock)? ('REQUIRES' require=RequiresBlock)? ('ENSURES'
		//ensure=EnsuresBlock)? ('NEGATES' destroy=DestroysBlock)?
		public Group getGroup() { return cGroup; }
		
		//'SPEC'
		public Keyword getSPECKeyword_0() { return cSPECKeyword_0; }
		
		//javaType=[jvmTypes::JvmType|QualifiedName]
		public Assignment getJavaTypeAssignment_1() { return cJavaTypeAssignment_1; }
		
		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getJavaTypeJvmTypeCrossReference_1_0() { return cJavaTypeJvmTypeCrossReference_1_0; }
		
		//QualifiedName
		public RuleCall getJavaTypeJvmTypeQualifiedNameParserRuleCall_1_0_1() { return cJavaTypeJvmTypeQualifiedNameParserRuleCall_1_0_1; }
		
		//(array="[]" | "<" collection=[jvmTypes::JvmGenericType|QualifiedName] ">")?
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//array="[]"
		public Assignment getArrayAssignment_2_0() { return cArrayAssignment_2_0; }
		
		//"[]"
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_2_0_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_2_0_0; }
		
		//"<" collection=[jvmTypes::JvmGenericType|QualifiedName] ">"
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//"<"
		public Keyword getLessThanSignKeyword_2_1_0() { return cLessThanSignKeyword_2_1_0; }
		
		//collection=[jvmTypes::JvmGenericType|QualifiedName]
		public Assignment getCollectionAssignment_2_1_1() { return cCollectionAssignment_2_1_1; }
		
		//[jvmTypes::JvmGenericType|QualifiedName]
		public CrossReference getCollectionJvmGenericTypeCrossReference_2_1_1_0() { return cCollectionJvmGenericTypeCrossReference_2_1_1_0; }
		
		//QualifiedName
		public RuleCall getCollectionJvmGenericTypeQualifiedNameParserRuleCall_2_1_1_0_1() { return cCollectionJvmGenericTypeQualifiedNameParserRuleCall_2_1_1_0_1; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_2_1_2() { return cGreaterThanSignKeyword_2_1_2; }
		
		//'OBJECTS'
		public Keyword getOBJECTSKeyword_3() { return cOBJECTSKeyword_3; }
		
		//usage=UseBlock
		public Assignment getUsageAssignment_4() { return cUsageAssignment_4; }
		
		//UseBlock
		public RuleCall getUsageUseBlockParserRuleCall_4_0() { return cUsageUseBlockParserRuleCall_4_0; }
		
		//('FORBIDDEN' forbEvent=ForbiddenBlock)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'FORBIDDEN'
		public Keyword getFORBIDDENKeyword_5_0() { return cFORBIDDENKeyword_5_0; }
		
		//forbEvent=ForbiddenBlock
		public Assignment getForbEventAssignment_5_1() { return cForbEventAssignment_5_1; }
		
		//ForbiddenBlock
		public RuleCall getForbEventForbiddenBlockParserRuleCall_5_1_0() { return cForbEventForbiddenBlockParserRuleCall_5_1_0; }
		
		//'EVENTS'
		public Keyword getEVENTSKeyword_6() { return cEVENTSKeyword_6; }
		
		//req_events=RequiredBlock
		public Assignment getReq_eventsAssignment_7() { return cReq_eventsAssignment_7; }
		
		//RequiredBlock
		public RuleCall getReq_eventsRequiredBlockParserRuleCall_7_0() { return cReq_eventsRequiredBlockParserRuleCall_7_0; }
		
		//'ORDER'
		public Keyword getORDERKeyword_8() { return cORDERKeyword_8; }
		
		//order=Order
		public Assignment getOrderAssignment_9() { return cOrderAssignment_9; }
		
		//Order
		public RuleCall getOrderOrderParserRuleCall_9_0() { return cOrderOrderParserRuleCall_9_0; }
		
		//('CONSTRAINTS' reqConstraints=EnforceConsBlock)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'CONSTRAINTS'
		public Keyword getCONSTRAINTSKeyword_10_0() { return cCONSTRAINTSKeyword_10_0; }
		
		//reqConstraints=EnforceConsBlock
		public Assignment getReqConstraintsAssignment_10_1() { return cReqConstraintsAssignment_10_1; }
		
		//EnforceConsBlock
		public RuleCall getReqConstraintsEnforceConsBlockParserRuleCall_10_1_0() { return cReqConstraintsEnforceConsBlockParserRuleCall_10_1_0; }
		
		//('REQUIRES' require=RequiresBlock)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'REQUIRES'
		public Keyword getREQUIRESKeyword_11_0() { return cREQUIRESKeyword_11_0; }
		
		//require=RequiresBlock
		public Assignment getRequireAssignment_11_1() { return cRequireAssignment_11_1; }
		
		//RequiresBlock
		public RuleCall getRequireRequiresBlockParserRuleCall_11_1_0() { return cRequireRequiresBlockParserRuleCall_11_1_0; }
		
		//('ENSURES' ensure=EnsuresBlock)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'ENSURES'
		public Keyword getENSURESKeyword_12_0() { return cENSURESKeyword_12_0; }
		
		//ensure=EnsuresBlock
		public Assignment getEnsureAssignment_12_1() { return cEnsureAssignment_12_1; }
		
		//EnsuresBlock
		public RuleCall getEnsureEnsuresBlockParserRuleCall_12_1_0() { return cEnsureEnsuresBlockParserRuleCall_12_1_0; }
		
		//('NEGATES' destroy=DestroysBlock)?
		public Group getGroup_13() { return cGroup_13; }
		
		//'NEGATES'
		public Keyword getNEGATESKeyword_13_0() { return cNEGATESKeyword_13_0; }
		
		//destroy=DestroysBlock
		public Assignment getDestroyAssignment_13_1() { return cDestroyAssignment_13_1; }
		
		//DestroysBlock
		public RuleCall getDestroyDestroysBlockParserRuleCall_13_1_0() { return cDestroyDestroysBlockParserRuleCall_13_1_0; }
	}
	public class UseBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.UseBlock");
		private final Assignment cObjectsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cObjectsObjectDeclParserRuleCall_0 = (RuleCall)cObjectsAssignment.eContents().get(0);
		
		//UseBlock:
		//	objects+=ObjectDecl+;
		@Override public ParserRule getRule() { return rule; }
		
		//objects+=ObjectDecl+
		public Assignment getObjectsAssignment() { return cObjectsAssignment; }
		
		//ObjectDecl
		public RuleCall getObjectsObjectDeclParserRuleCall_0() { return cObjectsObjectDeclParserRuleCall_0; }
	}
	public class ForbiddenBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.ForbiddenBlock");
		private final Assignment cForb_methodsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cForb_methodsForbMethodParserRuleCall_0 = (RuleCall)cForb_methodsAssignment.eContents().get(0);
		
		//ForbiddenBlock:
		//	forb_methods+=ForbMethod+;
		@Override public ParserRule getRule() { return rule; }
		
		//forb_methods+=ForbMethod+
		public Assignment getForb_methodsAssignment() { return cForb_methodsAssignment; }
		
		//ForbMethod
		public RuleCall getForb_methodsForbMethodParserRuleCall_0() { return cForb_methodsForbMethodParserRuleCall_0; }
	}
	public class RequiredBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.RequiredBlock");
		private final Assignment cReq_eventAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cReq_eventEventParserRuleCall_0 = (RuleCall)cReq_eventAssignment.eContents().get(0);
		
		//RequiredBlock:
		//	req_event+=Event+;
		@Override public ParserRule getRule() { return rule; }
		
		//req_event+=Event+
		public Assignment getReq_eventAssignment() { return cReq_eventAssignment; }
		
		//Event
		public RuleCall getReq_eventEventParserRuleCall_0() { return cReq_eventEventParserRuleCall_0; }
	}
	public class EnforceConsBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.EnforceConsBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReqAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReqConstraintParserRuleCall_0_0 = (RuleCall)cReqAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EnforceConsBlock:
		//	(req+=Constraint ';')+;
		@Override public ParserRule getRule() { return rule; }
		
		//(req+=Constraint ';')+
		public Group getGroup() { return cGroup; }
		
		//req+=Constraint
		public Assignment getReqAssignment_0() { return cReqAssignment_0; }
		
		//Constraint
		public RuleCall getReqConstraintParserRuleCall_0_0() { return cReqConstraintParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class RequiresBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.RequiresBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredReqPredParserRuleCall_0_0 = (RuleCall)cPredAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//RequiresBlock:
		//	(pred+=ReqPred ';')+;
		@Override public ParserRule getRule() { return rule; }
		
		//(pred+=ReqPred ';')+
		public Group getGroup() { return cGroup; }
		
		//pred+=ReqPred
		public Assignment getPredAssignment_0() { return cPredAssignment_0; }
		
		//ReqPred
		public RuleCall getPredReqPredParserRuleCall_0_0() { return cPredReqPredParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class EnsuresBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.EnsuresBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredEnsPredParserRuleCall_0_0 = (RuleCall)cPredAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//EnsuresBlock:
		//	(pred+=EnsPred ';')+;
		@Override public ParserRule getRule() { return rule; }
		
		//(pred+=EnsPred ';')+
		public Group getGroup() { return cGroup; }
		
		//pred+=EnsPred
		public Assignment getPredAssignment_0() { return cPredAssignment_0; }
		
		//EnsPred
		public RuleCall getPredEnsPredParserRuleCall_0_0() { return cPredEnsPredParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class DestroysBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.DestroysBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredEnsPredParserRuleCall_0_0 = (RuleCall)cPredAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//DestroysBlock:
		//	(pred+=EnsPred ';')+;
		@Override public ParserRule getRule() { return rule; }
		
		//(pred+=EnsPred ';')+
		public Group getGroup() { return cGroup; }
		
		//pred+=EnsPred
		public Assignment getPredAssignment_0() { return cPredAssignment_0; }
		
		//EnsPred
		public RuleCall getPredEnsPredParserRuleCall_0_0() { return cPredEnsPredParserRuleCall_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class ObjectDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.ObjectDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cObjectTypeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cObjectTypeJvmTypeCrossReference_0_0_0 = (CrossReference)cObjectTypeAssignment_0_0.eContents().get(0);
		private final RuleCall cObjectTypeJvmTypeQualifiedNameParserRuleCall_0_0_0_1 = (RuleCall)cObjectTypeJvmTypeCrossReference_0_0_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Assignment cArrayAssignment_0_1_0 = (Assignment)cAlternatives_0_1.eContents().get(0);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_0_1_0_0 = (Keyword)cArrayAssignment_0_1_0.eContents().get(0);
		private final Group cGroup_0_1_1 = (Group)cAlternatives_0_1.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0_1_1_0 = (Keyword)cGroup_0_1_1.eContents().get(0);
		private final Assignment cCollectionAssignment_0_1_1_1 = (Assignment)cGroup_0_1_1.eContents().get(1);
		private final RuleCall cCollectionJvmParameterizedTypeRefParserRuleCall_0_1_1_1_0 = (RuleCall)cCollectionAssignment_0_1_1_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1_1_2 = (Keyword)cGroup_0_1_1.eContents().get(2);
		private final Assignment cObjectNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cObjectNameObjectParserRuleCall_0_2_0 = (RuleCall)cObjectNameAssignment_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//////////////// OBJECTS
		// ObjectDecl:
		//	objectType=[jvmTypes::JvmType|QualifiedName] (array="[]" | "<" collection=JvmParameterizedTypeRef ">")?
		//	objectName=Object ";" | '*';
		@Override public ParserRule getRule() { return rule; }
		
		//objectType=[jvmTypes::JvmType|QualifiedName] (array="[]" | "<" collection=JvmParameterizedTypeRef ">")?
		//objectName=Object ";" | '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//objectType=[jvmTypes::JvmType|QualifiedName] (array="[]" | "<" collection=JvmParameterizedTypeRef ">")?
		//objectName=Object ";"
		public Group getGroup_0() { return cGroup_0; }
		
		//objectType=[jvmTypes::JvmType|QualifiedName]
		public Assignment getObjectTypeAssignment_0_0() { return cObjectTypeAssignment_0_0; }
		
		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getObjectTypeJvmTypeCrossReference_0_0_0() { return cObjectTypeJvmTypeCrossReference_0_0_0; }
		
		//QualifiedName
		public RuleCall getObjectTypeJvmTypeQualifiedNameParserRuleCall_0_0_0_1() { return cObjectTypeJvmTypeQualifiedNameParserRuleCall_0_0_0_1; }
		
		//(array="[]" | "<" collection=JvmParameterizedTypeRef ">")?
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//array="[]"
		public Assignment getArrayAssignment_0_1_0() { return cArrayAssignment_0_1_0; }
		
		//"[]"
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_0_1_0_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_0_1_0_0; }
		
		//"<" collection=JvmParameterizedTypeRef ">"
		public Group getGroup_0_1_1() { return cGroup_0_1_1; }
		
		//"<"
		public Keyword getLessThanSignKeyword_0_1_1_0() { return cLessThanSignKeyword_0_1_1_0; }
		
		//collection=JvmParameterizedTypeRef
		public Assignment getCollectionAssignment_0_1_1_1() { return cCollectionAssignment_0_1_1_1; }
		
		//JvmParameterizedTypeRef
		public RuleCall getCollectionJvmParameterizedTypeRefParserRuleCall_0_1_1_1_0() { return cCollectionJvmParameterizedTypeRefParserRuleCall_0_1_1_1_0; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_0_1_1_2() { return cGreaterThanSignKeyword_0_1_1_2; }
		
		//objectName=Object
		public Assignment getObjectNameAssignment_0_2() { return cObjectNameAssignment_0_2; }
		
		//Object
		public RuleCall getObjectNameObjectParserRuleCall_0_2_0() { return cObjectNameObjectParserRuleCall_0_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class JvmParameterizedTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.JvmParameterizedTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsJvmArgumentTypeRefParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsJvmArgumentTypeRefParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentsJvmArgumentTypeRefParserRuleCall_2_1_0 = (RuleCall)cArgumentsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cArgumentsJvmArgumentTypeRefParserRuleCall_2_2_1_0 = (RuleCall)cArgumentsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//JvmParameterizedTypeRef:
		//	(arguments+=JvmArgumentTypeRef (',' arguments+=JvmArgumentTypeRef)* ('<' arguments+=JvmArgumentTypeRef (','
		//	arguments+=JvmArgumentTypeRef)* '>')?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(arguments+=JvmArgumentTypeRef (',' arguments+=JvmArgumentTypeRef)* ('<' arguments+=JvmArgumentTypeRef (','
		//arguments+=JvmArgumentTypeRef)* '>')?)*
		public Group getGroup() { return cGroup; }
		
		//arguments+=JvmArgumentTypeRef
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }
		
		//JvmArgumentTypeRef
		public RuleCall getArgumentsJvmArgumentTypeRefParserRuleCall_0_0() { return cArgumentsJvmArgumentTypeRefParserRuleCall_0_0; }
		
		//(',' arguments+=JvmArgumentTypeRef)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//arguments+=JvmArgumentTypeRef
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }
		
		//JvmArgumentTypeRef
		public RuleCall getArgumentsJvmArgumentTypeRefParserRuleCall_1_1_0() { return cArgumentsJvmArgumentTypeRefParserRuleCall_1_1_0; }
		
		//('<' arguments+=JvmArgumentTypeRef (',' arguments+=JvmArgumentTypeRef)* '>')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }
		
		//arguments+=JvmArgumentTypeRef
		public Assignment getArgumentsAssignment_2_1() { return cArgumentsAssignment_2_1; }
		
		//JvmArgumentTypeRef
		public RuleCall getArgumentsJvmArgumentTypeRefParserRuleCall_2_1_0() { return cArgumentsJvmArgumentTypeRefParserRuleCall_2_1_0; }
		
		//(',' arguments+=JvmArgumentTypeRef)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//arguments+=JvmArgumentTypeRef
		public Assignment getArgumentsAssignment_2_2_1() { return cArgumentsAssignment_2_2_1; }
		
		//JvmArgumentTypeRef
		public RuleCall getArgumentsJvmArgumentTypeRefParserRuleCall_2_2_1_0() { return cArgumentsJvmArgumentTypeRefParserRuleCall_2_2_1_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }
	}
	public class JvmArgumentTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.JvmArgumentTypeRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeJvmWildcardTypeRefParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//JvmArgumentTypeRef JvmTypeReference:
		//	type=JvmTypeReference | type=JvmWildcardTypeRef;
		@Override public ParserRule getRule() { return rule; }
		
		//type=JvmTypeReference | type=JvmWildcardTypeRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type=JvmTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_0_0() { return cTypeJvmTypeReferenceParserRuleCall_0_0; }
		
		//type=JvmWildcardTypeRef
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//JvmWildcardTypeRef
		public RuleCall getTypeJvmWildcardTypeRefParserRuleCall_1_0() { return cTypeJvmWildcardTypeRefParserRuleCall_1_0; }
	}
	public class JvmWildcardTypeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.JvmWildcardTypeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJvmWildcardTypeReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cTKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cEKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		
		//JvmWildcardTypeRef:
		//	{JvmWildcardTypeReference} ('?' | 'T' | 'E');
		@Override public ParserRule getRule() { return rule; }
		
		//{JvmWildcardTypeReference} ('?' | 'T' | 'E')
		public Group getGroup() { return cGroup; }
		
		//{JvmWildcardTypeReference}
		public Action getJvmWildcardTypeReferenceAction_0() { return cJvmWildcardTypeReferenceAction_0; }
		
		//('?' | 'T' | 'E')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }
		
		//'T'
		public Keyword getTKeyword_1_1() { return cTKeyword_1_1; }
		
		//'E'
		public Keyword getEKeyword_1_2() { return cEKeyword_1_2; }
	}
	public class ForbMethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.ForbMethod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cJavaMethAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cJavaMethJvmExecutableCrossReference_0_0_0 = (CrossReference)cJavaMethAssignment_0_0.eContents().get(0);
		private final RuleCall cJavaMethJvmExecutableFQNParserRuleCall_0_0_0_1 = (RuleCall)cJavaMethJvmExecutableCrossReference_0_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cRepAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final CrossReference cRepEventCrossReference_0_1_1_0 = (CrossReference)cRepAssignment_0_1_1.eContents().get(0);
		private final RuleCall cRepEventIDTerminalRuleCall_0_1_1_0_1 = (RuleCall)cRepEventCrossReference_0_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		///////////// FORBIDDEN EVENTS
		// ForbMethod:
		//	(javaMeth=[jvmTypes::JvmExecutable|FQN] ("=>" rep=[Event])?) ';';
		@Override public ParserRule getRule() { return rule; }
		
		//(javaMeth=[jvmTypes::JvmExecutable|FQN] ("=>" rep=[Event])?) ';'
		public Group getGroup() { return cGroup; }
		
		//(javaMeth=[jvmTypes::JvmExecutable|FQN] ("=>" rep=[Event])?)
		public Group getGroup_0() { return cGroup_0; }
		
		//javaMeth=[jvmTypes::JvmExecutable|FQN]
		public Assignment getJavaMethAssignment_0_0() { return cJavaMethAssignment_0_0; }
		
		//[jvmTypes::JvmExecutable|FQN]
		public CrossReference getJavaMethJvmExecutableCrossReference_0_0_0() { return cJavaMethJvmExecutableCrossReference_0_0_0; }
		
		//FQN
		public RuleCall getJavaMethJvmExecutableFQNParserRuleCall_0_0_0_1() { return cJavaMethJvmExecutableFQNParserRuleCall_0_0_0_1; }
		
		//("=>" rep=[Event])?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_0_1_0() { return cEqualsSignGreaterThanSignKeyword_0_1_0; }
		
		//rep=[Event]
		public Assignment getRepAssignment_0_1_1() { return cRepAssignment_0_1_1; }
		
		//[Event]
		public CrossReference getRepEventCrossReference_0_1_1_0() { return cRepEventCrossReference_0_1_1_0; }
		
		//ID
		public RuleCall getRepEventIDTerminalRuleCall_0_1_1_0_1() { return cRepEventIDTerminalRuleCall_0_1_1_0_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class FQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.FQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQNParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cQNParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cQNParserRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FQN:
		//	QN "(" (QN ("," QN)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//QN "(" (QN ("," QN)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//QN
		public RuleCall getQNParserRuleCall_0() { return cQNParserRuleCall_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(QN ("," QN)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//QN
		public RuleCall getQNParserRuleCall_2_0() { return cQNParserRuleCall_2_0; }
		
		//("," QN)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//QN
		public RuleCall getQNParserRuleCall_2_1_1() { return cQNParserRuleCall_2_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class QNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.QN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//QN:
		//	ID ('.' ID)* "[]"?;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)* "[]"?
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//"[]"?
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_2() { return cLeftSquareBracketRightSquareBracketKeyword_2; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelMethodCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAggregateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		/////////////// EVENTS
		// Event:
		//	LabelMethodCall | Aggregate | '*';
		@Override public ParserRule getRule() { return rule; }
		
		//LabelMethodCall | Aggregate | '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LabelMethodCall
		public RuleCall getLabelMethodCallParserRuleCall_0() { return cLabelMethodCallParserRuleCall_0; }
		
		//Aggregate
		public RuleCall getAggregateParserRuleCall_1() { return cAggregateParserRuleCall_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
	}
	public class LabelMethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.LabelMethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethMethodParserRuleCall_2_0 = (RuleCall)cMethAssignment_2.eContents().get(0);
		
		///// LABELMETHCALL
		// LabelMethodCall SuperType:
		//	name=ID ":" meth=Method;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ":" meth=Method
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//meth=Method
		public Assignment getMethAssignment_2() { return cMethAssignment_2; }
		
		//Method
		public RuleCall getMethMethodParserRuleCall_2_0() { return cMethMethodParserRuleCall_2_0; }
	}
	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cLeftSideAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cLeftSideObjectCrossReference_0_0_0 = (CrossReference)cLeftSideAssignment_0_0.eContents().get(0);
		private final RuleCall cLeftSideObjectIDTerminalRuleCall_0_0_0_1 = (RuleCall)cLeftSideObjectCrossReference_0_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cMethNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cMethNameJvmExecutableCrossReference_1_0 = (CrossReference)cMethNameAssignment_1.eContents().get(0);
		private final RuleCall cMethNameJvmExecutableIDTerminalRuleCall_1_0_1 = (RuleCall)cMethNameJvmExecutableCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParListParListParserRuleCall_3_0 = (RuleCall)cParListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Method:
		//	(leftSide=[Object] "=")? methName=[jvmTypes::JvmExecutable] "(" parList=ParList? ");";
		@Override public ParserRule getRule() { return rule; }
		
		//(leftSide=[Object] "=")? methName=[jvmTypes::JvmExecutable] "(" parList=ParList? ");"
		public Group getGroup() { return cGroup; }
		
		//(leftSide=[Object] "=")?
		public Group getGroup_0() { return cGroup_0; }
		
		//leftSide=[Object]
		public Assignment getLeftSideAssignment_0_0() { return cLeftSideAssignment_0_0; }
		
		//[Object]
		public CrossReference getLeftSideObjectCrossReference_0_0_0() { return cLeftSideObjectCrossReference_0_0_0; }
		
		//ID
		public RuleCall getLeftSideObjectIDTerminalRuleCall_0_0_0_1() { return cLeftSideObjectIDTerminalRuleCall_0_0_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//methName=[jvmTypes::JvmExecutable]
		public Assignment getMethNameAssignment_1() { return cMethNameAssignment_1; }
		
		//[jvmTypes::JvmExecutable]
		public CrossReference getMethNameJvmExecutableCrossReference_1_0() { return cMethNameJvmExecutableCrossReference_1_0; }
		
		//ID
		public RuleCall getMethNameJvmExecutableIDTerminalRuleCall_1_0_1() { return cMethNameJvmExecutableIDTerminalRuleCall_1_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parList=ParList?
		public Assignment getParListAssignment_3() { return cParListAssignment_3; }
		
		//ParList
		public RuleCall getParListParListParserRuleCall_3_0() { return cParListParListParserRuleCall_3_0; }
		
		//");"
		public Keyword getRightParenthesisSemicolonKeyword_4() { return cRightParenthesisSemicolonKeyword_4; }
	}
	public class ParListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.ParList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersParParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//ParList:
		//	parameters+=Par (',' parameters+=Par)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=Par (',' parameters+=Par)*
		public Group getGroup() { return cGroup; }
		
		//parameters+=Par
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//Par
		public RuleCall getParametersParParserRuleCall_0_0() { return cParametersParParserRuleCall_0_0; }
		
		//(',' parameters+=Par)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameters+=Par
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//Par
		public RuleCall getParametersParParserRuleCall_1_1_0() { return cParametersParParserRuleCall_1_1_0; }
	}
	public class ParElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.Par");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cValObjectCrossReference_1_0_0 = (CrossReference)cValAssignment_1_0.eContents().get(0);
		private final RuleCall cValObjectIDTerminalRuleCall_1_0_0_1 = (RuleCall)cValObjectCrossReference_1_0_0.eContents().get(1);
		private final Keyword c_Keyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Par:
		//	{Par} (val=[Object] | '_');
		@Override public ParserRule getRule() { return rule; }
		
		//{Par} (val=[Object] | '_')
		public Group getGroup() { return cGroup; }
		
		//{Par}
		public Action getParAction_0() { return cParAction_0; }
		
		//(val=[Object] | '_')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//val=[Object]
		public Assignment getValAssignment_1_0() { return cValAssignment_1_0; }
		
		//[Object]
		public CrossReference getValObjectCrossReference_1_0_0() { return cValObjectCrossReference_1_0_0; }
		
		//ID
		public RuleCall getValObjectIDTerminalRuleCall_1_0_0_1() { return cValObjectIDTerminalRuleCall_1_0_0_1; }
		
		//'_'
		public Keyword get_Keyword_1_1() { return c_Keyword_1_1; }
	}
	public class AggregateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.Aggregate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAggregateAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cLabAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final CrossReference cLabEventCrossReference_1_2_0_0 = (CrossReference)cLabAssignment_1_2_0.eContents().get(0);
		private final RuleCall cLabEventIDTerminalRuleCall_1_2_0_0_1 = (RuleCall)cLabEventCrossReference_1_2_0_0.eContents().get(1);
		private final Group cGroup_1_2_1 = (Group)cGroup_1_2.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_2_1_0 = (Keyword)cGroup_1_2_1.eContents().get(0);
		private final Assignment cLabAssignment_1_2_1_1 = (Assignment)cGroup_1_2_1.eContents().get(1);
		private final CrossReference cLabEventCrossReference_1_2_1_1_0 = (CrossReference)cLabAssignment_1_2_1_1.eContents().get(0);
		private final RuleCall cLabEventIDTerminalRuleCall_1_2_1_1_0_1 = (RuleCall)cLabEventCrossReference_1_2_1_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		///// AGGS
		// Aggregate SuperType:
		//	{Aggregate} (name=ID ':=' (lab+=[Event] ('|' lab+=[Event])*) ";");
		@Override public ParserRule getRule() { return rule; }
		
		//{Aggregate} (name=ID ':=' (lab+=[Event] ('|' lab+=[Event])*) ";")
		public Group getGroup() { return cGroup; }
		
		//{Aggregate}
		public Action getAggregateAction_0() { return cAggregateAction_0; }
		
		//(name=ID ':=' (lab+=[Event] ('|' lab+=[Event])*) ";")
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0_0() { return cNameIDTerminalRuleCall_1_0_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_1() { return cColonEqualsSignKeyword_1_1; }
		
		//(lab+=[Event] ('|' lab+=[Event])*)
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//lab+=[Event]
		public Assignment getLabAssignment_1_2_0() { return cLabAssignment_1_2_0; }
		
		//[Event]
		public CrossReference getLabEventCrossReference_1_2_0_0() { return cLabEventCrossReference_1_2_0_0; }
		
		//ID
		public RuleCall getLabEventIDTerminalRuleCall_1_2_0_0_1() { return cLabEventIDTerminalRuleCall_1_2_0_0_1; }
		
		//('|' lab+=[Event])*
		public Group getGroup_1_2_1() { return cGroup_1_2_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_1_2_1_0() { return cVerticalLineKeyword_1_2_1_0; }
		
		//lab+=[Event]
		public Assignment getLabAssignment_1_2_1_1() { return cLabAssignment_1_2_1_1; }
		
		//[Event]
		public CrossReference getLabEventCrossReference_1_2_1_1_0() { return cLabEventCrossReference_1_2_1_1_0; }
		
		//ID
		public RuleCall getLabEventIDTerminalRuleCall_1_2_1_1_0_1() { return cLabEventIDTerminalRuleCall_1_2_1_1_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }
	}
	public class OrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.Order");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleOrderParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cOrderLeftAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cOrderopAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Keyword cOrderopCommaKeyword_0_1_1_0 = (Keyword)cOrderopAssignment_0_1_1.eContents().get(0);
		private final Assignment cRightAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cRightSimpleOrderParserRuleCall_0_1_2_0 = (RuleCall)cRightAssignment_0_1_2.eContents().get(0);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		/////////////// ORDER
		// Order Expression:
		//	SimpleOrder ({Order.left=current} orderop=',' right=SimpleOrder)* | '*';
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleOrder ({Order.left=current} orderop=',' right=SimpleOrder)* | '*'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleOrder ({Order.left=current} orderop=',' right=SimpleOrder)*
		public Group getGroup_0() { return cGroup_0; }
		
		//SimpleOrder
		public RuleCall getSimpleOrderParserRuleCall_0_0() { return cSimpleOrderParserRuleCall_0_0; }
		
		//({Order.left=current} orderop=',' right=SimpleOrder)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{Order.left=current}
		public Action getOrderLeftAction_0_1_0() { return cOrderLeftAction_0_1_0; }
		
		//orderop=','
		public Assignment getOrderopAssignment_0_1_1() { return cOrderopAssignment_0_1_1; }
		
		//','
		public Keyword getOrderopCommaKeyword_0_1_1_0() { return cOrderopCommaKeyword_0_1_1_0; }
		
		//right=SimpleOrder
		public Assignment getRightAssignment_0_1_2() { return cRightAssignment_0_1_2; }
		
		//SimpleOrder
		public RuleCall getRightSimpleOrderParserRuleCall_0_1_2_0() { return cRightSimpleOrderParserRuleCall_0_1_2_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}
	public class SimpleOrderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.SimpleOrder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cSimpleOrderLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOrderopAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOrderopVerticalLineKeyword_1_1_0 = (Keyword)cOrderopAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SimpleOrder Expression:
		//	Primary ({SimpleOrder.left=current} orderop='|' right=Primary)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({SimpleOrder.left=current} orderop='|' right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({SimpleOrder.left=current} orderop='|' right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{SimpleOrder.left=current}
		public Action getSimpleOrderLeftAction_1_0() { return cSimpleOrderLeftAction_1_0; }
		
		//orderop='|'
		public Assignment getOrderopAssignment_1_1() { return cOrderopAssignment_1_1; }
		
		//'|'
		public Keyword getOrderopVerticalLineKeyword_1_1_0() { return cOrderopVerticalLineKeyword_1_1_0; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOrderEvAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cOrderEvEventCrossReference_0_0_0 = (CrossReference)cOrderEvAssignment_0_0.eContents().get(0);
		private final RuleCall cOrderEvEventIDTerminalRuleCall_0_0_0_1 = (RuleCall)cOrderEvEventCrossReference_0_0_0.eContents().get(1);
		private final Assignment cElementopAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cElementopAlternatives_0_1_0 = (Alternatives)cElementopAssignment_0_1.eContents().get(0);
		private final Keyword cElementopPlusSignKeyword_0_1_0_0 = (Keyword)cElementopAlternatives_0_1_0.eContents().get(0);
		private final Keyword cElementopQuestionMarkKeyword_0_1_0_1 = (Keyword)cElementopAlternatives_0_1_0.eContents().get(1);
		private final Keyword cElementopAsteriskKeyword_0_1_0_2 = (Keyword)cElementopAlternatives_0_1_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cOrderParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cElementopAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Alternatives cElementopAlternatives_1_3_0 = (Alternatives)cElementopAssignment_1_3.eContents().get(0);
		private final Keyword cElementopPlusSignKeyword_1_3_0_0 = (Keyword)cElementopAlternatives_1_3_0.eContents().get(0);
		private final Keyword cElementopQuestionMarkKeyword_1_3_0_1 = (Keyword)cElementopAlternatives_1_3_0.eContents().get(1);
		private final Keyword cElementopAsteriskKeyword_1_3_0_2 = (Keyword)cElementopAlternatives_1_3_0.eContents().get(2);
		
		//Primary Expression:
		//	orderEv+=[Event] elementop=('+' | '?' | '*')? | '(' Order ')' elementop=('+' | '?' | '*')?;
		@Override public ParserRule getRule() { return rule; }
		
		//orderEv+=[Event] elementop=('+' | '?' | '*')? | '(' Order ')' elementop=('+' | '?' | '*')?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//orderEv+=[Event] elementop=('+' | '?' | '*')?
		public Group getGroup_0() { return cGroup_0; }
		
		//orderEv+=[Event]
		public Assignment getOrderEvAssignment_0_0() { return cOrderEvAssignment_0_0; }
		
		//[Event]
		public CrossReference getOrderEvEventCrossReference_0_0_0() { return cOrderEvEventCrossReference_0_0_0; }
		
		//ID
		public RuleCall getOrderEvEventIDTerminalRuleCall_0_0_0_1() { return cOrderEvEventIDTerminalRuleCall_0_0_0_1; }
		
		//elementop=('+' | '?' | '*')?
		public Assignment getElementopAssignment_0_1() { return cElementopAssignment_0_1; }
		
		//('+' | '?' | '*')
		public Alternatives getElementopAlternatives_0_1_0() { return cElementopAlternatives_0_1_0; }
		
		//'+'
		public Keyword getElementopPlusSignKeyword_0_1_0_0() { return cElementopPlusSignKeyword_0_1_0_0; }
		
		//'?'
		public Keyword getElementopQuestionMarkKeyword_0_1_0_1() { return cElementopQuestionMarkKeyword_0_1_0_1; }
		
		//'*'
		public Keyword getElementopAsteriskKeyword_0_1_0_2() { return cElementopAsteriskKeyword_0_1_0_2; }
		
		//'(' Order ')' elementop=('+' | '?' | '*')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Order
		public RuleCall getOrderParserRuleCall_1_1() { return cOrderParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//elementop=('+' | '?' | '*')?
		public Assignment getElementopAssignment_1_3() { return cElementopAssignment_1_3; }
		
		//('+' | '?' | '*')
		public Alternatives getElementopAlternatives_1_3_0() { return cElementopAlternatives_1_3_0; }
		
		//'+'
		public Keyword getElementopPlusSignKeyword_1_3_0_0() { return cElementopPlusSignKeyword_1_3_0_0; }
		
		//'?'
		public Keyword getElementopQuestionMarkKeyword_1_3_0_1() { return cElementopQuestionMarkKeyword_1_3_0_1; }
		
		//'*'
		public Keyword getElementopAsteriskKeyword_1_3_0_2() { return cElementopAsteriskKeyword_1_3_0_2; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.Constraint");
		private final RuleCall cLogicalImplyExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/////////////// CONSTRAINTS
		// Constraint:
		//	LogicalImplyExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalImplyExpression
		public RuleCall getLogicalImplyExpressionParserRuleCall() { return cLogicalImplyExpressionParserRuleCall; }
	}
	public class LogicalImplyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.LogicalImplyExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConstraintLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLogicalImplyParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionLogicalOrExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//LogicalImplyExpression Constraint:
		//	LogicalOrExpression ({Constraint.leftExpression=current} operator=LogicalImply rightExpression=LogicalOrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalOrExpression ({Constraint.leftExpression=current} operator=LogicalImply rightExpression=LogicalOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//LogicalOrExpression
		public RuleCall getLogicalOrExpressionParserRuleCall_0() { return cLogicalOrExpressionParserRuleCall_0; }
		
		//({Constraint.leftExpression=current} operator=LogicalImply rightExpression=LogicalOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Constraint.leftExpression=current}
		public Action getConstraintLeftExpressionAction_1_0() { return cConstraintLeftExpressionAction_1_0; }
		
		//operator=LogicalImply
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//LogicalImply
		public RuleCall getOperatorLogicalImplyParserRuleCall_1_1_0() { return cOperatorLogicalImplyParserRuleCall_1_1_0; }
		
		//rightExpression=LogicalOrExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//LogicalOrExpression
		public RuleCall getRightExpressionLogicalOrExpressionParserRuleCall_1_2_0() { return cRightExpressionLogicalOrExpressionParserRuleCall_1_2_0; }
	}
	public class LogicalImplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.LogicalImply");
		private final Assignment cIMPLIESAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIMPLIESEqualsSignGreaterThanSignKeyword_0 = (Keyword)cIMPLIESAssignment.eContents().get(0);
		
		//LogicalImply:
		//	IMPLIES="=>";
		@Override public ParserRule getRule() { return rule; }
		
		//IMPLIES="=>"
		public Assignment getIMPLIESAssignment() { return cIMPLIESAssignment; }
		
		//"=>"
		public Keyword getIMPLIESEqualsSignGreaterThanSignKeyword_0() { return cIMPLIESEqualsSignGreaterThanSignKeyword_0; }
	}
	public class LogicalOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.LogicalOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogicalAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConstraintLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLogicalOrParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionLogicalAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//LogicalOrExpression Constraint:
		//	LogicalAndExpression ({Constraint.leftExpression=current} operator=LogicalOr rightExpression=LogicalAndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//LogicalAndExpression ({Constraint.leftExpression=current} operator=LogicalOr rightExpression=LogicalAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//LogicalAndExpression
		public RuleCall getLogicalAndExpressionParserRuleCall_0() { return cLogicalAndExpressionParserRuleCall_0; }
		
		//({Constraint.leftExpression=current} operator=LogicalOr rightExpression=LogicalAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Constraint.leftExpression=current}
		public Action getConstraintLeftExpressionAction_1_0() { return cConstraintLeftExpressionAction_1_0; }
		
		//operator=LogicalOr
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//LogicalOr
		public RuleCall getOperatorLogicalOrParserRuleCall_1_1_0() { return cOperatorLogicalOrParserRuleCall_1_1_0; }
		
		//rightExpression=LogicalAndExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//LogicalAndExpression
		public RuleCall getRightExpressionLogicalAndExpressionParserRuleCall_1_2_0() { return cRightExpressionLogicalAndExpressionParserRuleCall_1_2_0; }
	}
	public class LogicalOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.LogicalOr");
		private final Assignment cORAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cORVerticalLineVerticalLineKeyword_0 = (Keyword)cORAssignment.eContents().get(0);
		
		//LogicalOr LogicalOperator:
		//	OR='||';
		@Override public ParserRule getRule() { return rule; }
		
		//OR='||'
		public Assignment getORAssignment() { return cORAssignment; }
		
		//'||'
		public Keyword getORVerticalLineVerticalLineKeyword_0() { return cORVerticalLineVerticalLineKeyword_0; }
	}
	public class LogicalAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.LogicalAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cConstraintLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLogicalAndParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionComparisonExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//LogicalAndExpression Constraint:
		//	ComparisonExpression ({Constraint.leftExpression=current} operator=LogicalAnd rightExpression=ComparisonExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonExpression ({Constraint.leftExpression=current} operator=LogicalAnd rightExpression=ComparisonExpression)*
		public Group getGroup() { return cGroup; }
		
		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }
		
		//({Constraint.leftExpression=current} operator=LogicalAnd rightExpression=ComparisonExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Constraint.leftExpression=current}
		public Action getConstraintLeftExpressionAction_1_0() { return cConstraintLeftExpressionAction_1_0; }
		
		//operator=LogicalAnd
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//LogicalAnd
		public RuleCall getOperatorLogicalAndParserRuleCall_1_1_0() { return cOperatorLogicalAndParserRuleCall_1_1_0; }
		
		//rightExpression=ComparisonExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//ComparisonExpression
		public RuleCall getRightExpressionComparisonExpressionParserRuleCall_1_2_0() { return cRightExpressionComparisonExpressionParserRuleCall_1_2_0; }
	}
	public class LogicalAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.LogicalAnd");
		private final Assignment cANDAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cANDAmpersandAmpersandKeyword_0 = (Keyword)cANDAssignment.eContents().get(0);
		
		//LogicalAnd LogicalOperator:
		//	AND='&&';
		@Override public ParserRule getRule() { return rule; }
		
		//AND='&&'
		public Assignment getANDAssignment() { return cANDAssignment; }
		
		//'&&'
		public Keyword getANDAmpersandAmpersandKeyword_0() { return cANDAmpersandAmpersandKeyword_0; }
	}
	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonHigherOpExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExpressionLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorComparingEQNEQOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionComparisonHigherOpExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//ComparisonExpression Constraint:
		//	ComparisonHigherOpExpression ({ComparisonExpression.leftExpression=current} operator=ComparingEQNEQOperator
		//	rightExpression=ComparisonHigherOpExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ComparisonHigherOpExpression ({ComparisonExpression.leftExpression=current} operator=ComparingEQNEQOperator
		//rightExpression=ComparisonHigherOpExpression)?
		public Group getGroup() { return cGroup; }
		
		//ComparisonHigherOpExpression
		public RuleCall getComparisonHigherOpExpressionParserRuleCall_0() { return cComparisonHigherOpExpressionParserRuleCall_0; }
		
		//({ComparisonExpression.leftExpression=current} operator=ComparingEQNEQOperator
		//rightExpression=ComparisonHigherOpExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonExpression.leftExpression=current}
		public Action getComparisonExpressionLeftExpressionAction_1_0() { return cComparisonExpressionLeftExpressionAction_1_0; }
		
		//operator=ComparingEQNEQOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ComparingEQNEQOperator
		public RuleCall getOperatorComparingEQNEQOperatorParserRuleCall_1_1_0() { return cOperatorComparingEQNEQOperatorParserRuleCall_1_1_0; }
		
		//rightExpression=ComparisonHigherOpExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//ComparisonHigherOpExpression
		public RuleCall getRightExpressionComparisonHigherOpExpressionParserRuleCall_1_2_0() { return cRightExpressionComparisonHigherOpExpressionParserRuleCall_1_2_0; }
	}
	public class ComparisonHigherOpExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.ComparisonHigherOpExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArithmeticExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExpressionLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorComparingRelOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionArithmeticExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//ComparisonHigherOpExpression Constraint:
		//	ArithmeticExpression ({ComparisonExpression.leftExpression=current} operator=ComparingRelOperator
		//	rightExpression=ArithmeticExpression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ArithmeticExpression ({ComparisonExpression.leftExpression=current} operator=ComparingRelOperator
		//rightExpression=ArithmeticExpression)?
		public Group getGroup() { return cGroup; }
		
		//ArithmeticExpression
		public RuleCall getArithmeticExpressionParserRuleCall_0() { return cArithmeticExpressionParserRuleCall_0; }
		
		//({ComparisonExpression.leftExpression=current} operator=ComparingRelOperator rightExpression=ArithmeticExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComparisonExpression.leftExpression=current}
		public Action getComparisonExpressionLeftExpressionAction_1_0() { return cComparisonExpressionLeftExpressionAction_1_0; }
		
		//operator=ComparingRelOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ComparingRelOperator
		public RuleCall getOperatorComparingRelOperatorParserRuleCall_1_1_0() { return cOperatorComparingRelOperatorParserRuleCall_1_1_0; }
		
		//rightExpression=ArithmeticExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//ArithmeticExpression
		public RuleCall getRightExpressionArithmeticExpressionParserRuleCall_1_2_0() { return cRightExpressionArithmeticExpressionParserRuleCall_1_2_0; }
	}
	public class ComparingRelOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.ComparingRelOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLESSAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cLESSLessThanSignKeyword_0_0 = (Keyword)cLESSAssignment_0.eContents().get(0);
		private final Assignment cLESS_OR_EQUALAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cLESS_OR_EQUALLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLESS_OR_EQUALAssignment_1.eContents().get(0);
		private final Assignment cGREATER_OR_EQUALAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_2_0 = (Keyword)cGREATER_OR_EQUALAssignment_2.eContents().get(0);
		private final Assignment cGREATERAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cGREATERGreaterThanSignKeyword_3_0 = (Keyword)cGREATERAssignment_3.eContents().get(0);
		
		//ComparingRelOperator ComparingOperator:
		//	LESS='<' | LESS_OR_EQUAL='<=' | GREATER_OR_EQUAL='>=' | GREATER='>';
		@Override public ParserRule getRule() { return rule; }
		
		//LESS='<' | LESS_OR_EQUAL='<=' | GREATER_OR_EQUAL='>=' | GREATER='>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LESS='<'
		public Assignment getLESSAssignment_0() { return cLESSAssignment_0; }
		
		//'<'
		public Keyword getLESSLessThanSignKeyword_0_0() { return cLESSLessThanSignKeyword_0_0; }
		
		//LESS_OR_EQUAL='<='
		public Assignment getLESS_OR_EQUALAssignment_1() { return cLESS_OR_EQUALAssignment_1; }
		
		//'<='
		public Keyword getLESS_OR_EQUALLessThanSignEqualsSignKeyword_1_0() { return cLESS_OR_EQUALLessThanSignEqualsSignKeyword_1_0; }
		
		//GREATER_OR_EQUAL='>='
		public Assignment getGREATER_OR_EQUALAssignment_2() { return cGREATER_OR_EQUALAssignment_2; }
		
		//'>='
		public Keyword getGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_2_0() { return cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_2_0; }
		
		//GREATER='>'
		public Assignment getGREATERAssignment_3() { return cGREATERAssignment_3; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_3_0() { return cGREATERGreaterThanSignKeyword_3_0; }
	}
	public class ArithmeticExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.ArithmeticExpression");
		private final RuleCall cAdditionExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ArithmeticExpression Constraint:
		//	AdditionExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//AdditionExpression
		public RuleCall getAdditionExpressionParserRuleCall() { return cAdditionExpressionParserRuleCall; }
	}
	public class AdditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.AdditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModularExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpressionLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorAdditionOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionModularExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//AdditionExpression Constraint:
		//	ModularExpression ({ArithmeticExpression.leftExpression=current} operator=AdditionOperator
		//	rightExpression=ModularExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ModularExpression ({ArithmeticExpression.leftExpression=current} operator=AdditionOperator
		//rightExpression=ModularExpression)*
		public Group getGroup() { return cGroup; }
		
		//ModularExpression
		public RuleCall getModularExpressionParserRuleCall_0() { return cModularExpressionParserRuleCall_0; }
		
		//({ArithmeticExpression.leftExpression=current} operator=AdditionOperator rightExpression=ModularExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithmeticExpression.leftExpression=current}
		public Action getArithmeticExpressionLeftExpressionAction_1_0() { return cArithmeticExpressionLeftExpressionAction_1_0; }
		
		//operator=AdditionOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//AdditionOperator
		public RuleCall getOperatorAdditionOperatorParserRuleCall_1_1_0() { return cOperatorAdditionOperatorParserRuleCall_1_1_0; }
		
		//rightExpression=ModularExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//ModularExpression
		public RuleCall getRightExpressionModularExpressionParserRuleCall_1_2_0() { return cRightExpressionModularExpressionParserRuleCall_1_2_0; }
	}
	public class AdditionOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.AdditionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cPLUSAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cPLUSPlusSignKeyword_0_0 = (Keyword)cPLUSAssignment_0.eContents().get(0);
		private final Assignment cMINUSAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cMINUSHyphenMinusKeyword_1_0 = (Keyword)cMINUSAssignment_1.eContents().get(0);
		
		//AdditionOperator ArithmeticOperator:
		//	PLUS='+' | MINUS='-';
		@Override public ParserRule getRule() { return rule; }
		
		//PLUS='+' | MINUS='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PLUS='+'
		public Assignment getPLUSAssignment_0() { return cPLUSAssignment_0; }
		
		//'+'
		public Keyword getPLUSPlusSignKeyword_0_0() { return cPLUSPlusSignKeyword_0_0; }
		
		//MINUS='-'
		public Assignment getMINUSAssignment_1() { return cMINUSAssignment_1; }
		
		//'-'
		public Keyword getMINUSHyphenMinusKeyword_1_0() { return cMINUSHyphenMinusKeyword_1_0; }
	}
	public class ModularExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.ModularExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArithmeticExpressionLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorModularOperatorParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionMultiplicationExpressionParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//ModularExpression Constraint:
		//	MultiplicationExpression ({ArithmeticExpression.leftExpression=current} operator=ModularOperator
		//	rightExpression=MultiplicationExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicationExpression ({ArithmeticExpression.leftExpression=current} operator=ModularOperator
		//rightExpression=MultiplicationExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicationExpression
		public RuleCall getMultiplicationExpressionParserRuleCall_0() { return cMultiplicationExpressionParserRuleCall_0; }
		
		//({ArithmeticExpression.leftExpression=current} operator=ModularOperator rightExpression=MultiplicationExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ArithmeticExpression.leftExpression=current}
		public Action getArithmeticExpressionLeftExpressionAction_1_0() { return cArithmeticExpressionLeftExpressionAction_1_0; }
		
		//operator=ModularOperator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//ModularOperator
		public RuleCall getOperatorModularOperatorParserRuleCall_1_1_0() { return cOperatorModularOperatorParserRuleCall_1_1_0; }
		
		//rightExpression=MultiplicationExpression
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//MultiplicationExpression
		public RuleCall getRightExpressionMultiplicationExpressionParserRuleCall_1_2_0() { return cRightExpressionMultiplicationExpressionParserRuleCall_1_2_0; }
	}
	public class ModularOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.ModularOperator");
		private final Assignment cMODAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cMODPercentSignKeyword_0 = (Keyword)cMODAssignment.eContents().get(0);
		
		//ModularOperator ArithmeticOperator:
		//	MOD='%';
		@Override public ParserRule getRule() { return rule; }
		
		//MOD='%'
		public Assignment getMODAssignment() { return cMODAssignment; }
		
		//'%'
		public Keyword getMODPercentSignKeyword_0() { return cMODPercentSignKeyword_0; }
	}
	public class MultiplicationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.MultiplicationExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cUnaryPreExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cOperandParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cArithmeticExpressionLeftExpressionAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cOperatorMultiplicationOperatorParserRuleCall_1_1_1_0 = (RuleCall)cOperatorAssignment_1_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightExpressionOperandParserRuleCall_1_1_2_0 = (RuleCall)cRightExpressionAssignment_1_1_2.eContents().get(0);
		
		//MultiplicationExpression Constraint:
		//	UnaryPreExpression | Operand ({ArithmeticExpression.leftExpression=current} operator=MultiplicationOperator
		//	rightExpression=Operand)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryPreExpression | Operand ({ArithmeticExpression.leftExpression=current} operator=MultiplicationOperator
		//rightExpression=Operand)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//UnaryPreExpression
		public RuleCall getUnaryPreExpressionParserRuleCall_0() { return cUnaryPreExpressionParserRuleCall_0; }
		
		//Operand ({ArithmeticExpression.leftExpression=current} operator=MultiplicationOperator rightExpression=Operand)*
		public Group getGroup_1() { return cGroup_1; }
		
		//Operand
		public RuleCall getOperandParserRuleCall_1_0() { return cOperandParserRuleCall_1_0; }
		
		//({ArithmeticExpression.leftExpression=current} operator=MultiplicationOperator rightExpression=Operand)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{ArithmeticExpression.leftExpression=current}
		public Action getArithmeticExpressionLeftExpressionAction_1_1_0() { return cArithmeticExpressionLeftExpressionAction_1_1_0; }
		
		//operator=MultiplicationOperator
		public Assignment getOperatorAssignment_1_1_1() { return cOperatorAssignment_1_1_1; }
		
		//MultiplicationOperator
		public RuleCall getOperatorMultiplicationOperatorParserRuleCall_1_1_1_0() { return cOperatorMultiplicationOperatorParserRuleCall_1_1_1_0; }
		
		//rightExpression=Operand
		public Assignment getRightExpressionAssignment_1_1_2() { return cRightExpressionAssignment_1_1_2; }
		
		//Operand
		public RuleCall getRightExpressionOperandParserRuleCall_1_1_2_0() { return cRightExpressionOperandParserRuleCall_1_1_2_0; }
	}
	public class MultiplicationOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.MultiplicationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTIMESAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTIMESAsteriskKeyword_0_0 = (Keyword)cTIMESAssignment_0.eContents().get(0);
		private final Assignment cDIVIDEAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cDIVIDESolidusKeyword_1_0 = (Keyword)cDIVIDEAssignment_1.eContents().get(0);
		
		//MultiplicationOperator ArithmeticOperator:
		//	TIMES='*' | DIVIDE='/';
		@Override public ParserRule getRule() { return rule; }
		
		//TIMES='*' | DIVIDE='/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TIMES='*'
		public Assignment getTIMESAssignment_0() { return cTIMESAssignment_0; }
		
		//'*'
		public Keyword getTIMESAsteriskKeyword_0_0() { return cTIMESAsteriskKeyword_0_0; }
		
		//DIVIDE='/'
		public Assignment getDIVIDEAssignment_1() { return cDIVIDEAssignment_1; }
		
		//'/'
		public Keyword getDIVIDESolidusKeyword_1_0() { return cDIVIDESolidusKeyword_1_0; }
	}
	public class UnaryPreExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.UnaryPreExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUnaryPreExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorUnaryPreOperatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cEnclosedExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEnclosedExpressionOperandParserRuleCall_1_1_0 = (RuleCall)cEnclosedExpressionAssignment_1_1.eContents().get(0);
		
		//UnaryPreExpression Constraint:
		//	{UnaryPreExpression} (operator=UnaryPreOperator enclosedExpression=Operand);
		@Override public ParserRule getRule() { return rule; }
		
		//{UnaryPreExpression} (operator=UnaryPreOperator enclosedExpression=Operand)
		public Group getGroup() { return cGroup; }
		
		//{UnaryPreExpression}
		public Action getUnaryPreExpressionAction_0() { return cUnaryPreExpressionAction_0; }
		
		//(operator=UnaryPreOperator enclosedExpression=Operand)
		public Group getGroup_1() { return cGroup_1; }
		
		//operator=UnaryPreOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//UnaryPreOperator
		public RuleCall getOperatorUnaryPreOperatorParserRuleCall_1_0_0() { return cOperatorUnaryPreOperatorParserRuleCall_1_0_0; }
		
		//enclosedExpression=Operand
		public Assignment getEnclosedExpressionAssignment_1_1() { return cEnclosedExpressionAssignment_1_1; }
		
		//Operand
		public RuleCall getEnclosedExpressionOperandParserRuleCall_1_1_0() { return cEnclosedExpressionOperandParserRuleCall_1_1_0; }
	}
	public class OperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.Operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cConstraintParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cConsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Operand Constraint:
		//	'(' Constraint ')' | Cons;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Constraint ')' | Cons
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Constraint ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Constraint
		public RuleCall getConstraintParserRuleCall_0_1() { return cConstraintParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//Cons
		public RuleCall getConsParserRuleCall_1() { return cConsParserRuleCall_1; }
	}
	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.LiteralExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cNameLiteralParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNameAggregateExpressionParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cPreDefinedPredicatesParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LiteralExpression:
		//	name=Literal | name=AggregateExpression | PreDefinedPredicates;
		@Override public ParserRule getRule() { return rule; }
		
		//name=Literal | name=AggregateExpression | PreDefinedPredicates
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=Literal
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//Literal
		public RuleCall getNameLiteralParserRuleCall_0_0() { return cNameLiteralParserRuleCall_0_0; }
		
		//name=AggregateExpression
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//AggregateExpression
		public RuleCall getNameAggregateExpressionParserRuleCall_1_0() { return cNameAggregateExpressionParserRuleCall_1_0; }
		
		//PreDefinedPredicates
		public RuleCall getPreDefinedPredicatesParserRuleCall_2() { return cPreDefinedPredicatesParserRuleCall_2; }
	}
	public class PreDefinedPredicatesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.PreDefinedPredicates");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPredNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cPredNameNeverTypeOfKeyword_0_0_0 = (Keyword)cPredNameAssignment_0_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cObjAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cObjObjectCrossReference_0_2_0 = (CrossReference)cObjAssignment_0_2.eContents().get(0);
		private final RuleCall cObjObjectIDTerminalRuleCall_0_2_0_1 = (RuleCall)cObjObjectCrossReference_0_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cTypeAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cTypeJvmTypeParserRuleCall_0_4_0 = (RuleCall)cTypeAssignment_0_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPredNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cPredNameNoCallToKeyword_1_0_0 = (Keyword)cPredNameAssignment_1_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cObjAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cObjEventCrossReference_1_2_0 = (CrossReference)cObjAssignment_1_2.eContents().get(0);
		private final RuleCall cObjEventIDTerminalRuleCall_1_2_0_1 = (RuleCall)cObjEventCrossReference_1_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cPredNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cPredNameCallToKeyword_2_0_0 = (Keyword)cPredNameAssignment_2_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cObjAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cObjEventCrossReference_2_2_0 = (CrossReference)cObjAssignment_2_2.eContents().get(0);
		private final RuleCall cObjEventIDTerminalRuleCall_2_2_0_1 = (RuleCall)cObjEventCrossReference_2_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cPredNameAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cPredNameNotHardCodedKeyword_3_0_0 = (Keyword)cPredNameAssignment_3_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cObjAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cObjObjectCrossReference_3_2_0 = (CrossReference)cObjAssignment_3_2.eContents().get(0);
		private final RuleCall cObjObjectIDTerminalRuleCall_3_2_0_1 = (RuleCall)cObjObjectCrossReference_3_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cPredNameAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cPredNameLengthKeyword_4_0_0 = (Keyword)cPredNameAssignment_4_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cObjAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cObjObjectCrossReference_4_2_0 = (CrossReference)cObjAssignment_4_2.eContents().get(0);
		private final RuleCall cObjObjectIDTerminalRuleCall_4_2_0_1 = (RuleCall)cObjObjectCrossReference_4_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cPredNameAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cPredNameInstanceOfKeyword_5_0_0 = (Keyword)cPredNameAssignment_5_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cObjAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cObjObjectCrossReference_5_2_0 = (CrossReference)cObjAssignment_5_2.eContents().get(0);
		private final RuleCall cObjObjectIDTerminalRuleCall_5_2_0_1 = (RuleCall)cObjObjectCrossReference_5_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cTypeAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cTypeJvmTypeParserRuleCall_5_4_0 = (RuleCall)cTypeAssignment_5_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_5 = (Keyword)cGroup_5.eContents().get(5);
		
		//PreDefinedPredicates:
		//	predName="neverTypeOf"+ "[" obj+=[Object] "," type=JvmType "]" | predName="noCallTo"+ "[" obj+=[Event] "]" |
		//	predName="callTo"+ "[" obj+=[Event] "]" | predName="notHardCoded"+ "[" obj+=[Object] "]" | predName="length"+ "["
		//	obj+=[Object] "]" | predName="instanceOf"+ "[" obj+=[Object] "," type=JvmType "]";
		@Override public ParserRule getRule() { return rule; }
		
		//predName="neverTypeOf"+ "[" obj+=[Object] "," type=JvmType "]" | predName="noCallTo"+ "[" obj+=[Event] "]" |
		//predName="callTo"+ "[" obj+=[Event] "]" | predName="notHardCoded"+ "[" obj+=[Object] "]" | predName="length"+ "["
		//obj+=[Object] "]" | predName="instanceOf"+ "[" obj+=[Object] "," type=JvmType "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//predName="neverTypeOf"+ "[" obj+=[Object] "," type=JvmType "]"
		public Group getGroup_0() { return cGroup_0; }
		
		//predName="neverTypeOf"+
		public Assignment getPredNameAssignment_0_0() { return cPredNameAssignment_0_0; }
		
		//"neverTypeOf"
		public Keyword getPredNameNeverTypeOfKeyword_0_0_0() { return cPredNameNeverTypeOfKeyword_0_0_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }
		
		//obj+=[Object]
		public Assignment getObjAssignment_0_2() { return cObjAssignment_0_2; }
		
		//[Object]
		public CrossReference getObjObjectCrossReference_0_2_0() { return cObjObjectCrossReference_0_2_0; }
		
		//ID
		public RuleCall getObjObjectIDTerminalRuleCall_0_2_0_1() { return cObjObjectIDTerminalRuleCall_0_2_0_1; }
		
		//","
		public Keyword getCommaKeyword_0_3() { return cCommaKeyword_0_3; }
		
		//type=JvmType
		public Assignment getTypeAssignment_0_4() { return cTypeAssignment_0_4; }
		
		//JvmType
		public RuleCall getTypeJvmTypeParserRuleCall_0_4_0() { return cTypeJvmTypeParserRuleCall_0_4_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_0_5() { return cRightSquareBracketKeyword_0_5; }
		
		//predName="noCallTo"+ "[" obj+=[Event] "]"
		public Group getGroup_1() { return cGroup_1; }
		
		//predName="noCallTo"+
		public Assignment getPredNameAssignment_1_0() { return cPredNameAssignment_1_0; }
		
		//"noCallTo"
		public Keyword getPredNameNoCallToKeyword_1_0_0() { return cPredNameNoCallToKeyword_1_0_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }
		
		//obj+=[Event]
		public Assignment getObjAssignment_1_2() { return cObjAssignment_1_2; }
		
		//[Event]
		public CrossReference getObjEventCrossReference_1_2_0() { return cObjEventCrossReference_1_2_0; }
		
		//ID
		public RuleCall getObjEventIDTerminalRuleCall_1_2_0_1() { return cObjEventIDTerminalRuleCall_1_2_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
		
		//predName="callTo"+ "[" obj+=[Event] "]"
		public Group getGroup_2() { return cGroup_2; }
		
		//predName="callTo"+
		public Assignment getPredNameAssignment_2_0() { return cPredNameAssignment_2_0; }
		
		//"callTo"
		public Keyword getPredNameCallToKeyword_2_0_0() { return cPredNameCallToKeyword_2_0_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_2_1() { return cLeftSquareBracketKeyword_2_1; }
		
		//obj+=[Event]
		public Assignment getObjAssignment_2_2() { return cObjAssignment_2_2; }
		
		//[Event]
		public CrossReference getObjEventCrossReference_2_2_0() { return cObjEventCrossReference_2_2_0; }
		
		//ID
		public RuleCall getObjEventIDTerminalRuleCall_2_2_0_1() { return cObjEventIDTerminalRuleCall_2_2_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
		
		//predName="notHardCoded"+ "[" obj+=[Object] "]"
		public Group getGroup_3() { return cGroup_3; }
		
		//predName="notHardCoded"+
		public Assignment getPredNameAssignment_3_0() { return cPredNameAssignment_3_0; }
		
		//"notHardCoded"
		public Keyword getPredNameNotHardCodedKeyword_3_0_0() { return cPredNameNotHardCodedKeyword_3_0_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_3_1() { return cLeftSquareBracketKeyword_3_1; }
		
		//obj+=[Object]
		public Assignment getObjAssignment_3_2() { return cObjAssignment_3_2; }
		
		//[Object]
		public CrossReference getObjObjectCrossReference_3_2_0() { return cObjObjectCrossReference_3_2_0; }
		
		//ID
		public RuleCall getObjObjectIDTerminalRuleCall_3_2_0_1() { return cObjObjectIDTerminalRuleCall_3_2_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }
		
		//predName="length"+ "[" obj+=[Object] "]"
		public Group getGroup_4() { return cGroup_4; }
		
		//predName="length"+
		public Assignment getPredNameAssignment_4_0() { return cPredNameAssignment_4_0; }
		
		//"length"
		public Keyword getPredNameLengthKeyword_4_0_0() { return cPredNameLengthKeyword_4_0_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_4_1() { return cLeftSquareBracketKeyword_4_1; }
		
		//obj+=[Object]
		public Assignment getObjAssignment_4_2() { return cObjAssignment_4_2; }
		
		//[Object]
		public CrossReference getObjObjectCrossReference_4_2_0() { return cObjObjectCrossReference_4_2_0; }
		
		//ID
		public RuleCall getObjObjectIDTerminalRuleCall_4_2_0_1() { return cObjObjectIDTerminalRuleCall_4_2_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }
		
		//predName="instanceOf"+ "[" obj+=[Object] "," type=JvmType "]"
		public Group getGroup_5() { return cGroup_5; }
		
		//predName="instanceOf"+
		public Assignment getPredNameAssignment_5_0() { return cPredNameAssignment_5_0; }
		
		//"instanceOf"
		public Keyword getPredNameInstanceOfKeyword_5_0_0() { return cPredNameInstanceOfKeyword_5_0_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_5_1() { return cLeftSquareBracketKeyword_5_1; }
		
		//obj+=[Object]
		public Assignment getObjAssignment_5_2() { return cObjAssignment_5_2; }
		
		//[Object]
		public CrossReference getObjObjectCrossReference_5_2_0() { return cObjObjectCrossReference_5_2_0; }
		
		//ID
		public RuleCall getObjObjectIDTerminalRuleCall_5_2_0_1() { return cObjObjectIDTerminalRuleCall_5_2_0_1; }
		
		//","
		public Keyword getCommaKeyword_5_3() { return cCommaKeyword_5_3; }
		
		//type=JvmType
		public Assignment getTypeAssignment_5_4() { return cTypeAssignment_5_4; }
		
		//JvmType
		public RuleCall getTypeJvmTypeParserRuleCall_5_4_0() { return cTypeJvmTypeParserRuleCall_5_4_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_5_5() { return cRightSquareBracketKeyword_5_5; }
	}
	public class JvmTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.JvmType");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTypeJvmTypeCrossReference_0 = (CrossReference)cTypeAssignment.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_0_1 = (RuleCall)cTypeJvmTypeCrossReference_0.eContents().get(1);
		
		//JvmType:
		//	type=[jvmTypes::JvmType|QualifiedName];
		@Override public ParserRule getRule() { return rule; }
		
		//type=[jvmTypes::JvmType|QualifiedName]
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_0() { return cTypeJvmTypeCrossReference_0; }
		
		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_0_1; }
	}
	public class AggregateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.AggregateExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cValueSuperTypeCrossReference_0_0 = (CrossReference)cValueAssignment_0.eContents().get(0);
		private final RuleCall cValueSuperTypeIDTerminalRuleCall_0_0_1 = (RuleCall)cValueSuperTypeCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//AggregateExpression LiteralExpression:
		//	value=[SuperType] ("." ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//value=[SuperType] ("." ID)?
		public Group getGroup() { return cGroup; }
		
		//value=[SuperType]
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//[SuperType]
		public CrossReference getValueSuperTypeCrossReference_0_0() { return cValueSuperTypeCrossReference_0_0; }
		
		//ID
		public RuleCall getValueSuperTypeIDTerminalRuleCall_0_0_1() { return cValueSuperTypeIDTerminalRuleCall_0_0_1; }
		
		//("." ID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.Literal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValAlternatives_1_0 = (Alternatives)cValAssignment_1.eContents().get(0);
		private final RuleCall cValStringLiteralParserRuleCall_1_0_0 = (RuleCall)cValAlternatives_1_0.eContents().get(0);
		private final RuleCall cValIntegerLiteralParserRuleCall_1_0_1 = (RuleCall)cValAlternatives_1_0.eContents().get(1);
		private final RuleCall cValBooleanLiteralParserRuleCall_1_0_2 = (RuleCall)cValAlternatives_1_0.eContents().get(2);
		
		//Literal:
		//	{Literal} val=(StringLiteral | IntegerLiteral | BooleanLiteral);
		@Override public ParserRule getRule() { return rule; }
		
		//{Literal} val=(StringLiteral | IntegerLiteral | BooleanLiteral)
		public Group getGroup() { return cGroup; }
		
		//{Literal}
		public Action getLiteralAction_0() { return cLiteralAction_0; }
		
		//val=(StringLiteral | IntegerLiteral | BooleanLiteral)
		public Assignment getValAssignment_1() { return cValAssignment_1; }
		
		//(StringLiteral | IntegerLiteral | BooleanLiteral)
		public Alternatives getValAlternatives_1_0() { return cValAlternatives_1_0; }
		
		//StringLiteral
		public RuleCall getValStringLiteralParserRuleCall_1_0_0() { return cValStringLiteralParserRuleCall_1_0_0; }
		
		//IntegerLiteral
		public RuleCall getValIntegerLiteralParserRuleCall_1_0_1() { return cValIntegerLiteralParserRuleCall_1_0_1; }
		
		//BooleanLiteral
		public RuleCall getValBooleanLiteralParserRuleCall_1_0_2() { return cValBooleanLiteralParserRuleCall_1_0_2; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.StringLiteral");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringLiteral:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.IntegerLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//IntegerLiteral:
		//	INT | INT '^' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | INT '^' INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//INT '^' INT
		public Group getGroup_1() { return cGroup_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0() { return cINTTerminalRuleCall_1_0; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.BooleanLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BooleanLiteral:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class UnaryPreOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.UnaryPreOperator");
		private final Assignment cNOTAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNOTExclamationMarkKeyword_0 = (Keyword)cNOTAssignment.eContents().get(0);
		
		//UnaryPreOperator UnaryOperator:
		//	NOT='!';
		@Override public ParserRule getRule() { return rule; }
		
		//NOT='!'
		public Assignment getNOTAssignment() { return cNOTAssignment; }
		
		//'!'
		public Keyword getNOTExclamationMarkKeyword_0() { return cNOTExclamationMarkKeyword_0; }
	}
	public class ComparingEQNEQOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.ComparingEQNEQOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEQUALAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQUALAssignment_0.eContents().get(0);
		private final Assignment cUNEQUALAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cUNEQUALExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cUNEQUALAssignment_1.eContents().get(0);
		
		//ComparingEQNEQOperator ComparingOperator:
		//	EQUAL='==' | UNEQUAL='!=';
		@Override public ParserRule getRule() { return rule; }
		
		//EQUAL='==' | UNEQUAL='!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL='=='
		public Assignment getEQUALAssignment_0() { return cEQUALAssignment_0; }
		
		//'=='
		public Keyword getEQUALEqualsSignEqualsSignKeyword_0_0() { return cEQUALEqualsSignEqualsSignKeyword_0_0; }
		
		//UNEQUAL='!='
		public Assignment getUNEQUALAssignment_1() { return cUNEQUALAssignment_1; }
		
		//'!='
		public Keyword getUNEQUALExclamationMarkEqualsSignKeyword_1_0() { return cUNEQUALExclamationMarkEqualsSignKeyword_1_0; }
	}
	public class ConsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.Cons");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cConsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cConsArrayElementsParserRuleCall_0_0_0 = (RuleCall)cConsAssignment_0_0.eContents().get(0);
		private final Keyword cInKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cLitsleftAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cLitsleftLitListParserRuleCall_0_3_0 = (RuleCall)cLitsleftAssignment_0_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cConsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConsLiteralExpressionParserRuleCall_1_0 = (RuleCall)cConsAssignment_1.eContents().get(0);
		
		//Cons LiteralExpression:
		//	cons=ArrayElements "in" "{" litsleft=LitList "}" | cons=LiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//cons=ArrayElements "in" "{" litsleft=LitList "}" | cons=LiteralExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//cons=ArrayElements "in" "{" litsleft=LitList "}"
		public Group getGroup_0() { return cGroup_0; }
		
		//cons=ArrayElements
		public Assignment getConsAssignment_0_0() { return cConsAssignment_0_0; }
		
		//ArrayElements
		public RuleCall getConsArrayElementsParserRuleCall_0_0_0() { return cConsArrayElementsParserRuleCall_0_0_0; }
		
		//"in"
		public Keyword getInKeyword_0_1() { return cInKeyword_0_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_2() { return cLeftCurlyBracketKeyword_0_2; }
		
		//litsleft=LitList
		public Assignment getLitsleftAssignment_0_3() { return cLitsleftAssignment_0_3; }
		
		//LitList
		public RuleCall getLitsleftLitListParserRuleCall_0_3_0() { return cLitsleftLitListParserRuleCall_0_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }
		
		//cons=LiteralExpression
		public Assignment getConsAssignment_1() { return cConsAssignment_1; }
		
		//LiteralExpression
		public RuleCall getConsLiteralExpressionParserRuleCall_1_0() { return cConsLiteralExpressionParserRuleCall_1_0; }
	}
	public class ArrayElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.ArrayElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cElAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cElElementsKeyword_0_0_0 = (Keyword)cElAssignment_0_0.eContents().get(0);
		private final Assignment cConsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cConsConsPredParserRuleCall_0_1_0 = (RuleCall)cConsAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cConsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cConsConsPredParserRuleCall_1_0 = (RuleCall)cConsAssignment_1.eContents().get(0);
		
		//ArrayElements:
		//	el="elements(" cons=ConsPred ")" | cons=ConsPred;
		@Override public ParserRule getRule() { return rule; }
		
		//el="elements(" cons=ConsPred ")" | cons=ConsPred
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//el="elements(" cons=ConsPred ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//el="elements("
		public Assignment getElAssignment_0_0() { return cElAssignment_0_0; }
		
		//"elements("
		public Keyword getElElementsKeyword_0_0_0() { return cElElementsKeyword_0_0_0; }
		
		//cons=ConsPred
		public Assignment getConsAssignment_0_1() { return cConsAssignment_0_1; }
		
		//ConsPred
		public RuleCall getConsConsPredParserRuleCall_0_1_0() { return cConsConsPredParserRuleCall_0_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//cons=ConsPred
		public Assignment getConsAssignment_1() { return cConsAssignment_1; }
		
		//ConsPred
		public RuleCall getConsConsPredParserRuleCall_1_0() { return cConsConsPredParserRuleCall_1_0; }
	}
	public class ConsPredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.ConsPred");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cConsPredAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final Keyword cConsPredAlgKeyword_0_0_0_0 = (Keyword)cConsPredAssignment_0_0_0.eContents().get(0);
		private final Assignment cLitAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cLitLiteralExpressionParserRuleCall_0_0_1_0 = (RuleCall)cLitAssignment_0_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Assignment cConsPredAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final Keyword cConsPredModeKeyword_0_1_0_0 = (Keyword)cConsPredAssignment_0_1_0.eContents().get(0);
		private final Assignment cLitAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cLitLiteralExpressionParserRuleCall_0_1_1_0 = (RuleCall)cLitAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Group cGroup_0_2 = (Group)cAlternatives_0.eContents().get(2);
		private final Assignment cConsPredAssignment_0_2_0 = (Assignment)cGroup_0_2.eContents().get(0);
		private final Keyword cConsPredPadKeyword_0_2_0_0 = (Keyword)cConsPredAssignment_0_2_0.eContents().get(0);
		private final Assignment cLitAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cLitLiteralExpressionParserRuleCall_0_2_1_0 = (RuleCall)cLitAssignment_0_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_2 = (Keyword)cGroup_0_2.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPartAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cPartPartKeyword_1_0_0 = (Keyword)cPartAssignment_1_0.eContents().get(0);
		private final Assignment cIndAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIndIntegerLiteralParserRuleCall_1_1_0 = (RuleCall)cIndAssignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cSplitAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cSplitStringLiteralParserRuleCall_1_3_0 = (RuleCall)cSplitAssignment_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cLitAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cLitLiteralExpressionParserRuleCall_1_5_0 = (RuleCall)cLitAssignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Assignment cLitAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLitLiteralExpressionParserRuleCall_2_0 = (RuleCall)cLitAssignment_2.eContents().get(0);
		
		//ConsPred LiteralExpression:
		//	(consPred="alg(" lit=LiteralExpression ")" | consPred="mode(" lit=LiteralExpression ")" | consPred="pad("
		//	lit=LiteralExpression ")") | part="part(" ind=IntegerLiteral "," split=StringLiteral "," lit=LiteralExpression ")" |
		//	lit=LiteralExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//(consPred="alg(" lit=LiteralExpression ")" | consPred="mode(" lit=LiteralExpression ")" | consPred="pad("
		//lit=LiteralExpression ")") | part="part(" ind=IntegerLiteral "," split=StringLiteral "," lit=LiteralExpression ")" |
		//lit=LiteralExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//(consPred="alg(" lit=LiteralExpression ")" | consPred="mode(" lit=LiteralExpression ")" | consPred="pad("
		//lit=LiteralExpression ")")
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//consPred="alg(" lit=LiteralExpression ")"
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//consPred="alg("
		public Assignment getConsPredAssignment_0_0_0() { return cConsPredAssignment_0_0_0; }
		
		//"alg("
		public Keyword getConsPredAlgKeyword_0_0_0_0() { return cConsPredAlgKeyword_0_0_0_0; }
		
		//lit=LiteralExpression
		public Assignment getLitAssignment_0_0_1() { return cLitAssignment_0_0_1; }
		
		//LiteralExpression
		public RuleCall getLitLiteralExpressionParserRuleCall_0_0_1_0() { return cLitLiteralExpressionParserRuleCall_0_0_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_0_2() { return cRightParenthesisKeyword_0_0_2; }
		
		//consPred="mode(" lit=LiteralExpression ")"
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//consPred="mode("
		public Assignment getConsPredAssignment_0_1_0() { return cConsPredAssignment_0_1_0; }
		
		//"mode("
		public Keyword getConsPredModeKeyword_0_1_0_0() { return cConsPredModeKeyword_0_1_0_0; }
		
		//lit=LiteralExpression
		public Assignment getLitAssignment_0_1_1() { return cLitAssignment_0_1_1; }
		
		//LiteralExpression
		public RuleCall getLitLiteralExpressionParserRuleCall_0_1_1_0() { return cLitLiteralExpressionParserRuleCall_0_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_1_2() { return cRightParenthesisKeyword_0_1_2; }
		
		//consPred="pad(" lit=LiteralExpression ")"
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//consPred="pad("
		public Assignment getConsPredAssignment_0_2_0() { return cConsPredAssignment_0_2_0; }
		
		//"pad("
		public Keyword getConsPredPadKeyword_0_2_0_0() { return cConsPredPadKeyword_0_2_0_0; }
		
		//lit=LiteralExpression
		public Assignment getLitAssignment_0_2_1() { return cLitAssignment_0_2_1; }
		
		//LiteralExpression
		public RuleCall getLitLiteralExpressionParserRuleCall_0_2_1_0() { return cLitLiteralExpressionParserRuleCall_0_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_2_2() { return cRightParenthesisKeyword_0_2_2; }
		
		//part="part(" ind=IntegerLiteral "," split=StringLiteral "," lit=LiteralExpression ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//part="part("
		public Assignment getPartAssignment_1_0() { return cPartAssignment_1_0; }
		
		//"part("
		public Keyword getPartPartKeyword_1_0_0() { return cPartPartKeyword_1_0_0; }
		
		//ind=IntegerLiteral
		public Assignment getIndAssignment_1_1() { return cIndAssignment_1_1; }
		
		//IntegerLiteral
		public RuleCall getIndIntegerLiteralParserRuleCall_1_1_0() { return cIndIntegerLiteralParserRuleCall_1_1_0; }
		
		//","
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//split=StringLiteral
		public Assignment getSplitAssignment_1_3() { return cSplitAssignment_1_3; }
		
		//StringLiteral
		public RuleCall getSplitStringLiteralParserRuleCall_1_3_0() { return cSplitStringLiteralParserRuleCall_1_3_0; }
		
		//","
		public Keyword getCommaKeyword_1_4() { return cCommaKeyword_1_4; }
		
		//lit=LiteralExpression
		public Assignment getLitAssignment_1_5() { return cLitAssignment_1_5; }
		
		//LiteralExpression
		public RuleCall getLitLiteralExpressionParserRuleCall_1_5_0() { return cLitLiteralExpressionParserRuleCall_1_5_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }
		
		//lit=LiteralExpression
		public Assignment getLitAssignment_2() { return cLitAssignment_2; }
		
		//LiteralExpression
		public RuleCall getLitLiteralExpressionParserRuleCall_2_0() { return cLitLiteralExpressionParserRuleCall_2_0; }
	}
	public class LitListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.LitList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersLiteralParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cParametersAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cParametersLiteralParserRuleCall_1_1_0_0 = (RuleCall)cParametersAssignment_1_1_0.eContents().get(0);
		private final Keyword cFullStopFullStopFullStopKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		
		//LitList:
		//	parameters+=Literal (',' (parameters+=Literal | '...'))*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=Literal (',' (parameters+=Literal | '...'))*
		public Group getGroup() { return cGroup; }
		
		//parameters+=Literal
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//Literal
		public RuleCall getParametersLiteralParserRuleCall_0_0() { return cParametersLiteralParserRuleCall_0_0; }
		
		//(',' (parameters+=Literal | '...'))*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//(parameters+=Literal | '...')
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//parameters+=Literal
		public Assignment getParametersAssignment_1_1_0() { return cParametersAssignment_1_1_0; }
		
		//Literal
		public RuleCall getParametersLiteralParserRuleCall_1_1_0_0() { return cParametersLiteralParserRuleCall_1_1_0_0; }
		
		//'...'
		public Keyword getFullStopFullStopFullStopKeyword_1_1_1() { return cFullStopFullStopFullStopKeyword_1_1_1; }
	}
	public class PredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.Pred");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredNameIDTerminalRuleCall_0_0 = (RuleCall)cPredNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cParListAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cParListSuParListParserRuleCall_1_0_1_0 = (RuleCall)cParListAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//Pred:
		//	predName=ID ('[' parList=SuParList ']' | "[]");
		@Override public ParserRule getRule() { return rule; }
		
		//predName=ID ('[' parList=SuParList ']' | "[]")
		public Group getGroup() { return cGroup; }
		
		//predName=ID
		public Assignment getPredNameAssignment_0() { return cPredNameAssignment_0; }
		
		//ID
		public RuleCall getPredNameIDTerminalRuleCall_0_0() { return cPredNameIDTerminalRuleCall_0_0; }
		
		//('[' parList=SuParList ']' | "[]")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'[' parList=SuParList ']'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }
		
		//parList=SuParList
		public Assignment getParListAssignment_1_0_1() { return cParListAssignment_1_0_1; }
		
		//SuParList
		public RuleCall getParListSuParListParserRuleCall_1_0_1_0() { return cParListSuParListParserRuleCall_1_0_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_0_2() { return cRightSquareBracketKeyword_1_0_2; }
		
		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_1() { return cLeftSquareBracketRightSquareBracketKeyword_1_1; }
	}
	public class ReqPredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.ReqPred");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPredLitParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cReqPredLeftExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLogicalOrParserRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cRightExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpressionPredLitParserRuleCall_1_2_0 = (RuleCall)cRightExpressionAssignment_1_2.eContents().get(0);
		
		//ReqPred:
		//	PredLit ({ReqPred.leftExpression=current} operator=LogicalOr rightExpression=PredLit)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PredLit ({ReqPred.leftExpression=current} operator=LogicalOr rightExpression=PredLit)*
		public Group getGroup() { return cGroup; }
		
		//PredLit
		public RuleCall getPredLitParserRuleCall_0() { return cPredLitParserRuleCall_0; }
		
		//({ReqPred.leftExpression=current} operator=LogicalOr rightExpression=PredLit)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{ReqPred.leftExpression=current}
		public Action getReqPredLeftExpressionAction_1_0() { return cReqPredLeftExpressionAction_1_0; }
		
		//operator=LogicalOr
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//LogicalOr
		public RuleCall getOperatorLogicalOrParserRuleCall_1_1_0() { return cOperatorLogicalOrParserRuleCall_1_1_0; }
		
		//rightExpression=PredLit
		public Assignment getRightExpressionAssignment_1_2() { return cRightExpressionAssignment_1_2; }
		
		//PredLit
		public RuleCall getRightExpressionPredLitParserRuleCall_1_2_0() { return cRightExpressionPredLitParserRuleCall_1_2_0; }
	}
	public class PredLitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.PredLit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cConsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cConsConstraintParserRuleCall_0_0_0 = (RuleCall)cConsAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNotAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNotExclamationMarkKeyword_1_0 = (Keyword)cNotAssignment_1.eContents().get(0);
		private final Assignment cPredAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPredPredParserRuleCall_2_0 = (RuleCall)cPredAssignment_2.eContents().get(0);
		
		//PredLit:
		//	(cons=Constraint "=>")? not='!'? pred=Pred;
		@Override public ParserRule getRule() { return rule; }
		
		//(cons=Constraint "=>")? not='!'? pred=Pred
		public Group getGroup() { return cGroup; }
		
		//(cons=Constraint "=>")?
		public Group getGroup_0() { return cGroup_0; }
		
		//cons=Constraint
		public Assignment getConsAssignment_0_0() { return cConsAssignment_0_0; }
		
		//Constraint
		public RuleCall getConsConstraintParserRuleCall_0_0_0() { return cConsConstraintParserRuleCall_0_0_0; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_0_1() { return cEqualsSignGreaterThanSignKeyword_0_1; }
		
		//not='!'?
		public Assignment getNotAssignment_1() { return cNotAssignment_1; }
		
		//'!'
		public Keyword getNotExclamationMarkKeyword_1_0() { return cNotExclamationMarkKeyword_1_0; }
		
		//pred=Pred
		public Assignment getPredAssignment_2() { return cPredAssignment_2; }
		
		//Pred
		public RuleCall getPredPredParserRuleCall_2_0() { return cPredPredParserRuleCall_2_0; }
	}
	public class EnsPredElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.EnsPred");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredLitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPredLitPredLitParserRuleCall_0_0 = (RuleCall)cPredLitAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAfterKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLabelCondAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cLabelCondSuperTypeCrossReference_1_1_0 = (CrossReference)cLabelCondAssignment_1_1.eContents().get(0);
		private final RuleCall cLabelCondSuperTypeIDTerminalRuleCall_1_1_0_1 = (RuleCall)cLabelCondSuperTypeCrossReference_1_1_0.eContents().get(1);
		
		//EnsPred Constraint:
		//	predLit=PredLit ('after' labelCond=[SuperType])?;
		@Override public ParserRule getRule() { return rule; }
		
		//predLit=PredLit ('after' labelCond=[SuperType])?
		public Group getGroup() { return cGroup; }
		
		//predLit=PredLit
		public Assignment getPredLitAssignment_0() { return cPredLitAssignment_0; }
		
		//PredLit
		public RuleCall getPredLitPredLitParserRuleCall_0_0() { return cPredLitPredLitParserRuleCall_0_0; }
		
		//('after' labelCond=[SuperType])?
		public Group getGroup_1() { return cGroup_1; }
		
		//'after'
		public Keyword getAfterKeyword_1_0() { return cAfterKeyword_1_0; }
		
		//labelCond=[SuperType]
		public Assignment getLabelCondAssignment_1_1() { return cLabelCondAssignment_1_1; }
		
		//[SuperType]
		public CrossReference getLabelCondSuperTypeCrossReference_1_1_0() { return cLabelCondSuperTypeCrossReference_1_1_0; }
		
		//ID
		public RuleCall getLabelCondSuperTypeIDTerminalRuleCall_1_1_0_1() { return cLabelCondSuperTypeIDTerminalRuleCall_1_1_0_1; }
	}
	public class SuParListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.SuParList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParametersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParametersSuParParserRuleCall_0_0 = (RuleCall)cParametersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersSuParParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//SuParList:
		//	parameters+=SuPar (',' parameters+=SuPar)*;
		@Override public ParserRule getRule() { return rule; }
		
		//parameters+=SuPar (',' parameters+=SuPar)*
		public Group getGroup() { return cGroup; }
		
		//parameters+=SuPar
		public Assignment getParametersAssignment_0() { return cParametersAssignment_0; }
		
		//SuPar
		public RuleCall getParametersSuParParserRuleCall_0_0() { return cParametersSuParParserRuleCall_0_0; }
		
		//(',' parameters+=SuPar)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//parameters+=SuPar
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }
		
		//SuPar
		public RuleCall getParametersSuParParserRuleCall_1_1_0() { return cParametersSuParParserRuleCall_1_1_0; }
	}
	public class SuParElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.SuPar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSuParAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValConsPredParserRuleCall_1_0_0 = (RuleCall)cValAssignment_1_0.eContents().get(0);
		private final Keyword c_Keyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cThisKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		
		//SuPar:
		//	{SuPar} (val=ConsPred | '_' | 'this');
		@Override public ParserRule getRule() { return rule; }
		
		//{SuPar} (val=ConsPred | '_' | 'this')
		public Group getGroup() { return cGroup; }
		
		//{SuPar}
		public Action getSuParAction_0() { return cSuParAction_0; }
		
		//(val=ConsPred | '_' | 'this')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//val=ConsPred
		public Assignment getValAssignment_1_0() { return cValAssignment_1_0; }
		
		//ConsPred
		public RuleCall getValConsPredParserRuleCall_1_0_0() { return cValConsPredParserRuleCall_1_0_0; }
		
		//'_'
		public Keyword get_Keyword_1_1() { return c_Keyword_1_1; }
		
		//'this'
		public Keyword getThisKeyword_1_2() { return cThisKeyword_1_2; }
	}
	public class ObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.Object");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Object SuperType:
		//	{Object} name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Object} name=ID
		public Group getGroup() { return cGroup; }
		
		//{Object}
		public Action getObjectAction_0() { return cObjectAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final DomainmodelElements pDomainmodel;
	private final UseBlockElements pUseBlock;
	private final ForbiddenBlockElements pForbiddenBlock;
	private final RequiredBlockElements pRequiredBlock;
	private final EnforceConsBlockElements pEnforceConsBlock;
	private final RequiresBlockElements pRequiresBlock;
	private final EnsuresBlockElements pEnsuresBlock;
	private final DestroysBlockElements pDestroysBlock;
	private final ObjectDeclElements pObjectDecl;
	private final JvmParameterizedTypeRefElements pJvmParameterizedTypeRef;
	private final JvmArgumentTypeRefElements pJvmArgumentTypeRef;
	private final JvmWildcardTypeRefElements pJvmWildcardTypeRef;
	private final ForbMethodElements pForbMethod;
	private final FQNElements pFQN;
	private final QNElements pQN;
	private final EventElements pEvent;
	private final LabelMethodCallElements pLabelMethodCall;
	private final MethodElements pMethod;
	private final ParListElements pParList;
	private final ParElements pPar;
	private final AggregateElements pAggregate;
	private final OrderElements pOrder;
	private final SimpleOrderElements pSimpleOrder;
	private final PrimaryElements pPrimary;
	private final ConstraintElements pConstraint;
	private final LogicalImplyExpressionElements pLogicalImplyExpression;
	private final LogicalImplyElements pLogicalImply;
	private final LogicalOrExpressionElements pLogicalOrExpression;
	private final LogicalOrElements pLogicalOr;
	private final LogicalAndExpressionElements pLogicalAndExpression;
	private final LogicalAndElements pLogicalAnd;
	private final ComparisonExpressionElements pComparisonExpression;
	private final ComparisonHigherOpExpressionElements pComparisonHigherOpExpression;
	private final ComparingRelOperatorElements pComparingRelOperator;
	private final ArithmeticExpressionElements pArithmeticExpression;
	private final AdditionExpressionElements pAdditionExpression;
	private final AdditionOperatorElements pAdditionOperator;
	private final ModularExpressionElements pModularExpression;
	private final ModularOperatorElements pModularOperator;
	private final MultiplicationExpressionElements pMultiplicationExpression;
	private final MultiplicationOperatorElements pMultiplicationOperator;
	private final UnaryPreExpressionElements pUnaryPreExpression;
	private final OperandElements pOperand;
	private final LiteralExpressionElements pLiteralExpression;
	private final PreDefinedPredicatesElements pPreDefinedPredicates;
	private final JvmTypeElements pJvmType;
	private final AggregateExpressionElements pAggregateExpression;
	private final LiteralElements pLiteral;
	private final StringLiteralElements pStringLiteral;
	private final IntegerLiteralElements pIntegerLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final UnaryPreOperatorElements pUnaryPreOperator;
	private final ComparingEQNEQOperatorElements pComparingEQNEQOperator;
	private final ConsElements pCons;
	private final ArrayElementsElements pArrayElements;
	private final ConsPredElements pConsPred;
	private final TerminalRule tINT;
	private final LitListElements pLitList;
	private final PredElements pPred;
	private final ReqPredElements pReqPred;
	private final PredLitElements pPredLit;
	private final EnsPredElements pEnsPred;
	private final SuParListElements pSuParList;
	private final SuParElements pSuPar;
	private final ObjectElements pObject;
	
	private final Grammar grammar;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public CrySLGrammarAccess(GrammarProvider grammarProvider,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXtype = gaXtype;
		this.pDomainmodel = new DomainmodelElements();
		this.pUseBlock = new UseBlockElements();
		this.pForbiddenBlock = new ForbiddenBlockElements();
		this.pRequiredBlock = new RequiredBlockElements();
		this.pEnforceConsBlock = new EnforceConsBlockElements();
		this.pRequiresBlock = new RequiresBlockElements();
		this.pEnsuresBlock = new EnsuresBlockElements();
		this.pDestroysBlock = new DestroysBlockElements();
		this.pObjectDecl = new ObjectDeclElements();
		this.pJvmParameterizedTypeRef = new JvmParameterizedTypeRefElements();
		this.pJvmArgumentTypeRef = new JvmArgumentTypeRefElements();
		this.pJvmWildcardTypeRef = new JvmWildcardTypeRefElements();
		this.pForbMethod = new ForbMethodElements();
		this.pFQN = new FQNElements();
		this.pQN = new QNElements();
		this.pEvent = new EventElements();
		this.pLabelMethodCall = new LabelMethodCallElements();
		this.pMethod = new MethodElements();
		this.pParList = new ParListElements();
		this.pPar = new ParElements();
		this.pAggregate = new AggregateElements();
		this.pOrder = new OrderElements();
		this.pSimpleOrder = new SimpleOrderElements();
		this.pPrimary = new PrimaryElements();
		this.pConstraint = new ConstraintElements();
		this.pLogicalImplyExpression = new LogicalImplyExpressionElements();
		this.pLogicalImply = new LogicalImplyElements();
		this.pLogicalOrExpression = new LogicalOrExpressionElements();
		this.pLogicalOr = new LogicalOrElements();
		this.pLogicalAndExpression = new LogicalAndExpressionElements();
		this.pLogicalAnd = new LogicalAndElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pComparisonHigherOpExpression = new ComparisonHigherOpExpressionElements();
		this.pComparingRelOperator = new ComparingRelOperatorElements();
		this.pArithmeticExpression = new ArithmeticExpressionElements();
		this.pAdditionExpression = new AdditionExpressionElements();
		this.pAdditionOperator = new AdditionOperatorElements();
		this.pModularExpression = new ModularExpressionElements();
		this.pModularOperator = new ModularOperatorElements();
		this.pMultiplicationExpression = new MultiplicationExpressionElements();
		this.pMultiplicationOperator = new MultiplicationOperatorElements();
		this.pUnaryPreExpression = new UnaryPreExpressionElements();
		this.pOperand = new OperandElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pPreDefinedPredicates = new PreDefinedPredicatesElements();
		this.pJvmType = new JvmTypeElements();
		this.pAggregateExpression = new AggregateExpressionElements();
		this.pLiteral = new LiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pUnaryPreOperator = new UnaryPreOperatorElements();
		this.pComparingEQNEQOperator = new ComparingEQNEQOperatorElements();
		this.pCons = new ConsElements();
		this.pArrayElements = new ArrayElementsElements();
		this.pConsPred = new ConsPredElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.darmstadt.tu.crossing.CrySL.INT");
		this.pLitList = new LitListElements();
		this.pPred = new PredElements();
		this.pReqPred = new ReqPredElements();
		this.pPredLit = new PredLitElements();
		this.pEnsPred = new EnsPredElements();
		this.pSuParList = new SuParListElements();
		this.pSuPar = new SuParElements();
		this.pObject = new ObjectElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.darmstadt.tu.crossing.CrySL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//Domainmodel:
	//	'SPEC' javaType=[jvmTypes::JvmType|QualifiedName] (array="[]" | "<"
	//	collection=[jvmTypes::JvmGenericType|QualifiedName] ">")? 'OBJECTS' usage=UseBlock ('FORBIDDEN'
	//	forbEvent=ForbiddenBlock)? 'EVENTS' req_events=RequiredBlock 'ORDER' order=Order ('CONSTRAINTS'
	//	reqConstraints=EnforceConsBlock)? ('REQUIRES' require=RequiresBlock)? ('ENSURES' ensure=EnsuresBlock)? ('NEGATES'
	//	destroy=DestroysBlock)?;
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}
	
	//UseBlock:
	//	objects+=ObjectDecl+;
	public UseBlockElements getUseBlockAccess() {
		return pUseBlock;
	}
	
	public ParserRule getUseBlockRule() {
		return getUseBlockAccess().getRule();
	}
	
	//ForbiddenBlock:
	//	forb_methods+=ForbMethod+;
	public ForbiddenBlockElements getForbiddenBlockAccess() {
		return pForbiddenBlock;
	}
	
	public ParserRule getForbiddenBlockRule() {
		return getForbiddenBlockAccess().getRule();
	}
	
	//RequiredBlock:
	//	req_event+=Event+;
	public RequiredBlockElements getRequiredBlockAccess() {
		return pRequiredBlock;
	}
	
	public ParserRule getRequiredBlockRule() {
		return getRequiredBlockAccess().getRule();
	}
	
	//EnforceConsBlock:
	//	(req+=Constraint ';')+;
	public EnforceConsBlockElements getEnforceConsBlockAccess() {
		return pEnforceConsBlock;
	}
	
	public ParserRule getEnforceConsBlockRule() {
		return getEnforceConsBlockAccess().getRule();
	}
	
	//RequiresBlock:
	//	(pred+=ReqPred ';')+;
	public RequiresBlockElements getRequiresBlockAccess() {
		return pRequiresBlock;
	}
	
	public ParserRule getRequiresBlockRule() {
		return getRequiresBlockAccess().getRule();
	}
	
	//EnsuresBlock:
	//	(pred+=EnsPred ';')+;
	public EnsuresBlockElements getEnsuresBlockAccess() {
		return pEnsuresBlock;
	}
	
	public ParserRule getEnsuresBlockRule() {
		return getEnsuresBlockAccess().getRule();
	}
	
	//DestroysBlock:
	//	(pred+=EnsPred ';')+;
	public DestroysBlockElements getDestroysBlockAccess() {
		return pDestroysBlock;
	}
	
	public ParserRule getDestroysBlockRule() {
		return getDestroysBlockAccess().getRule();
	}
	
	//////////////// OBJECTS
	// ObjectDecl:
	//	objectType=[jvmTypes::JvmType|QualifiedName] (array="[]" | "<" collection=JvmParameterizedTypeRef ">")?
	//	objectName=Object ";" | '*';
	public ObjectDeclElements getObjectDeclAccess() {
		return pObjectDecl;
	}
	
	public ParserRule getObjectDeclRule() {
		return getObjectDeclAccess().getRule();
	}
	
	//JvmParameterizedTypeRef:
	//	(arguments+=JvmArgumentTypeRef (',' arguments+=JvmArgumentTypeRef)* ('<' arguments+=JvmArgumentTypeRef (','
	//	arguments+=JvmArgumentTypeRef)* '>')?)*;
	public JvmParameterizedTypeRefElements getJvmParameterizedTypeRefAccess() {
		return pJvmParameterizedTypeRef;
	}
	
	public ParserRule getJvmParameterizedTypeRefRule() {
		return getJvmParameterizedTypeRefAccess().getRule();
	}
	
	//JvmArgumentTypeRef JvmTypeReference:
	//	type=JvmTypeReference | type=JvmWildcardTypeRef;
	public JvmArgumentTypeRefElements getJvmArgumentTypeRefAccess() {
		return pJvmArgumentTypeRef;
	}
	
	public ParserRule getJvmArgumentTypeRefRule() {
		return getJvmArgumentTypeRefAccess().getRule();
	}
	
	//JvmWildcardTypeRef:
	//	{JvmWildcardTypeReference} ('?' | 'T' | 'E');
	public JvmWildcardTypeRefElements getJvmWildcardTypeRefAccess() {
		return pJvmWildcardTypeRef;
	}
	
	public ParserRule getJvmWildcardTypeRefRule() {
		return getJvmWildcardTypeRefAccess().getRule();
	}
	
	///////////// FORBIDDEN EVENTS
	// ForbMethod:
	//	(javaMeth=[jvmTypes::JvmExecutable|FQN] ("=>" rep=[Event])?) ';';
	public ForbMethodElements getForbMethodAccess() {
		return pForbMethod;
	}
	
	public ParserRule getForbMethodRule() {
		return getForbMethodAccess().getRule();
	}
	
	//FQN:
	//	QN "(" (QN ("," QN)*)? ")";
	public FQNElements getFQNAccess() {
		return pFQN;
	}
	
	public ParserRule getFQNRule() {
		return getFQNAccess().getRule();
	}
	
	//QN:
	//	ID ('.' ID)* "[]"?;
	public QNElements getQNAccess() {
		return pQN;
	}
	
	public ParserRule getQNRule() {
		return getQNAccess().getRule();
	}
	
	/////////////// EVENTS
	// Event:
	//	LabelMethodCall | Aggregate | '*';
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	///// LABELMETHCALL
	// LabelMethodCall SuperType:
	//	name=ID ":" meth=Method;
	public LabelMethodCallElements getLabelMethodCallAccess() {
		return pLabelMethodCall;
	}
	
	public ParserRule getLabelMethodCallRule() {
		return getLabelMethodCallAccess().getRule();
	}
	
	//Method:
	//	(leftSide=[Object] "=")? methName=[jvmTypes::JvmExecutable] "(" parList=ParList? ");";
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}
	
	//ParList:
	//	parameters+=Par (',' parameters+=Par)*;
	public ParListElements getParListAccess() {
		return pParList;
	}
	
	public ParserRule getParListRule() {
		return getParListAccess().getRule();
	}
	
	//Par:
	//	{Par} (val=[Object] | '_');
	public ParElements getParAccess() {
		return pPar;
	}
	
	public ParserRule getParRule() {
		return getParAccess().getRule();
	}
	
	///// AGGS
	// Aggregate SuperType:
	//	{Aggregate} (name=ID ':=' (lab+=[Event] ('|' lab+=[Event])*) ";");
	public AggregateElements getAggregateAccess() {
		return pAggregate;
	}
	
	public ParserRule getAggregateRule() {
		return getAggregateAccess().getRule();
	}
	
	/////////////// ORDER
	// Order Expression:
	//	SimpleOrder ({Order.left=current} orderop=',' right=SimpleOrder)* | '*';
	public OrderElements getOrderAccess() {
		return pOrder;
	}
	
	public ParserRule getOrderRule() {
		return getOrderAccess().getRule();
	}
	
	//SimpleOrder Expression:
	//	Primary ({SimpleOrder.left=current} orderop='|' right=Primary)*;
	public SimpleOrderElements getSimpleOrderAccess() {
		return pSimpleOrder;
	}
	
	public ParserRule getSimpleOrderRule() {
		return getSimpleOrderAccess().getRule();
	}
	
	//Primary Expression:
	//	orderEv+=[Event] elementop=('+' | '?' | '*')? | '(' Order ')' elementop=('+' | '?' | '*')?;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	/////////////// CONSTRAINTS
	// Constraint:
	//	LogicalImplyExpression;
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//LogicalImplyExpression Constraint:
	//	LogicalOrExpression ({Constraint.leftExpression=current} operator=LogicalImply rightExpression=LogicalOrExpression)*;
	public LogicalImplyExpressionElements getLogicalImplyExpressionAccess() {
		return pLogicalImplyExpression;
	}
	
	public ParserRule getLogicalImplyExpressionRule() {
		return getLogicalImplyExpressionAccess().getRule();
	}
	
	//LogicalImply:
	//	IMPLIES="=>";
	public LogicalImplyElements getLogicalImplyAccess() {
		return pLogicalImply;
	}
	
	public ParserRule getLogicalImplyRule() {
		return getLogicalImplyAccess().getRule();
	}
	
	//LogicalOrExpression Constraint:
	//	LogicalAndExpression ({Constraint.leftExpression=current} operator=LogicalOr rightExpression=LogicalAndExpression)*;
	public LogicalOrExpressionElements getLogicalOrExpressionAccess() {
		return pLogicalOrExpression;
	}
	
	public ParserRule getLogicalOrExpressionRule() {
		return getLogicalOrExpressionAccess().getRule();
	}
	
	//LogicalOr LogicalOperator:
	//	OR='||';
	public LogicalOrElements getLogicalOrAccess() {
		return pLogicalOr;
	}
	
	public ParserRule getLogicalOrRule() {
		return getLogicalOrAccess().getRule();
	}
	
	//LogicalAndExpression Constraint:
	//	ComparisonExpression ({Constraint.leftExpression=current} operator=LogicalAnd rightExpression=ComparisonExpression)*;
	public LogicalAndExpressionElements getLogicalAndExpressionAccess() {
		return pLogicalAndExpression;
	}
	
	public ParserRule getLogicalAndExpressionRule() {
		return getLogicalAndExpressionAccess().getRule();
	}
	
	//LogicalAnd LogicalOperator:
	//	AND='&&';
	public LogicalAndElements getLogicalAndAccess() {
		return pLogicalAnd;
	}
	
	public ParserRule getLogicalAndRule() {
		return getLogicalAndAccess().getRule();
	}
	
	//ComparisonExpression Constraint:
	//	ComparisonHigherOpExpression ({ComparisonExpression.leftExpression=current} operator=ComparingEQNEQOperator
	//	rightExpression=ComparisonHigherOpExpression)?;
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}
	
	//ComparisonHigherOpExpression Constraint:
	//	ArithmeticExpression ({ComparisonExpression.leftExpression=current} operator=ComparingRelOperator
	//	rightExpression=ArithmeticExpression)?;
	public ComparisonHigherOpExpressionElements getComparisonHigherOpExpressionAccess() {
		return pComparisonHigherOpExpression;
	}
	
	public ParserRule getComparisonHigherOpExpressionRule() {
		return getComparisonHigherOpExpressionAccess().getRule();
	}
	
	//ComparingRelOperator ComparingOperator:
	//	LESS='<' | LESS_OR_EQUAL='<=' | GREATER_OR_EQUAL='>=' | GREATER='>';
	public ComparingRelOperatorElements getComparingRelOperatorAccess() {
		return pComparingRelOperator;
	}
	
	public ParserRule getComparingRelOperatorRule() {
		return getComparingRelOperatorAccess().getRule();
	}
	
	//ArithmeticExpression Constraint:
	//	AdditionExpression;
	public ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return pArithmeticExpression;
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}
	
	//AdditionExpression Constraint:
	//	ModularExpression ({ArithmeticExpression.leftExpression=current} operator=AdditionOperator
	//	rightExpression=ModularExpression)*;
	public AdditionExpressionElements getAdditionExpressionAccess() {
		return pAdditionExpression;
	}
	
	public ParserRule getAdditionExpressionRule() {
		return getAdditionExpressionAccess().getRule();
	}
	
	//AdditionOperator ArithmeticOperator:
	//	PLUS='+' | MINUS='-';
	public AdditionOperatorElements getAdditionOperatorAccess() {
		return pAdditionOperator;
	}
	
	public ParserRule getAdditionOperatorRule() {
		return getAdditionOperatorAccess().getRule();
	}
	
	//ModularExpression Constraint:
	//	MultiplicationExpression ({ArithmeticExpression.leftExpression=current} operator=ModularOperator
	//	rightExpression=MultiplicationExpression)*;
	public ModularExpressionElements getModularExpressionAccess() {
		return pModularExpression;
	}
	
	public ParserRule getModularExpressionRule() {
		return getModularExpressionAccess().getRule();
	}
	
	//ModularOperator ArithmeticOperator:
	//	MOD='%';
	public ModularOperatorElements getModularOperatorAccess() {
		return pModularOperator;
	}
	
	public ParserRule getModularOperatorRule() {
		return getModularOperatorAccess().getRule();
	}
	
	//MultiplicationExpression Constraint:
	//	UnaryPreExpression | Operand ({ArithmeticExpression.leftExpression=current} operator=MultiplicationOperator
	//	rightExpression=Operand)*;
	public MultiplicationExpressionElements getMultiplicationExpressionAccess() {
		return pMultiplicationExpression;
	}
	
	public ParserRule getMultiplicationExpressionRule() {
		return getMultiplicationExpressionAccess().getRule();
	}
	
	//MultiplicationOperator ArithmeticOperator:
	//	TIMES='*' | DIVIDE='/';
	public MultiplicationOperatorElements getMultiplicationOperatorAccess() {
		return pMultiplicationOperator;
	}
	
	public ParserRule getMultiplicationOperatorRule() {
		return getMultiplicationOperatorAccess().getRule();
	}
	
	//UnaryPreExpression Constraint:
	//	{UnaryPreExpression} (operator=UnaryPreOperator enclosedExpression=Operand);
	public UnaryPreExpressionElements getUnaryPreExpressionAccess() {
		return pUnaryPreExpression;
	}
	
	public ParserRule getUnaryPreExpressionRule() {
		return getUnaryPreExpressionAccess().getRule();
	}
	
	//Operand Constraint:
	//	'(' Constraint ')' | Cons;
	public OperandElements getOperandAccess() {
		return pOperand;
	}
	
	public ParserRule getOperandRule() {
		return getOperandAccess().getRule();
	}
	
	//LiteralExpression:
	//	name=Literal | name=AggregateExpression | PreDefinedPredicates;
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}
	
	//PreDefinedPredicates:
	//	predName="neverTypeOf"+ "[" obj+=[Object] "," type=JvmType "]" | predName="noCallTo"+ "[" obj+=[Event] "]" |
	//	predName="callTo"+ "[" obj+=[Event] "]" | predName="notHardCoded"+ "[" obj+=[Object] "]" | predName="length"+ "["
	//	obj+=[Object] "]" | predName="instanceOf"+ "[" obj+=[Object] "," type=JvmType "]";
	public PreDefinedPredicatesElements getPreDefinedPredicatesAccess() {
		return pPreDefinedPredicates;
	}
	
	public ParserRule getPreDefinedPredicatesRule() {
		return getPreDefinedPredicatesAccess().getRule();
	}
	
	//JvmType:
	//	type=[jvmTypes::JvmType|QualifiedName];
	public JvmTypeElements getJvmTypeAccess() {
		return pJvmType;
	}
	
	public ParserRule getJvmTypeRule() {
		return getJvmTypeAccess().getRule();
	}
	
	//AggregateExpression LiteralExpression:
	//	value=[SuperType] ("." ID)?;
	public AggregateExpressionElements getAggregateExpressionAccess() {
		return pAggregateExpression;
	}
	
	public ParserRule getAggregateExpressionRule() {
		return getAggregateExpressionAccess().getRule();
	}
	
	//Literal:
	//	{Literal} val=(StringLiteral | IntegerLiteral | BooleanLiteral);
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//StringLiteral:
	//	STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//IntegerLiteral:
	//	INT | INT '^' INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}
	
	//BooleanLiteral:
	//	'true' | 'false';
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//UnaryPreOperator UnaryOperator:
	//	NOT='!';
	public UnaryPreOperatorElements getUnaryPreOperatorAccess() {
		return pUnaryPreOperator;
	}
	
	public ParserRule getUnaryPreOperatorRule() {
		return getUnaryPreOperatorAccess().getRule();
	}
	
	//ComparingEQNEQOperator ComparingOperator:
	//	EQUAL='==' | UNEQUAL='!=';
	public ComparingEQNEQOperatorElements getComparingEQNEQOperatorAccess() {
		return pComparingEQNEQOperator;
	}
	
	public ParserRule getComparingEQNEQOperatorRule() {
		return getComparingEQNEQOperatorAccess().getRule();
	}
	
	//Cons LiteralExpression:
	//	cons=ArrayElements "in" "{" litsleft=LitList "}" | cons=LiteralExpression;
	public ConsElements getConsAccess() {
		return pCons;
	}
	
	public ParserRule getConsRule() {
		return getConsAccess().getRule();
	}
	
	//ArrayElements:
	//	el="elements(" cons=ConsPred ")" | cons=ConsPred;
	public ArrayElementsElements getArrayElementsAccess() {
		return pArrayElements;
	}
	
	public ParserRule getArrayElementsRule() {
		return getArrayElementsAccess().getRule();
	}
	
	//ConsPred LiteralExpression:
	//	(consPred="alg(" lit=LiteralExpression ")" | consPred="mode(" lit=LiteralExpression ")" | consPred="pad("
	//	lit=LiteralExpression ")") | part="part(" ind=IntegerLiteral "," split=StringLiteral "," lit=LiteralExpression ")" |
	//	lit=LiteralExpression;
	public ConsPredElements getConsPredAccess() {
		return pConsPred;
	}
	
	public ParserRule getConsPredRule() {
		return getConsPredAccess().getRule();
	}
	
	//terminal INT:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//LitList:
	//	parameters+=Literal (',' (parameters+=Literal | '...'))*;
	public LitListElements getLitListAccess() {
		return pLitList;
	}
	
	public ParserRule getLitListRule() {
		return getLitListAccess().getRule();
	}
	
	//Pred:
	//	predName=ID ('[' parList=SuParList ']' | "[]");
	public PredElements getPredAccess() {
		return pPred;
	}
	
	public ParserRule getPredRule() {
		return getPredAccess().getRule();
	}
	
	//ReqPred:
	//	PredLit ({ReqPred.leftExpression=current} operator=LogicalOr rightExpression=PredLit)*;
	public ReqPredElements getReqPredAccess() {
		return pReqPred;
	}
	
	public ParserRule getReqPredRule() {
		return getReqPredAccess().getRule();
	}
	
	//PredLit:
	//	(cons=Constraint "=>")? not='!'? pred=Pred;
	public PredLitElements getPredLitAccess() {
		return pPredLit;
	}
	
	public ParserRule getPredLitRule() {
		return getPredLitAccess().getRule();
	}
	
	//EnsPred Constraint:
	//	predLit=PredLit ('after' labelCond=[SuperType])?;
	public EnsPredElements getEnsPredAccess() {
		return pEnsPred;
	}
	
	public ParserRule getEnsPredRule() {
		return getEnsPredAccess().getRule();
	}
	
	//SuParList:
	//	parameters+=SuPar (',' parameters+=SuPar)*;
	public SuParListElements getSuParListAccess() {
		return pSuParList;
	}
	
	public ParserRule getSuParListRule() {
		return getSuParListAccess().getRule();
	}
	
	//SuPar:
	//	{SuPar} (val=ConsPred | '_' | 'this');
	public SuParElements getSuParAccess() {
		return pSuPar;
	}
	
	public ParserRule getSuParRule() {
		return getSuParAccess().getRule();
	}
	
	//Object SuperType:
	//	{Object} name=ID;
	public ObjectElements getObjectAccess() {
		return pObject;
	}
	
	public ParserRule getObjectRule() {
		return getObjectAccess().getRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)*
	//	'>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=> '<'
	//	arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID ('.' ValidID)*;
	public XtypeGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXtype.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
