/**
 * generated by Xtext 2.21.0
 */
package de.darmstadt.tu.crossing.crySL.impl;

import de.darmstadt.tu.crossing.crySL.Constraint;
import de.darmstadt.tu.crossing.crySL.CrySLPackage;
import de.darmstadt.tu.crossing.crySL.PredLit;
import de.darmstadt.tu.crossing.crySL.SuperType;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Constraint</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.darmstadt.tu.crossing.crySL.impl.ConstraintImpl#getLeftExpression <em>Left Expression</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.crySL.impl.ConstraintImpl#getOperator <em>Operator</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.crySL.impl.ConstraintImpl#getRightExpression <em>Right Expression</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.crySL.impl.ConstraintImpl#getPredLit <em>Pred Lit</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.crySL.impl.ConstraintImpl#getLabelCond <em>Label Cond</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConstraintImpl extends MinimalEObjectImpl.Container implements Constraint
{
  /**
   * The cached value of the '{@link #getLeftExpression() <em>Left Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftExpression()
   * @generated
   * @ordered
   */
  protected Constraint leftExpression;

  /**
   * The cached value of the '{@link #getOperator() <em>Operator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperator()
   * @generated
   * @ordered
   */
  protected EObject operator;

  /**
   * The cached value of the '{@link #getRightExpression() <em>Right Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightExpression()
   * @generated
   * @ordered
   */
  protected Constraint rightExpression;

  /**
   * The cached value of the '{@link #getPredLit() <em>Pred Lit</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredLit()
   * @generated
   * @ordered
   */
  protected PredLit predLit;

  /**
   * The cached value of the '{@link #getLabelCond() <em>Label Cond</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabelCond()
   * @generated
   * @ordered
   */
  protected SuperType labelCond;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConstraintImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CrySLPackage.Literals.CONSTRAINT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constraint getLeftExpression()
  {
    return leftExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeftExpression(Constraint newLeftExpression, NotificationChain msgs)
  {
    Constraint oldLeftExpression = leftExpression;
    leftExpression = newLeftExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CrySLPackage.CONSTRAINT__LEFT_EXPRESSION, oldLeftExpression, newLeftExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeftExpression(Constraint newLeftExpression)
  {
    if (newLeftExpression != leftExpression)
    {
      NotificationChain msgs = null;
      if (leftExpression != null)
        msgs = ((InternalEObject)leftExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CrySLPackage.CONSTRAINT__LEFT_EXPRESSION, null, msgs);
      if (newLeftExpression != null)
        msgs = ((InternalEObject)newLeftExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CrySLPackage.CONSTRAINT__LEFT_EXPRESSION, null, msgs);
      msgs = basicSetLeftExpression(newLeftExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrySLPackage.CONSTRAINT__LEFT_EXPRESSION, newLeftExpression, newLeftExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject getOperator()
  {
    return operator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOperator(EObject newOperator, NotificationChain msgs)
  {
    EObject oldOperator = operator;
    operator = newOperator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CrySLPackage.CONSTRAINT__OPERATOR, oldOperator, newOperator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperator(EObject newOperator)
  {
    if (newOperator != operator)
    {
      NotificationChain msgs = null;
      if (operator != null)
        msgs = ((InternalEObject)operator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CrySLPackage.CONSTRAINT__OPERATOR, null, msgs);
      if (newOperator != null)
        msgs = ((InternalEObject)newOperator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CrySLPackage.CONSTRAINT__OPERATOR, null, msgs);
      msgs = basicSetOperator(newOperator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrySLPackage.CONSTRAINT__OPERATOR, newOperator, newOperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Constraint getRightExpression()
  {
    return rightExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRightExpression(Constraint newRightExpression, NotificationChain msgs)
  {
    Constraint oldRightExpression = rightExpression;
    rightExpression = newRightExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CrySLPackage.CONSTRAINT__RIGHT_EXPRESSION, oldRightExpression, newRightExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRightExpression(Constraint newRightExpression)
  {
    if (newRightExpression != rightExpression)
    {
      NotificationChain msgs = null;
      if (rightExpression != null)
        msgs = ((InternalEObject)rightExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CrySLPackage.CONSTRAINT__RIGHT_EXPRESSION, null, msgs);
      if (newRightExpression != null)
        msgs = ((InternalEObject)newRightExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CrySLPackage.CONSTRAINT__RIGHT_EXPRESSION, null, msgs);
      msgs = basicSetRightExpression(newRightExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrySLPackage.CONSTRAINT__RIGHT_EXPRESSION, newRightExpression, newRightExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PredLit getPredLit()
  {
    return predLit;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPredLit(PredLit newPredLit, NotificationChain msgs)
  {
    PredLit oldPredLit = predLit;
    predLit = newPredLit;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CrySLPackage.CONSTRAINT__PRED_LIT, oldPredLit, newPredLit);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPredLit(PredLit newPredLit)
  {
    if (newPredLit != predLit)
    {
      NotificationChain msgs = null;
      if (predLit != null)
        msgs = ((InternalEObject)predLit).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CrySLPackage.CONSTRAINT__PRED_LIT, null, msgs);
      if (newPredLit != null)
        msgs = ((InternalEObject)newPredLit).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CrySLPackage.CONSTRAINT__PRED_LIT, null, msgs);
      msgs = basicSetPredLit(newPredLit, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrySLPackage.CONSTRAINT__PRED_LIT, newPredLit, newPredLit));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SuperType getLabelCond()
  {
    if (labelCond != null && labelCond.eIsProxy())
    {
      InternalEObject oldLabelCond = (InternalEObject)labelCond;
      labelCond = (SuperType)eResolveProxy(oldLabelCond);
      if (labelCond != oldLabelCond)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CrySLPackage.CONSTRAINT__LABEL_COND, oldLabelCond, labelCond));
      }
    }
    return labelCond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SuperType basicGetLabelCond()
  {
    return labelCond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLabelCond(SuperType newLabelCond)
  {
    SuperType oldLabelCond = labelCond;
    labelCond = newLabelCond;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrySLPackage.CONSTRAINT__LABEL_COND, oldLabelCond, labelCond));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CrySLPackage.CONSTRAINT__LEFT_EXPRESSION:
        return basicSetLeftExpression(null, msgs);
      case CrySLPackage.CONSTRAINT__OPERATOR:
        return basicSetOperator(null, msgs);
      case CrySLPackage.CONSTRAINT__RIGHT_EXPRESSION:
        return basicSetRightExpression(null, msgs);
      case CrySLPackage.CONSTRAINT__PRED_LIT:
        return basicSetPredLit(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CrySLPackage.CONSTRAINT__LEFT_EXPRESSION:
        return getLeftExpression();
      case CrySLPackage.CONSTRAINT__OPERATOR:
        return getOperator();
      case CrySLPackage.CONSTRAINT__RIGHT_EXPRESSION:
        return getRightExpression();
      case CrySLPackage.CONSTRAINT__PRED_LIT:
        return getPredLit();
      case CrySLPackage.CONSTRAINT__LABEL_COND:
        if (resolve) return getLabelCond();
        return basicGetLabelCond();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CrySLPackage.CONSTRAINT__LEFT_EXPRESSION:
        setLeftExpression((Constraint)newValue);
        return;
      case CrySLPackage.CONSTRAINT__OPERATOR:
        setOperator((EObject)newValue);
        return;
      case CrySLPackage.CONSTRAINT__RIGHT_EXPRESSION:
        setRightExpression((Constraint)newValue);
        return;
      case CrySLPackage.CONSTRAINT__PRED_LIT:
        setPredLit((PredLit)newValue);
        return;
      case CrySLPackage.CONSTRAINT__LABEL_COND:
        setLabelCond((SuperType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CrySLPackage.CONSTRAINT__LEFT_EXPRESSION:
        setLeftExpression((Constraint)null);
        return;
      case CrySLPackage.CONSTRAINT__OPERATOR:
        setOperator((EObject)null);
        return;
      case CrySLPackage.CONSTRAINT__RIGHT_EXPRESSION:
        setRightExpression((Constraint)null);
        return;
      case CrySLPackage.CONSTRAINT__PRED_LIT:
        setPredLit((PredLit)null);
        return;
      case CrySLPackage.CONSTRAINT__LABEL_COND:
        setLabelCond((SuperType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CrySLPackage.CONSTRAINT__LEFT_EXPRESSION:
        return leftExpression != null;
      case CrySLPackage.CONSTRAINT__OPERATOR:
        return operator != null;
      case CrySLPackage.CONSTRAINT__RIGHT_EXPRESSION:
        return rightExpression != null;
      case CrySLPackage.CONSTRAINT__PRED_LIT:
        return predLit != null;
      case CrySLPackage.CONSTRAINT__LABEL_COND:
        return labelCond != null;
    }
    return super.eIsSet(featureID);
  }

} //ConstraintImpl
