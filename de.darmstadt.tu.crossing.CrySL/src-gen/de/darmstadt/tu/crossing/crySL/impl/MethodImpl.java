/**
 * generated by Xtext 2.21.0
 */
package de.darmstadt.tu.crossing.crySL.impl;

import de.darmstadt.tu.crossing.crySL.CrySLPackage;
import de.darmstadt.tu.crossing.crySL.Method;
import de.darmstadt.tu.crossing.crySL.ParList;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.xtext.common.types.JvmExecutable;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Method</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.darmstadt.tu.crossing.crySL.impl.MethodImpl#getLeftSide <em>Left Side</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.crySL.impl.MethodImpl#getMethName <em>Meth Name</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.crySL.impl.MethodImpl#getParList <em>Par List</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MethodImpl extends MinimalEObjectImpl.Container implements Method
{
  /**
   * The cached value of the '{@link #getLeftSide() <em>Left Side</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftSide()
   * @generated
   * @ordered
   */
  protected de.darmstadt.tu.crossing.crySL.Object leftSide;

  /**
   * The cached value of the '{@link #getMethName() <em>Meth Name</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethName()
   * @generated
   * @ordered
   */
  protected JvmExecutable methName;

  /**
   * The cached value of the '{@link #getParList() <em>Par List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParList()
   * @generated
   * @ordered
   */
  protected ParList parList;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MethodImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CrySLPackage.Literals.METHOD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public de.darmstadt.tu.crossing.crySL.Object getLeftSide()
  {
    if (leftSide != null && leftSide.eIsProxy())
    {
      InternalEObject oldLeftSide = (InternalEObject)leftSide;
      leftSide = (de.darmstadt.tu.crossing.crySL.Object)eResolveProxy(oldLeftSide);
      if (leftSide != oldLeftSide)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CrySLPackage.METHOD__LEFT_SIDE, oldLeftSide, leftSide));
      }
    }
    return leftSide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public de.darmstadt.tu.crossing.crySL.Object basicGetLeftSide()
  {
    return leftSide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeftSide(de.darmstadt.tu.crossing.crySL.Object newLeftSide)
  {
    de.darmstadt.tu.crossing.crySL.Object oldLeftSide = leftSide;
    leftSide = newLeftSide;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrySLPackage.METHOD__LEFT_SIDE, oldLeftSide, leftSide));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public JvmExecutable getMethName()
  {
    if (methName != null && methName.eIsProxy())
    {
      InternalEObject oldMethName = (InternalEObject)methName;
      methName = (JvmExecutable)eResolveProxy(oldMethName);
      if (methName != oldMethName)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CrySLPackage.METHOD__METH_NAME, oldMethName, methName));
      }
    }
    return methName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public JvmExecutable basicGetMethName()
  {
    return methName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setMethName(JvmExecutable newMethName)
  {
    JvmExecutable oldMethName = methName;
    methName = newMethName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrySLPackage.METHOD__METH_NAME, oldMethName, methName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParList getParList()
  {
    return parList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParList(ParList newParList, NotificationChain msgs)
  {
    ParList oldParList = parList;
    parList = newParList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CrySLPackage.METHOD__PAR_LIST, oldParList, newParList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParList(ParList newParList)
  {
    if (newParList != parList)
    {
      NotificationChain msgs = null;
      if (parList != null)
        msgs = ((InternalEObject)parList).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CrySLPackage.METHOD__PAR_LIST, null, msgs);
      if (newParList != null)
        msgs = ((InternalEObject)newParList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CrySLPackage.METHOD__PAR_LIST, null, msgs);
      msgs = basicSetParList(newParList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrySLPackage.METHOD__PAR_LIST, newParList, newParList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CrySLPackage.METHOD__PAR_LIST:
        return basicSetParList(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CrySLPackage.METHOD__LEFT_SIDE:
        if (resolve) return getLeftSide();
        return basicGetLeftSide();
      case CrySLPackage.METHOD__METH_NAME:
        if (resolve) return getMethName();
        return basicGetMethName();
      case CrySLPackage.METHOD__PAR_LIST:
        return getParList();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CrySLPackage.METHOD__LEFT_SIDE:
        setLeftSide((de.darmstadt.tu.crossing.crySL.Object)newValue);
        return;
      case CrySLPackage.METHOD__METH_NAME:
        setMethName((JvmExecutable)newValue);
        return;
      case CrySLPackage.METHOD__PAR_LIST:
        setParList((ParList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CrySLPackage.METHOD__LEFT_SIDE:
        setLeftSide((de.darmstadt.tu.crossing.crySL.Object)null);
        return;
      case CrySLPackage.METHOD__METH_NAME:
        setMethName((JvmExecutable)null);
        return;
      case CrySLPackage.METHOD__PAR_LIST:
        setParList((ParList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CrySLPackage.METHOD__LEFT_SIDE:
        return leftSide != null;
      case CrySLPackage.METHOD__METH_NAME:
        return methName != null;
      case CrySLPackage.METHOD__PAR_LIST:
        return parList != null;
    }
    return super.eIsSet(featureID);
  }

} //MethodImpl
