/**
 * generated by Xtext 2.21.0
 */
package de.darmstadt.tu.crossing.crySL.impl;

import de.darmstadt.tu.crossing.crySL.CrySLPackage;
import de.darmstadt.tu.crossing.crySL.Event;
import de.darmstadt.tu.crossing.crySL.Expression;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expression</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.darmstadt.tu.crossing.crySL.impl.ExpressionImpl#getOrderEv <em>Order Ev</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.crySL.impl.ExpressionImpl#getElementop <em>Elementop</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.crySL.impl.ExpressionImpl#getLeft <em>Left</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.crySL.impl.ExpressionImpl#getOrderop <em>Orderop</em>}</li>
 *   <li>{@link de.darmstadt.tu.crossing.crySL.impl.ExpressionImpl#getRight <em>Right</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExpressionImpl extends MinimalEObjectImpl.Container implements Expression
{
  /**
   * The cached value of the '{@link #getOrderEv() <em>Order Ev</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrderEv()
   * @generated
   * @ordered
   */
  protected EList<Event> orderEv;

  /**
   * The default value of the '{@link #getElementop() <em>Elementop</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElementop()
   * @generated
   * @ordered
   */
  protected static final String ELEMENTOP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getElementop() <em>Elementop</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getElementop()
   * @generated
   * @ordered
   */
  protected String elementop = ELEMENTOP_EDEFAULT;

  /**
   * The cached value of the '{@link #getLeft() <em>Left</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeft()
   * @generated
   * @ordered
   */
  protected Expression left;

  /**
   * The default value of the '{@link #getOrderop() <em>Orderop</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrderop()
   * @generated
   * @ordered
   */
  protected static final String ORDEROP_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getOrderop() <em>Orderop</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOrderop()
   * @generated
   * @ordered
   */
  protected String orderop = ORDEROP_EDEFAULT;

  /**
   * The cached value of the '{@link #getRight() <em>Right</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRight()
   * @generated
   * @ordered
   */
  protected Expression right;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExpressionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CrySLPackage.Literals.EXPRESSION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Event> getOrderEv()
  {
    if (orderEv == null)
    {
      orderEv = new EObjectResolvingEList<Event>(Event.class, this, CrySLPackage.EXPRESSION__ORDER_EV);
    }
    return orderEv;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getElementop()
  {
    return elementop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setElementop(String newElementop)
  {
    String oldElementop = elementop;
    elementop = newElementop;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrySLPackage.EXPRESSION__ELEMENTOP, oldElementop, elementop));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getLeft()
  {
    return left;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeft(Expression newLeft, NotificationChain msgs)
  {
    Expression oldLeft = left;
    left = newLeft;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CrySLPackage.EXPRESSION__LEFT, oldLeft, newLeft);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLeft(Expression newLeft)
  {
    if (newLeft != left)
    {
      NotificationChain msgs = null;
      if (left != null)
        msgs = ((InternalEObject)left).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CrySLPackage.EXPRESSION__LEFT, null, msgs);
      if (newLeft != null)
        msgs = ((InternalEObject)newLeft).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CrySLPackage.EXPRESSION__LEFT, null, msgs);
      msgs = basicSetLeft(newLeft, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrySLPackage.EXPRESSION__LEFT, newLeft, newLeft));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getOrderop()
  {
    return orderop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOrderop(String newOrderop)
  {
    String oldOrderop = orderop;
    orderop = newOrderop;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrySLPackage.EXPRESSION__ORDEROP, oldOrderop, orderop));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getRight()
  {
    return right;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRight(Expression newRight, NotificationChain msgs)
  {
    Expression oldRight = right;
    right = newRight;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CrySLPackage.EXPRESSION__RIGHT, oldRight, newRight);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRight(Expression newRight)
  {
    if (newRight != right)
    {
      NotificationChain msgs = null;
      if (right != null)
        msgs = ((InternalEObject)right).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CrySLPackage.EXPRESSION__RIGHT, null, msgs);
      if (newRight != null)
        msgs = ((InternalEObject)newRight).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CrySLPackage.EXPRESSION__RIGHT, null, msgs);
      msgs = basicSetRight(newRight, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CrySLPackage.EXPRESSION__RIGHT, newRight, newRight));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CrySLPackage.EXPRESSION__LEFT:
        return basicSetLeft(null, msgs);
      case CrySLPackage.EXPRESSION__RIGHT:
        return basicSetRight(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CrySLPackage.EXPRESSION__ORDER_EV:
        return getOrderEv();
      case CrySLPackage.EXPRESSION__ELEMENTOP:
        return getElementop();
      case CrySLPackage.EXPRESSION__LEFT:
        return getLeft();
      case CrySLPackage.EXPRESSION__ORDEROP:
        return getOrderop();
      case CrySLPackage.EXPRESSION__RIGHT:
        return getRight();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CrySLPackage.EXPRESSION__ORDER_EV:
        getOrderEv().clear();
        getOrderEv().addAll((Collection<? extends Event>)newValue);
        return;
      case CrySLPackage.EXPRESSION__ELEMENTOP:
        setElementop((String)newValue);
        return;
      case CrySLPackage.EXPRESSION__LEFT:
        setLeft((Expression)newValue);
        return;
      case CrySLPackage.EXPRESSION__ORDEROP:
        setOrderop((String)newValue);
        return;
      case CrySLPackage.EXPRESSION__RIGHT:
        setRight((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CrySLPackage.EXPRESSION__ORDER_EV:
        getOrderEv().clear();
        return;
      case CrySLPackage.EXPRESSION__ELEMENTOP:
        setElementop(ELEMENTOP_EDEFAULT);
        return;
      case CrySLPackage.EXPRESSION__LEFT:
        setLeft((Expression)null);
        return;
      case CrySLPackage.EXPRESSION__ORDEROP:
        setOrderop(ORDEROP_EDEFAULT);
        return;
      case CrySLPackage.EXPRESSION__RIGHT:
        setRight((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CrySLPackage.EXPRESSION__ORDER_EV:
        return orderEv != null && !orderEv.isEmpty();
      case CrySLPackage.EXPRESSION__ELEMENTOP:
        return ELEMENTOP_EDEFAULT == null ? elementop != null : !ELEMENTOP_EDEFAULT.equals(elementop);
      case CrySLPackage.EXPRESSION__LEFT:
        return left != null;
      case CrySLPackage.EXPRESSION__ORDEROP:
        return ORDEROP_EDEFAULT == null ? orderop != null : !ORDEROP_EDEFAULT.equals(orderop);
      case CrySLPackage.EXPRESSION__RIGHT:
        return right != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (elementop: ");
    result.append(elementop);
    result.append(", orderop: ");
    result.append(orderop);
    result.append(')');
    return result.toString();
  }

} //ExpressionImpl
