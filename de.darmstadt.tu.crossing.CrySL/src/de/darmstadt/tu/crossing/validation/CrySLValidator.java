/*
 * generated by Xtext 2.10.0
 */
package de.darmstadt.tu.crossing.validation;

import java.util.ArrayList;
import java.util.HashSet;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.XtextPackage;
import org.eclipse.xtext.validation.Check;

import de.darmstadt.tu.crossing.crySL.CrySLPackage;
import de.darmstadt.tu.crossing.crySL.Domainmodel;
import de.darmstadt.tu.crossing.crySL.Event;
import de.darmstadt.tu.crossing.crySL.ForbMethod;
import de.darmstadt.tu.crossing.crySL.ObjectDecl;
import de.darmstadt.tu.crossing.crySL.RequiredBlock;
import de.darmstadt.tu.crossing.crySL.SuperType;
import de.darmstadt.tu.crossing.crySL.impl.AggregateImpl;
import de.darmstadt.tu.crossing.crySL.impl.CrySLPackageImpl;
import de.darmstadt.tu.crossing.crySL.impl.EventImpl;
import de.darmstadt.tu.crossing.crySL.impl.ObjectImpl;
import de.darmstadt.tu.crossing.crySL.impl.SuperTypeImpl;
import de.darmstadt.tu.crossing.services.CrySLGrammarAccess.LabelMethodCallElements;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class CrySLValidator extends AbstractCrySLValidator {
	
	// AbstractCrySLValidator registers the EPackages for which this validator introduces constraints
	
	public static final EStructuralFeature INVALID_NAME = null;
	private ArrayList<SuperType> eventNames = null;
	private CrySLPackageImpl cpi;

	@Check
	public void checkGreetingStartsWithCapital(ForbMethod greeting) {
		System.out.println("bla bla");
	}
	
	// write constraints in a declarative way
	// just have to add the Check annotation to any method and it will be invoked automatically when validation takes place
	
	// unique name validator
	@Check //need fast parameter to run check whenever a file is modified, default is fast
	public void checkDuplicateEventName(/*Event e,*/ SuperType s) {
		System.out.println("-------blub---------");
		/*String m = e.eContainer().toString();
		System.out.println("container content is: " + m);
		System.out.println("event info: " + e.toString());
		System.out.println("event info2: " + e.eContainingFeature().getName());
		System.out.println("event info3: " + e.eClass().getName()); //prints the type
		System.out.println("event info4: " + e.eContents().toString());
		System.out.println("event info5: " + e.eContents());// same as info4
		System.out.println("event info6: " + e.toString().intern());// same as info
		System.out.println("event info7: " + e.toString().trim());// same as info
		System.out.println("event info8: " + e.eResource()); //prints the linked rule KeyGenerator which was open in runtime and validated
		*/
		
		System.out.println("bef");
		// stops executing here
		cpi.getRequiredBlock_Req_event();
		System.out.println("after");
		
		for(EObject x : s.eContents()) {
			if(s instanceof SuperType) {
				if(!((this.getCurrentObject() instanceof AggregateImpl)||(this.getCurrentObject() instanceof ObjectImpl))) {
					System.out.println("OOpsie");
					System.out.println("fdf "+ s.eContents().contains(s.getName().contentEquals("i1"))); // s.eContents() ist hier das falsche
				}
			}
		}
		
		if(s instanceof SuperType) {
			if(!((this.getCurrentObject() instanceof AggregateImpl)||(this.getCurrentObject() instanceof ObjectImpl))) {
			System.out.println("mimi");
			// from here, nothing is executed
			//eventNames.add(s);
			//System.out.println("Added " + s + " to arraylist.");
			
			if(s.eContainingFeature().equals(CrySLPackage.Literals.REQUIRED_BLOCK__REQ_EVENT)) {
				System.out.println("Hurray");
				//warning("Label occurs twice.", INVALID_NAME);
				//warning("Label occurs twice.", cpi.getRequiredBlock_Req_event());
				
				System.out.println("cpi has: " + cpi.getRequiredBlock_Req_event());
				//stops execution here
			}
			
			
			
			System.out.println("event info9: " + s.getName()); //works, gives name // each name equally required for check? check that
			System.out.println("event info10: " + s.eClass().getEAllAttributes()); //attribute name?
			System.out.println("event info11: " + s.getClass());
			System.out.println("event info12: " + s.eContainingFeature());
			System.out.println("event info13: " + CrySLPackage.CONSTRAINT__LEFT_EXPRESSION); // type int, can this be traversed like a list?
			System.out.println("event info14: " + s.eClass().getEAllAttributes().contains(s.getName()));
			System.out.println("event info15: " + CrySLPackage.class);
			System.out.println("event info16: " + CrySLPackage.METHOD__LEFT_SIDE);
			System.out.println("event info17: " + CrySLPackage.DOMAINMODEL__REQ_EVENTS);
			System.out.println("event info18: " + this.getEPackages());
			System.out.println("event info19: " + this.getChain());
			}
		}
		System.out.println("Check mode is: " + this.getCheckMode());
		System.out.println("current object's eAdapters: " + this.getCurrentObject().eAdapters());
		System.out.println("current method is: " + this.getCurrentMethod());
		
		
		if(s.getName().contentEquals("i4")) {
			//System.out.println("ERROR");
			
			System.out.println("event info20: " + this + " " + this.getContext()); // this is CrySLValidator
			/*if(s.eContainingFeature().equals(CrySLPackage.Literals.REQUIRED_BLOCK__REQ_EVENT)) {
				System.out.println("Hurray");
				warning("Label occurs twice.", INVALID_NAME);
				//error("Label occurs twice.", CrySLPackage.Literals.DOMAINMODEL__REQ_EVENTS); // no direct difference to INVALID_NAME visible; der scope ist auch der EStructuralFeature Parameter, welcher hier null ist; EAttribut und EReference sind subclasses von EStructuralFeature
			}*/
			System.out.println("-------i4--------");
			
		}
		for(SuperType i: eventNames) {
			if(i.getName().equals(s.getName())) {
				System.out.println("ERROR");
				//error("Label occurs twice.", INVALID_NAME);
				//error("Label occurs twice.", CrySLPackage.CONSTRAINT__LEFT_EXPRESSION); //2nd parameter tells where in the document the parameter is, the scope of the error
			}
		}

		
		//for()
		/*if(e.)) {
			
		}*/
		/*if (getContainerOfType(openCSV, Model).actions.filter(OpenCSV).
			exists[it != openCSV && it.name == openCSV.name]) {
			error("Duplicate csv identifier '" + openCSV.name + "'", CsvPackage::eINSTANCE.openCSV_Name,
				DUPLICATE_OPEN_NAME)
		}*/
	}
	
	@Check
	public void check2(Domainmodel model) {
		HashSet<String> names = new HashSet<String>();
		Domainmodel.class.
		for(
	}
	

	
	// invoke getEPackages
	//addIssue, error
}
