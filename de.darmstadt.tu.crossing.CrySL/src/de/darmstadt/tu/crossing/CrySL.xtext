grammar de.darmstadt.tu.crossing.CrySL with org.eclipse.xtext.xbase.Xtype

generate crySL "http://www.darmstadt.de/tu/crossing/CrySL"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

/* Outer Structure */

Domainmodel:
	'SPEC'          javaType    = JvmTypeReference
	( 'OBJECTS'     objects     = ObjectsBlock     ) ?
	( 'FORBIDDEN'   forbidden   = ForbiddenBlock   ) ?
	( 'EVENTS'      events      = EventsBlock      ) ?
	( 'ORDER'       order       = OrderBlock       ) ?
	( 'CONSTRAINTS' constraints = ConstraintsBlock ) ?
	( 'REQUIRES'    requires    = RequiresBlock    ) ?
	( 'ENSURES'     ensures     = EnsuresBlock     ) ?
	( 'NEGATES'     negates     = NegatesBlock     ) ?
;


/* Object Declarations */

ObjectsBlock:
	(declarations += Object ';')+
;

Object:
	type = JvmTypeReference name = ID
;


/* Forbidden Events */

ForbiddenBlock:
	(forbiddenMethods += ForbiddenMethod ';')+
;

ForbiddenMethod:
	method = [types::JvmExecutable|ID]
		'(' (parameters += JvmTypeReference (',' parameters += JvmTypeReference)*)?')'
		('=>' replacement = [Event])?
;

/* Event Declarations */

EventsBlock:
	(events += Event ';')+
;

Event:
	LabeledMethodCall
	| Aggregate
;

LabeledMethodCall:
	name = ID ':' method = Method
;

Method:
	(return = [Object] '=')? (=> method = [types::JvmExecutable|ID])
		'(' (parameters += Parameter (',' parameters += Parameter)*)? ')'
;

Parameter:
	value = [Object]
	| {AnyParameterType} '_'
;

Aggregate:
	name = ID ':=' (events += [Event] ('|' events += [Event])*)?
;


/* Order Declaration */

OrderBlock:
	order = Order
;

Order:
	Sequence
;

Sequence returns Order:
	Alternative ({Order.left=current} op=SequenceOperator right=Alternative)*
;

enum SequenceOperator returns OrderOperator:
	SEQUENCE = ','
;

Alternative returns Order:
	Cardinality ({Order.left=current} op=AlternativeOperator right=Cardinality)*
;

enum AlternativeOperator returns OrderOperator:
	ALTERNATIVE = '|'
;

Cardinality returns Order:
	Primary ({Order.left=current} op = CardinalityOperator)?
;

enum CardinalityOperator returns OrderOperator:
	ZERO_OR_MORE = '*' | ONE_OR_MORE = '+' | ZERO_OR_ONE = '?'
;

Primary returns Order:
	{Primary} event = [Event]
	| '(' Order ')'
;


/* Constraints Declarations */

ConstraintsBlock:
	(constraints += Constraint ';')+
;

Constraint:
	LogicalImplyExpression
;

LogicalImplyExpression returns Constraint:
	LogicalOrExpression
	({Constraint.left = current} op = ImplyOp right = LogicalOrExpression)*
;

enum ImplyOp returns Operator:
	IMPLY = '=>'
;

LogicalOrExpression returns Constraint:
	LogicalAndExpression
	({Constraint.left = current} op=OrOp right = LogicalAndExpression)*
;

enum OrOp returns Operator:
	OR = '||'
;

LogicalAndExpression returns Constraint:
	EqualityExpression
	({Constraint.left = current} op = AndOp right = EqualityExpression)*
;

enum AndOp returns Operator:
	AND = '&&'
;

EqualityExpression returns Constraint:
	ComparisonExpression
	({Constraint.left = current} op = EualityOp right=ComparisonExpression)?
;

enum EualityOp returns Operator:
	EQUAL = '==' | UNEQUAL = '!='
;

ComparisonExpression returns Constraint:
	ArithmeticExpression
	({Constraint.left = current} op = OrderOp right = ArithmeticExpression)?
;

enum OrderOp returns Operator:
	LESS = '<' | LESS_OR_EQUAL = '<=' | GREATER_OR_EQUAL = '>=' | GREATER = '>'
;

ArithmeticExpression returns Constraint:
	AdditionExpression
;

AdditionExpression returns Constraint:
	ModuloExpression
	({Constraint.left = current} op = AdditionOp right = ModuloExpression)*
;

enum AdditionOp returns Operator:
	PLUS = '+' | MINUS = '-'
;

ModuloExpression returns Constraint:
	MultiplicationExpression
	({Constraint.left = current} op = ModuloOp right = MultiplicationExpression)*
;

enum ModuloOp returns Operator:
	MODULO = '%'
;

MultiplicationExpression returns Constraint:
	UnaryPreExpression
	({Constraint.left = current} op = MultiplicationOperator right = UnaryPreExpression)*
	
;

enum MultiplicationOperator returns Operator:
	TIMES = '*' | DIVIDE = '/'
;

UnaryPreExpression returns Constraint:
	(op = UnaryPreOperator left = UnaryPreExpression)
	| Operand
;

enum UnaryPreOperator returns Operator:
	NOT = '!'
;

Operand returns Constraint:
	InExpression
	| '(' Constraint ')'
;

InExpression returns Constraint:
	LiteralExpression ({Constraint.left=current} op = InOp right = LiteralList)?
;

enum InOp returns Operator:
 IN = 'in'
;

LiteralList returns Constraint:
	{LiteralList} '{' elements += Literal (',' elements += Literal)* '}'
;

LiteralExpression:
	Literal
	| ObjectReference
	| BuiltinPredicates
	| BuiltinOperations
;

BuiltinPredicates:
	  {BPNeverTypeOf} name = 'neverTypeOf'  '[' object = [Object] ',' type = JvmTypeReference ']'
	| {BPInstanceOf}  name = 'instanceOf'   '[' object = [Object] ',' type = JvmTypeReference ']'
	| {BPNoCallTo}    name = 'noCallTo'     '[' event  = [Event]  ']'
	| {BPCallTo}      name = 'callTo'       '[' event  = [Event]  ']'
	| {BPNoHCoded}    name = 'notHardCoded' '[' object = [Object] ']'
	| {BPLenght}      name = 'length'       '[' object = [Object] ']'
;

BuiltinOperations:
	  {BOAlgo}        name = 'alg'          '(' object = [Object] ')'
	| {BOMode}        name = 'mode'         '(' object = [Object] ')'
	| {BOPadding}     name = 'pad'          '(' object = [Object] ')'
	| {BOElems}       name = 'elements'     '(' object = [Object] ')'
	| {BOPart}        name = 'part'         '(' index = INTEGER ',' split = STRING ',' object = [Object] ')'
;

ObjectReference:
	{ObjectReference}   object = [Object]
;

Literal:
	  {IntLiteral}      value = INTEGER
	| {StringLiteral}   value = STRING
	| {BooleanLiteral}  value = BOOLEAN
;

terminal INTEGER:
	INT | INT '^' INT
;
	
terminal BOOLEAN:
	'true' | 'false'
;

terminal INT:
	'0'..'9' ('0'..'9' | '_')*
;


/* Predicate Declarations */

RequiresBlock:
	(requiredPredicates += AlternativeRequiredPredicates ';')+
;

EnsuresBlock:
	(ensuredPRedicates += EnsuredPredicate ';')+
;

NegatesBlock:
	(negatedPredicates += NegatedPredicate ';')+
;

AlternativeRequiredPredicates:
	alternatives += RequiredPredicate ('||' alternatives += RequiredPredicate)*
;

RequiredPredicate:
	(condition = PredicateCondition '=>')? (negated ?= '!')? predicate = Predicate
;

EnsuredPredicate:
	(condition = PredicateCondition '=>')? predicate = Predicate ('after' after = [Event])?
;

NegatedPredicate:
	(condition = PredicateCondition '=>')? predicate = Predicate ('after' after = [Event])?
;

Predicate:
	name = ID '[' (parameters += PredicateParameter (',' parameters += PredicateParameter)*)? ']'
;

PredicateCondition:
	Constraint | Predicate
;

TimedPredicate:
	EnsuredPredicate | NegatedPredicate
;

ConditionalPredicate:
	RequiredPredicate | TimedPredicate
;

PredicateParameter:
	value = LiteralExpression
	| {WildcardPredicateParameter} '_'
	| {ThisPredicateParameter}     'this'
;
